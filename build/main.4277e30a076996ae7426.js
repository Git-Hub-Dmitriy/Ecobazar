/*! For license information please see main.4277e30a076996ae7426.js.LICENSE.txt */
(self.webpackChunkecobazar=self.webpackChunkecobazar||[]).push([[792],{48:(e,t,a)=>{"use strict";var n,r=a(540),i=a.t(r,2),l=a(338);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},o.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(n||(n={}));const s="popstate";function c(e,t){if(!1===e||null==e)throw new Error(t)}function u(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function m(e,t){return{usr:e.state,key:e.key,idx:t}}function d(e,t,a,n){return void 0===a&&(a=null),o({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?p(t):t,{state:a,key:t&&t.key||n||Math.random().toString(36).substr(2,8)})}function f(e){let{pathname:t="/",search:a="",hash:n=""}=e;return a&&"?"!==a&&(t+="?"===a.charAt(0)?a:"?"+a),n&&"#"!==n&&(t+="#"===n.charAt(0)?n:"#"+n),t}function p(e){let t={};if(e){let a=e.indexOf("#");a>=0&&(t.hash=e.substr(a),e=e.substr(0,a));let n=e.indexOf("?");n>=0&&(t.search=e.substr(n),e=e.substr(0,n)),e&&(t.pathname=e)}return t}var h;!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(h||(h={}));const g=new Set(["lazy","caseSensitive","path","id","index","children"]);function v(e,t,a,n){return void 0===a&&(a=[]),void 0===n&&(n={}),e.map(((e,r)=>{let i=[...a,r],l="string"==typeof e.id?e.id:i.join("-");if(c(!0!==e.index||!e.children,"Cannot specify children on an index route"),c(!n[l],'Found a route id collision on id "'+l+"\".  Route id's must be globally unique within Data Router usages"),function(e){return!0===e.index}(e)){let a=o({},e,t(e),{id:l});return n[l]=a,a}{let a=o({},e,t(e),{id:l,children:void 0});return n[l]=a,e.children&&(a.children=v(e.children,t,i,n)),a}}))}function b(e,t,a){void 0===a&&(a="/");let n=D(("string"==typeof t?p(t):t).pathname||"/",a);if(null==n)return null;let r=y(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,a)=>e===t[a]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(r);let i=null;for(let e=0;null==i&&e<r.length;++e){let t=A(n);i=O(r[e],t)}return i}function y(e,t,a,n){void 0===t&&(t=[]),void 0===a&&(a=[]),void 0===n&&(n="");let r=(e,r,i)=>{let l={relativePath:void 0===i?e.path||"":i,caseSensitive:!0===e.caseSensitive,childrenIndex:r,route:e};l.relativePath.startsWith("/")&&(c(l.relativePath.startsWith(n),'Absolute route path "'+l.relativePath+'" nested under path "'+n+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),l.relativePath=l.relativePath.slice(n.length));let o=I([n,l.relativePath]),s=a.concat(l);e.children&&e.children.length>0&&(c(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+o+'".'),y(e.children,t,s,o)),(null!=e.path||e.index)&&t.push({path:o,score:P(o,e.index),routesMeta:s})};return e.forEach(((e,t)=>{var a;if(""!==e.path&&null!=(a=e.path)&&a.includes("?"))for(let a of E(e.path))r(e,t,a);else r(e,t)})),t}function E(e){let t=e.split("/");if(0===t.length)return[];let[a,...n]=t,r=a.endsWith("?"),i=a.replace(/\?$/,"");if(0===n.length)return r?[i,""]:[i];let l=E(n.join("/")),o=[];return o.push(...l.map((e=>""===e?i:[i,e].join("/")))),r&&o.push(...l),o.map((t=>e.startsWith("/")&&""===t?"/":t))}const R=/^:[\w-]+$/,w=3,N=2,S=1,k=10,C=-2,x=e=>"*"===e;function P(e,t){let a=e.split("/"),n=a.length;return a.some(x)&&(n+=C),t&&(n+=N),a.filter((e=>!x(e))).reduce(((e,t)=>e+(R.test(t)?w:""===t?S:k)),n)}function O(e,t){let{routesMeta:a}=e,n={},r="/",i=[];for(let e=0;e<a.length;++e){let l=a[e],o=e===a.length-1,s="/"===r?t:t.slice(r.length)||"/",c=q({path:l.relativePath,caseSensitive:l.caseSensitive,end:o},s);if(!c)return null;Object.assign(n,c.params);let u=l.route;i.push({params:n,pathname:I([r,c.pathname]),pathnameBase:B(I([r,c.pathnameBase])),route:u}),"/"!==c.pathnameBase&&(r=I([r,c.pathnameBase]))}return i}function q(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[a,n]=function(e,t,a){void 0===t&&(t=!1),void 0===a&&(a=!0),u("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let n=[],r="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,a)=>(n.push({paramName:t,isOptional:null!=a}),a?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(n.push({paramName:"*"}),r+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):a?r+="\\/*$":""!==e&&"/"!==e&&(r+="(?:(?=\\/|$))"),[new RegExp(r,t?void 0:"i"),n]}(e.path,e.caseSensitive,e.end),r=t.match(a);if(!r)return null;let i=r[0],l=i.replace(/(.)\/+$/,"$1"),o=r.slice(1);return{params:n.reduce(((e,t,a)=>{let{paramName:n,isOptional:r}=t;if("*"===n){let e=o[a]||"";l=i.slice(0,i.length-e.length).replace(/(.)\/+$/,"$1")}const s=o[a];return e[n]=r&&!s?void 0:(s||"").replace(/%2F/g,"/"),e}),{}),pathname:i,pathnameBase:l,pattern:e}}function A(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return u(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function D(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let a=t.endsWith("/")?t.length-1:t.length,n=e.charAt(a);return n&&"/"!==n?null:e.slice(a)||"/"}function M(e,t,a,n){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(n)+"].  Please separate it out to the `to."+a+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function j(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function T(e,t){let a=j(e);return t?a.map(((t,a)=>a===e.length-1?t.pathname:t.pathnameBase)):a.map((e=>e.pathnameBase))}function L(e,t,a,n){let r;void 0===n&&(n=!1),"string"==typeof e?r=p(e):(r=o({},e),c(!r.pathname||!r.pathname.includes("?"),M("?","pathname","search",r)),c(!r.pathname||!r.pathname.includes("#"),M("#","pathname","hash",r)),c(!r.search||!r.search.includes("#"),M("#","search","hash",r)));let i,l=""===e||""===r.pathname,s=l?"/":r.pathname;if(null==s)i=a;else{let e=t.length-1;if(!n&&s.startsWith("..")){let t=s.split("/");for(;".."===t[0];)t.shift(),e-=1;r.pathname=t.join("/")}i=e>=0?t[e]:"/"}let u=function(e,t){void 0===t&&(t="/");let{pathname:a,search:n="",hash:r=""}="string"==typeof e?p(e):e,i=a?a.startsWith("/")?a:function(e,t){let a=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?a.length>1&&a.pop():"."!==e&&a.push(e)})),a.length>1?a.join("/"):"/"}(a,t):t;return{pathname:i,search:_(n),hash:z(r)}}(r,i),m=s&&"/"!==s&&s.endsWith("/"),d=(l||"."===s)&&a.endsWith("/");return u.pathname.endsWith("/")||!m&&!d||(u.pathname+="/"),u}const I=e=>e.join("/").replace(/\/\/+/g,"/"),B=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),_=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",z=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;class F{constructor(e,t,a,n){void 0===n&&(n=!1),this.status=e,this.statusText=t||"",this.internal=n,a instanceof Error?(this.data=a.toString(),this.error=a):this.data=a}}function $(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const V=["post","put","patch","delete"],H=new Set(V),U=["get",...V],W=new Set(U),J=new Set([301,302,303,307,308]),Q=new Set([307,308]),K={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},G={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},Y={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},X=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Z=e=>({hasErrorBoundary:Boolean(e.hasErrorBoundary)}),ee="remix-router-transitions";function te(e,t,a,n,r,i,l,o){let s,c;if(l){s=[];for(let e of t)if(s.push(e),e.route.id===l){c=e;break}}else s=t,c=t[t.length-1];let u=L(r||".",T(s,i),D(e.pathname,a)||e.pathname,"path"===o);return null==r&&(u.search=e.search,u.hash=e.hash),null!=r&&""!==r&&"."!==r||!c||!c.route.index||Pe(u.search)||(u.search=u.search?u.search.replace(/^\?/,"?index&"):"?index"),n&&"/"!==a&&(u.pathname="/"===u.pathname?a:I([a,u.pathname])),f(u)}function ae(e,t,a,n){if(!n||!function(e){return null!=e&&("formData"in e&&null!=e.formData||"body"in e&&void 0!==e.body)}(n))return{path:a};if(n.formMethod&&(r=n.formMethod,!W.has(r.toLowerCase())))return{path:a,error:be(405,{method:n.formMethod})};var r;let i,l,o=()=>({path:a,error:be(400,{type:"invalid-body"})}),s=n.formMethod||"get",u=e?s.toUpperCase():s.toLowerCase(),m=Ee(a);if(void 0!==n.body){if("text/plain"===n.formEncType){if(!ke(u))return o();let e="string"==typeof n.body?n.body:n.body instanceof FormData||n.body instanceof URLSearchParams?Array.from(n.body.entries()).reduce(((e,t)=>{let[a,n]=t;return""+e+a+"="+n+"\n"}),""):String(n.body);return{path:a,submission:{formMethod:u,formAction:m,formEncType:n.formEncType,formData:void 0,json:void 0,text:e}}}if("application/json"===n.formEncType){if(!ke(u))return o();try{let e="string"==typeof n.body?JSON.parse(n.body):n.body;return{path:a,submission:{formMethod:u,formAction:m,formEncType:n.formEncType,formData:void 0,json:e,text:void 0}}}catch(e){return o()}}}if(c("function"==typeof FormData,"FormData is not available in this environment"),n.formData)i=me(n.formData),l=n.formData;else if(n.body instanceof FormData)i=me(n.body),l=n.body;else if(n.body instanceof URLSearchParams)i=n.body,l=de(i);else if(null==n.body)i=new URLSearchParams,l=new FormData;else try{i=new URLSearchParams(n.body),l=de(i)}catch(e){return o()}let d={formMethod:u,formAction:m,formEncType:n&&n.formEncType||"application/x-www-form-urlencoded",formData:l,json:void 0,text:void 0};if(ke(d.formMethod))return{path:a,submission:d};let h=p(a);return t&&h.search&&Pe(h.search)&&i.append("index",""),h.search="?"+i,{path:f(h),submission:d}}function ne(e,t,a,n,r,i,l,s,c,u,m,d,f,p,h,g){let v=g?we(g[1])?g[1].error:g[1].data:void 0,y=e.createURL(t.location),E=e.createURL(r),R=g&&we(g[1])?g[0]:void 0,w=R?function(e,t){let a=e;if(t){let n=e.findIndex((e=>e.route.id===t));n>=0&&(a=e.slice(0,n))}return a}(a,R):a,N=g?g[1].statusCode:void 0,S=l&&N&&N>=400,k=w.filter(((e,a)=>{let{route:r}=e;if(r.lazy)return!0;if(null==r.loader)return!1;if(i)return!("function"==typeof r.loader&&!r.loader.hydrate&&(void 0!==t.loaderData[r.id]||t.errors&&void 0!==t.errors[r.id]));if(function(e,t,a){let n=!t||a.route.id!==t.route.id,r=void 0===e[a.route.id];return n||r}(t.loaderData,t.matches[a],e)||c.some((t=>t===e.route.id)))return!0;let l=t.matches[a],u=e;return ie(e,o({currentUrl:y,currentParams:l.params,nextUrl:E,nextParams:u.params},n,{actionResult:v,unstable_actionStatus:N,defaultShouldRevalidate:!S&&(s||y.pathname+y.search===E.pathname+E.search||y.search!==E.search||re(l,u))}))})),C=[];return d.forEach(((e,r)=>{if(i||!a.some((t=>t.route.id===e.routeId))||m.has(r))return;let l=b(p,e.path,h);if(!l)return void C.push({key:r,routeId:e.routeId,path:e.path,matches:null,match:null,controller:null});let c=t.fetchers.get(r),d=Oe(l,e.path),g=!1;g=!f.has(r)&&(!!u.includes(r)||(c&&"idle"!==c.state&&void 0===c.data?s:ie(d,o({currentUrl:y,currentParams:t.matches[t.matches.length-1].params,nextUrl:E,nextParams:a[a.length-1].params},n,{actionResult:v,unstable_actionStatus:N,defaultShouldRevalidate:!S&&s})))),g&&C.push({key:r,routeId:e.routeId,path:e.path,matches:l,match:d,controller:new AbortController})})),[k,C]}function re(e,t){let a=e.route.path;return e.pathname!==t.pathname||null!=a&&a.endsWith("*")&&e.params["*"]!==t.params["*"]}function ie(e,t){if(e.route.shouldRevalidate){let a=e.route.shouldRevalidate(t);if("boolean"==typeof a)return a}return t.defaultShouldRevalidate}async function le(e,t,a){if(!e.lazy)return;let n=await e.lazy();if(!e.lazy)return;let r=a[e.id];c(r,"No route found in manifest");let i={};for(let e in n){let t=void 0!==r[e]&&"hasErrorBoundary"!==e;u(!t,'Route "'+r.id+'" has a static property "'+e+'" defined but its lazy function is also returning a value for this property. The lazy route property "'+e+'" will be ignored.'),t||g.has(e)||(i[e]=n[e])}Object.assign(r,i),Object.assign(r,o({},t(r),{lazy:void 0}))}function oe(e){return Promise.all(e.matches.map((e=>e.resolve())))}function se(e,t,a,n,r,i){let l=e.headers.get("Location");if(c(l,"Redirects returned/thrown from loaders/actions must have a Location header"),!X.test(l)){let o=n.slice(0,n.findIndex((e=>e.route.id===a))+1);l=te(new URL(t.url),o,r,!0,l,i),e.headers.set("Location",l)}return e}function ce(e,t,a){if(X.test(e)){let n=e,r=n.startsWith("//")?new URL(t.protocol+n):new URL(n),i=null!=D(r.pathname,a);if(r.origin===t.origin&&i)return r.pathname+r.search+r.hash}return e}function ue(e,t,a,n){let r=e.createURL(Ee(t)).toString(),i={signal:a};if(n&&ke(n.formMethod)){let{formMethod:e,formEncType:t}=n;i.method=e.toUpperCase(),"application/json"===t?(i.headers=new Headers({"Content-Type":t}),i.body=JSON.stringify(n.json)):"text/plain"===t?i.body=n.text:"application/x-www-form-urlencoded"===t&&n.formData?i.body=me(n.formData):i.body=n.formData}return new Request(r,i)}function me(e){let t=new URLSearchParams;for(let[a,n]of e.entries())t.append(a,"string"==typeof n?n:n.name);return t}function de(e){let t=new FormData;for(let[a,n]of e.entries())t.append(a,n);return t}function fe(e,t,a,n,r,i,l,s){let{loaderData:u,errors:m}=function(e,t,a,n,r,i){let l,o={},s=null,u=!1,m={},d=n&&we(n[1])?n[1].error:void 0;return a.forEach(((a,n)=>{let f=t[n].route.id;if(c(!Ne(a),"Cannot handle redirect results in processLoaderData"),we(a)){let t=a.error;if(void 0!==d&&(t=d,d=void 0),s=s||{},i)s[f]=t;else{let a=ge(e,f);null==s[a.route.id]&&(s[a.route.id]=t)}o[f]=void 0,u||(u=!0,l=$(a.error)?a.error.status:500),a.headers&&(m[f]=a.headers)}else Re(a)?(r.set(f,a.deferredData),o[f]=a.deferredData.data,null==a.statusCode||200===a.statusCode||u||(l=a.statusCode),a.headers&&(m[f]=a.headers)):(o[f]=a.data,a.statusCode&&200!==a.statusCode&&!u&&(l=a.statusCode),a.headers&&(m[f]=a.headers))})),void 0!==d&&n&&(s={[n[0]]:d},o[n[0]]=void 0),{loaderData:o,errors:s,statusCode:l||200,loaderHeaders:m}}(t,a,n,r,s,!1);for(let t=0;t<i.length;t++){let{key:a,match:n,controller:r}=i[t];c(void 0!==l&&void 0!==l[t],"Did not find corresponding fetcher result");let s=l[t];if(!r||!r.signal.aborted)if(we(s)){let t=ge(e.matches,null==n?void 0:n.route.id);m&&m[t.route.id]||(m=o({},m,{[t.route.id]:s.error})),e.fetchers.delete(a)}else if(Ne(s))c(!1,"Unhandled fetcher revalidation redirect");else if(Re(s))c(!1,"Unhandled fetcher deferred data");else{let t=Me(s.data);e.fetchers.set(a,t)}}return{loaderData:u,errors:m}}function pe(e,t,a,n){let r=o({},t);for(let i of a){let a=i.route.id;if(t.hasOwnProperty(a)?void 0!==t[a]&&(r[a]=t[a]):void 0!==e[a]&&i.route.loader&&(r[a]=e[a]),n&&n.hasOwnProperty(a))break}return r}function he(e){return e?we(e[1])?{actionData:{}}:{actionData:{[e[0]]:e[1].data}}:{}}function ge(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function ve(e){let t=1===e.length?e[0]:e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function be(e,t){let{pathname:a,routeId:n,method:r,type:i}=void 0===t?{}:t,l="Unknown Server Error",o="Unknown @remix-run/router error";return 400===e?(l="Bad Request",r&&a&&n?o="You made a "+r+' request to "'+a+'" but did not provide a `loader` for route "'+n+'", so there is no way to handle the request.':"defer-action"===i?o="defer() is not supported in actions":"invalid-body"===i&&(o="Unable to encode submission body")):403===e?(l="Forbidden",o='Route "'+n+'" does not match URL "'+a+'"'):404===e?(l="Not Found",o='No route matches URL "'+a+'"'):405===e&&(l="Method Not Allowed",r&&a&&n?o="You made a "+r.toUpperCase()+' request to "'+a+'" but did not provide an `action` for route "'+n+'", so there is no way to handle the request.':r&&(o='Invalid request method "'+r.toUpperCase()+'"')),new F(e||500,l,new Error(o),!0)}function ye(e){for(let t=e.length-1;t>=0;t--){let a=e[t];if(Ne(a))return{result:a,idx:t}}}function Ee(e){return f(o({},"string"==typeof e?p(e):e,{hash:""}))}function Re(e){return e.type===h.deferred}function we(e){return e.type===h.error}function Ne(e){return(e&&e.type)===h.redirect}function Se(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"object"==typeof e.headers&&void 0!==e.body}function ke(e){return H.has(e.toLowerCase())}async function Ce(e,t,a,n,r,i){for(let l=0;l<a.length;l++){let o=a[l],s=t[l];if(!s)continue;let u=e.find((e=>e.route.id===s.route.id)),m=null!=u&&!re(u,s)&&void 0!==(i&&i[s.route.id]);if(Re(o)&&(r||m)){let e=n[l];c(e,"Expected an AbortSignal for revalidating fetcher deferred result"),await xe(o,e,r).then((e=>{e&&(a[l]=e||a[l])}))}}}async function xe(e,t,a){if(void 0===a&&(a=!1),!await e.deferredData.resolveData(t)){if(a)try{return{type:h.data,data:e.deferredData.unwrappedData}}catch(e){return{type:h.error,error:e}}return{type:h.data,data:e.deferredData.data}}}function Pe(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function Oe(e,t){let a="string"==typeof t?p(t).search:t.search;if(e[e.length-1].route.index&&Pe(a||""))return e[e.length-1];let n=j(e);return n[n.length-1]}function qe(e){let{formMethod:t,formAction:a,formEncType:n,text:r,formData:i,json:l}=e;if(t&&a&&n)return null!=r?{formMethod:t,formAction:a,formEncType:n,formData:void 0,json:void 0,text:r}:null!=i?{formMethod:t,formAction:a,formEncType:n,formData:i,json:void 0,text:void 0}:void 0!==l?{formMethod:t,formAction:a,formEncType:n,formData:void 0,json:l,text:void 0}:void 0}function Ae(e,t){return t?{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}:{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function De(e,t){return e?{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function Me(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}function je(){return je=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},je.apply(this,arguments)}Symbol("deferred");const Te=r.createContext(null),Le=r.createContext(null),Ie=r.createContext(null),Be=r.createContext(null),_e=r.createContext({outlet:null,matches:[],isDataRoute:!1}),ze=r.createContext(null);function Fe(){return null!=r.useContext(Be)}function $e(){return Fe()||c(!1),r.useContext(Be).location}function Ve(e){r.useContext(Ie).static||r.useLayoutEffect(e)}function He(){let{isDataRoute:e}=r.useContext(_e);return e?function(){let{router:e}=function(e){let t=r.useContext(Te);return t||c(!1),t}(Ze.UseNavigateStable),t=tt(et.UseNavigateStable),a=r.useRef(!1);return Ve((()=>{a.current=!0})),r.useCallback((function(n,r){void 0===r&&(r={}),a.current&&("number"==typeof n?e.navigate(n):e.navigate(n,je({fromRouteId:t},r)))}),[e,t])}():function(){Fe()||c(!1);let e=r.useContext(Te),{basename:t,future:a,navigator:n}=r.useContext(Ie),{matches:i}=r.useContext(_e),{pathname:l}=$e(),o=JSON.stringify(T(i,a.v7_relativeSplatPath)),s=r.useRef(!1);return Ve((()=>{s.current=!0})),r.useCallback((function(a,r){if(void 0===r&&(r={}),!s.current)return;if("number"==typeof a)return void n.go(a);let i=L(a,JSON.parse(o),l,"path"===r.relative);null==e&&"/"!==t&&(i.pathname="/"===i.pathname?t:I([t,i.pathname])),(r.replace?n.replace:n.push)(i,r.state,r)}),[t,n,o,l,e])}()}const Ue=r.createContext(null);function We(){let{matches:e}=r.useContext(_e),t=e[e.length-1];return t?t.params:{}}function Je(e,t){let{relative:a}=void 0===t?{}:t,{future:n}=r.useContext(Ie),{matches:i}=r.useContext(_e),{pathname:l}=$e(),o=JSON.stringify(T(i,n.v7_relativeSplatPath));return r.useMemo((()=>L(e,JSON.parse(o),l,"path"===a)),[e,o,l,a])}function Qe(e,t,a,i){Fe()||c(!1);let{navigator:l}=r.useContext(Ie),{matches:o}=r.useContext(_e),s=o[o.length-1],u=s?s.params:{},m=(s&&s.pathname,s?s.pathnameBase:"/");s&&s.route;let d,f=$e();if(t){var h;let e="string"==typeof t?p(t):t;"/"===m||(null==(h=e.pathname)?void 0:h.startsWith(m))||c(!1),d=e}else d=f;let g=d.pathname||"/",v=g;if("/"!==m){let e=m.replace(/^\//,"").split("/");v="/"+g.replace(/^\//,"").split("/").slice(e.length).join("/")}let y=b(e,{pathname:v}),E=function(e,t,a,n){var i;if(void 0===t&&(t=[]),void 0===a&&(a=null),void 0===n&&(n=null),null==e){var l;if(null==(l=a)||!l.errors)return null;e=a.matches}let o=e,s=null==(i=a)?void 0:i.errors;if(null!=s){let e=o.findIndex((e=>e.route.id&&void 0!==(null==s?void 0:s[e.route.id])));e>=0||c(!1),o=o.slice(0,Math.min(o.length,e+1))}let u=!1,m=-1;if(a&&n&&n.v7_partialHydration)for(let e=0;e<o.length;e++){let t=o[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(m=e),t.route.id){let{loaderData:e,errors:n}=a,r=t.route.loader&&void 0===e[t.route.id]&&(!n||void 0===n[t.route.id]);if(t.route.lazy||r){u=!0,o=m>=0?o.slice(0,m+1):[o[0]];break}}}return o.reduceRight(((e,n,i)=>{let l,c=!1,d=null,f=null;var p;a&&(l=s&&n.route.id?s[n.route.id]:void 0,d=n.route.errorElement||Ge,u&&(m<0&&0===i?(at[p="route-fallback"]||(at[p]=!0),c=!0,f=null):m===i&&(c=!0,f=n.route.hydrateFallbackElement||null)));let h=t.concat(o.slice(0,i+1)),g=()=>{let t;return t=l?d:c?f:n.route.Component?r.createElement(n.route.Component,null):n.route.element?n.route.element:e,r.createElement(Xe,{match:n,routeContext:{outlet:e,matches:h,isDataRoute:null!=a},children:t})};return a&&(n.route.ErrorBoundary||n.route.errorElement||0===i)?r.createElement(Ye,{location:a.location,revalidation:a.revalidation,component:d,error:l,children:g(),routeContext:{outlet:null,matches:h,isDataRoute:!0}}):g()}),null)}(y&&y.map((e=>Object.assign({},e,{params:Object.assign({},u,e.params),pathname:I([m,l.encodeLocation?l.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?m:I([m,l.encodeLocation?l.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),o,a,i);return t&&E?r.createElement(Be.Provider,{value:{location:je({pathname:"/",search:"",hash:"",state:null,key:"default"},d),navigationType:n.Pop}},E):E}function Ke(){let e=function(){var e;let t=r.useContext(ze),a=function(e){let t=r.useContext(Le);return t||c(!1),t}(et.UseRouteError),n=tt(et.UseRouteError);return void 0!==t?t:null==(e=a.errors)?void 0:e[n]}(),t=$(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),a=e instanceof Error?e.stack:null,n={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return r.createElement(r.Fragment,null,r.createElement("h2",null,"Unexpected Application Error!"),r.createElement("h3",{style:{fontStyle:"italic"}},t),a?r.createElement("pre",{style:n},a):null,null)}const Ge=r.createElement(Ke,null);class Ye extends r.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?r.createElement(_e.Provider,{value:this.props.routeContext},r.createElement(ze.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function Xe(e){let{routeContext:t,match:a,children:n}=e,i=r.useContext(Te);return i&&i.static&&i.staticContext&&(a.route.errorElement||a.route.ErrorBoundary)&&(i.staticContext._deepestRenderedBoundaryId=a.route.id),r.createElement(_e.Provider,{value:t},n)}var Ze=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(Ze||{}),et=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(et||{});function tt(e){let t=function(e){let t=r.useContext(_e);return t||c(!1),t}(),a=t.matches[t.matches.length-1];return a.route.id||c(!1),a.route.id}const at={};function nt(e){return function(e){let t=r.useContext(_e).outlet;return t?r.createElement(Ue.Provider,{value:e},t):t}(e.context)}function rt(e){c(!1)}function it(e){let{basename:t="/",children:a=null,location:i,navigationType:l=n.Pop,navigator:o,static:s=!1,future:u}=e;Fe()&&c(!1);let m=t.replace(/^\/*/,"/"),d=r.useMemo((()=>({basename:m,navigator:o,static:s,future:je({v7_relativeSplatPath:!1},u)})),[m,u,o,s]);"string"==typeof i&&(i=p(i));let{pathname:f="/",search:h="",hash:g="",state:v=null,key:b="default"}=i,y=r.useMemo((()=>{let e=D(f,m);return null==e?null:{location:{pathname:e,search:h,hash:g,state:v,key:b},navigationType:l}}),[m,f,h,g,v,b,l]);return null==y?null:r.createElement(Ie.Provider,{value:d},r.createElement(Be.Provider,{children:a,value:y}))}i.startTransition,new Promise((()=>{})),r.Component;var lt,ot,st,ct,ut=a(556),mt=a.n(ut),dt=a(98),ft=a.n(dt),pt=a(115),ht=a.n(pt),gt=a(228),vt=a.n(gt),bt="bodyAttributes",yt="htmlAttributes",Et={BASE:"base",BODY:"body",HEAD:"head",HTML:"html",LINK:"link",META:"meta",NOSCRIPT:"noscript",SCRIPT:"script",STYLE:"style",TITLE:"title"},Rt=(Object.keys(Et).map((function(e){return Et[e]})),"charset"),wt="cssText",Nt="href",St="innerHTML",kt="itemprop",Ct="rel",xt={accesskey:"accessKey",charset:"charSet",class:"className",contenteditable:"contentEditable",contextmenu:"contextMenu","http-equiv":"httpEquiv",itemprop:"itemProp",tabindex:"tabIndex"},Pt=Object.keys(xt).reduce((function(e,t){return e[xt[t]]=t,e}),{}),Ot=[Et.NOSCRIPT,Et.SCRIPT,Et.STYLE],qt="data-react-helmet",At="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Dt=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),Mt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},jt=function(e,t){var a={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(a[n]=e[n]);return a},Tt=function(e){return!1===(!(arguments.length>1&&void 0!==arguments[1])||arguments[1])?String(e):String(e).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")},Lt=function(e){var t=Ft(e,Et.TITLE),a=Ft(e,"titleTemplate");if(a&&t)return a.replace(/%s/g,(function(){return Array.isArray(t)?t.join(""):t}));var n=Ft(e,"defaultTitle");return t||n||void 0},It=function(e){return Ft(e,"onChangeClientState")||function(){}},Bt=function(e,t){return t.filter((function(t){return void 0!==t[e]})).map((function(t){return t[e]})).reduce((function(e,t){return Mt({},e,t)}),{})},_t=function(e,t){return t.filter((function(e){return void 0!==e[Et.BASE]})).map((function(e){return e[Et.BASE]})).reverse().reduce((function(t,a){if(!t.length)for(var n=Object.keys(a),r=0;r<n.length;r++){var i=n[r].toLowerCase();if(-1!==e.indexOf(i)&&a[i])return t.concat(a)}return t}),[])},zt=function(e,t,a){var n={};return a.filter((function(t){return!!Array.isArray(t[e])||(void 0!==t[e]&&Wt("Helmet: "+e+' should be of type "Array". Instead found type "'+At(t[e])+'"'),!1)})).map((function(t){return t[e]})).reverse().reduce((function(e,a){var r={};a.filter((function(e){for(var a=void 0,i=Object.keys(e),l=0;l<i.length;l++){var o=i[l],s=o.toLowerCase();-1===t.indexOf(s)||a===Ct&&"canonical"===e[a].toLowerCase()||s===Ct&&"stylesheet"===e[s].toLowerCase()||(a=s),-1===t.indexOf(o)||o!==St&&o!==wt&&o!==kt||(a=o)}if(!a||!e[a])return!1;var c=e[a].toLowerCase();return n[a]||(n[a]={}),r[a]||(r[a]={}),!n[a][c]&&(r[a][c]=!0,!0)})).reverse().forEach((function(t){return e.push(t)}));for(var i=Object.keys(r),l=0;l<i.length;l++){var o=i[l],s=vt()({},n[o],r[o]);n[o]=s}return e}),[]).reverse()},Ft=function(e,t){for(var a=e.length-1;a>=0;a--){var n=e[a];if(n.hasOwnProperty(t))return n[t]}return null},$t=(lt=Date.now(),function(e){var t=Date.now();t-lt>16?(lt=t,e(t)):setTimeout((function(){$t(e)}),0)}),Vt=function(e){return clearTimeout(e)},Ht="undefined"!=typeof window?window.requestAnimationFrame&&window.requestAnimationFrame.bind(window)||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||$t:a.g.requestAnimationFrame||$t,Ut="undefined"!=typeof window?window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||Vt:a.g.cancelAnimationFrame||Vt,Wt=function(e){return console&&"function"==typeof console.warn&&console.warn(e)},Jt=null,Qt=function(e,t){var a=e.baseTag,n=e.bodyAttributes,r=e.htmlAttributes,i=e.linkTags,l=e.metaTags,o=e.noscriptTags,s=e.onChangeClientState,c=e.scriptTags,u=e.styleTags,m=e.title,d=e.titleAttributes;Yt(Et.BODY,n),Yt(Et.HTML,r),Gt(m,d);var f={baseTag:Xt(Et.BASE,a),linkTags:Xt(Et.LINK,i),metaTags:Xt(Et.META,l),noscriptTags:Xt(Et.NOSCRIPT,o),scriptTags:Xt(Et.SCRIPT,c),styleTags:Xt(Et.STYLE,u)},p={},h={};Object.keys(f).forEach((function(e){var t=f[e],a=t.newTags,n=t.oldTags;a.length&&(p[e]=a),n.length&&(h[e]=f[e].oldTags)})),t&&t(),s(e,p,h)},Kt=function(e){return Array.isArray(e)?e.join(""):e},Gt=function(e,t){void 0!==e&&document.title!==e&&(document.title=Kt(e)),Yt(Et.TITLE,t)},Yt=function(e,t){var a=document.getElementsByTagName(e)[0];if(a){for(var n=a.getAttribute(qt),r=n?n.split(","):[],i=[].concat(r),l=Object.keys(t),o=0;o<l.length;o++){var s=l[o],c=t[s]||"";a.getAttribute(s)!==c&&a.setAttribute(s,c),-1===r.indexOf(s)&&r.push(s);var u=i.indexOf(s);-1!==u&&i.splice(u,1)}for(var m=i.length-1;m>=0;m--)a.removeAttribute(i[m]);r.length===i.length?a.removeAttribute(qt):a.getAttribute(qt)!==l.join(",")&&a.setAttribute(qt,l.join(","))}},Xt=function(e,t){var a=document.head||document.querySelector(Et.HEAD),n=a.querySelectorAll(e+"["+qt+"]"),r=Array.prototype.slice.call(n),i=[],l=void 0;return t&&t.length&&t.forEach((function(t){var a=document.createElement(e);for(var n in t)if(t.hasOwnProperty(n))if(n===St)a.innerHTML=t.innerHTML;else if(n===wt)a.styleSheet?a.styleSheet.cssText=t.cssText:a.appendChild(document.createTextNode(t.cssText));else{var o=void 0===t[n]?"":t[n];a.setAttribute(n,o)}a.setAttribute(qt,"true"),r.some((function(e,t){return l=t,a.isEqualNode(e)}))?r.splice(l,1):i.push(a)})),r.forEach((function(e){return e.parentNode.removeChild(e)})),i.forEach((function(e){return a.appendChild(e)})),{oldTags:r,newTags:i}},Zt=function(e){return Object.keys(e).reduce((function(t,a){var n=void 0!==e[a]?a+'="'+e[a]+'"':""+a;return t?t+" "+n:n}),"")},ea=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object.keys(e).reduce((function(t,a){return t[xt[a]||a]=e[a],t}),t)},ta=function(e,t,a){switch(e){case Et.TITLE:return{toComponent:function(){return e=t.title,a=t.titleAttributes,(n={key:e})[qt]=!0,i=ea(a,n),[r.createElement(Et.TITLE,i,e)];var e,a,n,i},toString:function(){return function(e,t,a,n){var r=Zt(a),i=Kt(t);return r?"<"+e+" "+qt+'="true" '+r+">"+Tt(i,n)+"</"+e+">":"<"+e+" "+qt+'="true">'+Tt(i,n)+"</"+e+">"}(e,t.title,t.titleAttributes,a)}};case bt:case yt:return{toComponent:function(){return ea(t)},toString:function(){return Zt(t)}};default:return{toComponent:function(){return function(e,t){return t.map((function(t,a){var n,i=((n={key:a})[qt]=!0,n);return Object.keys(t).forEach((function(e){var a=xt[e]||e;if(a===St||a===wt){var n=t.innerHTML||t.cssText;i.dangerouslySetInnerHTML={__html:n}}else i[a]=t[e]})),r.createElement(e,i)}))}(e,t)},toString:function(){return function(e,t,a){return t.reduce((function(t,n){var r=Object.keys(n).filter((function(e){return!(e===St||e===wt)})).reduce((function(e,t){var r=void 0===n[t]?t:t+'="'+Tt(n[t],a)+'"';return e?e+" "+r:r}),""),i=n.innerHTML||n.cssText||"",l=-1===Ot.indexOf(e);return t+"<"+e+" "+qt+'="true" '+r+(l?"/>":">"+i+"</"+e+">")}),"")}(e,t,a)}}}},aa=function(e){var t=e.baseTag,a=e.bodyAttributes,n=e.encode,r=e.htmlAttributes,i=e.linkTags,l=e.metaTags,o=e.noscriptTags,s=e.scriptTags,c=e.styleTags,u=e.title,m=void 0===u?"":u,d=e.titleAttributes;return{base:ta(Et.BASE,t,n),bodyAttributes:ta(bt,a,n),htmlAttributes:ta(yt,r,n),link:ta(Et.LINK,i,n),meta:ta(Et.META,l,n),noscript:ta(Et.NOSCRIPT,o,n),script:ta(Et.SCRIPT,s,n),style:ta(Et.STYLE,c,n),title:ta(Et.TITLE,{title:m,titleAttributes:d},n)}},na=ft()((function(e){return{baseTag:_t([Nt,"target"],e),bodyAttributes:Bt(bt,e),defer:Ft(e,"defer"),encode:Ft(e,"encodeSpecialCharacters"),htmlAttributes:Bt(yt,e),linkTags:zt(Et.LINK,[Ct,Nt],e),metaTags:zt(Et.META,["name",Rt,"http-equiv","property",kt],e),noscriptTags:zt(Et.NOSCRIPT,[St],e),onChangeClientState:It(e),scriptTags:zt(Et.SCRIPT,["src",St],e),styleTags:zt(Et.STYLE,[wt],e),title:Lt(e),titleAttributes:Bt("titleAttributes",e)}}),(function(e){Jt&&Ut(Jt),e.defer?Jt=Ht((function(){Qt(e,(function(){Jt=null}))})):(Qt(e),Jt=null)}),aa)((function(){return null})),ra=(ot=na,ct=st=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.shouldComponentUpdate=function(e){return!ht()(this.props,e)},t.prototype.mapNestedChildrenToProps=function(e,t){if(!t)return null;switch(e.type){case Et.SCRIPT:case Et.NOSCRIPT:return{innerHTML:t};case Et.STYLE:return{cssText:t}}throw new Error("<"+e.type+" /> elements are self-closing and can not contain children. Refer to our API for more information.")},t.prototype.flattenArrayTypeChildren=function(e){var t,a=e.child,n=e.arrayTypeChildren,r=e.newChildProps,i=e.nestedChildren;return Mt({},n,((t={})[a.type]=[].concat(n[a.type]||[],[Mt({},r,this.mapNestedChildrenToProps(a,i))]),t))},t.prototype.mapObjectTypeChildren=function(e){var t,a,n=e.child,r=e.newProps,i=e.newChildProps,l=e.nestedChildren;switch(n.type){case Et.TITLE:return Mt({},r,((t={})[n.type]=l,t.titleAttributes=Mt({},i),t));case Et.BODY:return Mt({},r,{bodyAttributes:Mt({},i)});case Et.HTML:return Mt({},r,{htmlAttributes:Mt({},i)})}return Mt({},r,((a={})[n.type]=Mt({},i),a))},t.prototype.mapArrayTypeChildrenToProps=function(e,t){var a=Mt({},t);return Object.keys(e).forEach((function(t){var n;a=Mt({},a,((n={})[t]=e[t],n))})),a},t.prototype.warnOnInvalidChildren=function(e,t){return!0},t.prototype.mapChildrenToProps=function(e,t){var a=this,n={};return r.Children.forEach(e,(function(e){if(e&&e.props){var r=e.props,i=r.children,l=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object.keys(e).reduce((function(t,a){return t[Pt[a]||a]=e[a],t}),t)}(jt(r,["children"]));switch(a.warnOnInvalidChildren(e,i),e.type){case Et.LINK:case Et.META:case Et.NOSCRIPT:case Et.SCRIPT:case Et.STYLE:n=a.flattenArrayTypeChildren({child:e,arrayTypeChildren:n,newChildProps:l,nestedChildren:i});break;default:t=a.mapObjectTypeChildren({child:e,newProps:t,newChildProps:l,nestedChildren:i})}}})),t=this.mapArrayTypeChildrenToProps(n,t)},t.prototype.render=function(){var e=this.props,t=e.children,a=jt(e,["children"]),n=Mt({},a);return t&&(n=this.mapChildrenToProps(t,n)),r.createElement(ot,n)},Dt(t,null,[{key:"canUseDOM",set:function(e){ot.canUseDOM=e}}]),t}(r.Component),st.propTypes={base:mt().object,bodyAttributes:mt().object,children:mt().oneOfType([mt().arrayOf(mt().node),mt().node]),defaultTitle:mt().string,defer:mt().bool,encodeSpecialCharacters:mt().bool,htmlAttributes:mt().object,link:mt().arrayOf(mt().object),meta:mt().arrayOf(mt().object),noscript:mt().arrayOf(mt().object),onChangeClientState:mt().func,script:mt().arrayOf(mt().object),style:mt().arrayOf(mt().object),title:mt().string,titleAttributes:mt().object,titleTemplate:mt().string},st.defaultProps={defer:!0,encodeSpecialCharacters:!0},st.peek=ot.peek,st.rewind=function(){var e=ot.rewind();return e||(e=aa({baseTag:[],bodyAttributes:{},encodeSpecialCharacters:!0,htmlAttributes:{},linkTags:[],metaTags:[],noscriptTags:[],scriptTags:[],styleTags:[],title:"",titleAttributes:{}})),e},ct);ra.renderStatic=ra.rewind;var ia="k5rxhHqu",la="Su5ZFZmt",oa="ONKIlDNO",sa="E95GfwiQ",ca="SRHevxME",ua="SXDi14tW",ma="cWVyVaGz",da="x1DRffTx",fa="qwPJmYLZ",pa="dM3pFR0u",ha="F7ht4zp1",ga="iLouOVAV",va="og00a8vw",ba="dpDYrIzr",ya=a(961),Ea=a.t(ya,2);function Ra(){return Ra=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Ra.apply(this,arguments)}function wa(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}function Na(e){return void 0===e&&(e=""),new URLSearchParams("string"==typeof e||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce(((t,a)=>{let n=e[a];return t.concat(Array.isArray(n)?n.map((e=>[a,e])):[[a,n]])}),[]))}new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const Sa=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"],ka=["aria-current","caseSensitive","className","end","style","to","unstable_viewTransition","children"];try{window.__reactRouterVersion="6"}catch(e){}function Ca(e){if(!e)return null;let t=Object.entries(e),a={};for(let[e,n]of t)if(n&&"RouteErrorResponse"===n.__type)a[e]=new F(n.status,n.statusText,n.data,!0===n.internal);else if(n&&"Error"===n.__type){if(n.__subType){let t=window[n.__subType];if("function"==typeof t)try{let r=new t(n.message);r.stack="",a[e]=r}catch(e){}}if(null==a[e]){let t=new Error(n.message);t.stack="",a[e]=t}}else a[e]=n;return a}const xa=r.createContext({isTransitioning:!1}),Pa=r.createContext(new Map),Oa=i.startTransition,qa=Ea.flushSync;function Aa(e){qa?qa(e):e()}i.useId;class Da{constructor(){this.status="pending",this.promise=new Promise(((e,t)=>{this.resolve=t=>{"pending"===this.status&&(this.status="resolved",e(t))},this.reject=e=>{"pending"===this.status&&(this.status="rejected",t(e))}}))}}function Ma(e){let{fallbackElement:t,router:a,future:n}=e,[i,l]=r.useState(a.state),[o,s]=r.useState(),[c,u]=r.useState({isTransitioning:!1}),[m,d]=r.useState(),[f,p]=r.useState(),[h,g]=r.useState(),v=r.useRef(new Map),{v7_startTransition:b}=n||{},y=r.useCallback((e=>{b?function(e){Oa?Oa(e):e()}(e):e()}),[b]),E=r.useCallback(((e,t)=>{let{deletedFetchers:n,unstable_flushSync:r,unstable_viewTransitionOpts:i}=t;n.forEach((e=>v.current.delete(e))),e.fetchers.forEach(((e,t)=>{void 0!==e.data&&v.current.set(t,e.data)}));let o=null==a.window||"function"!=typeof a.window.document.startViewTransition;if(i&&!o){if(r){Aa((()=>{f&&(m&&m.resolve(),f.skipTransition()),u({isTransitioning:!0,flushSync:!0,currentLocation:i.currentLocation,nextLocation:i.nextLocation})}));let t=a.window.document.startViewTransition((()=>{Aa((()=>l(e)))}));return t.finished.finally((()=>{Aa((()=>{d(void 0),p(void 0),s(void 0),u({isTransitioning:!1})}))})),void Aa((()=>p(t)))}f?(m&&m.resolve(),f.skipTransition(),g({state:e,currentLocation:i.currentLocation,nextLocation:i.nextLocation})):(s(e),u({isTransitioning:!0,flushSync:!1,currentLocation:i.currentLocation,nextLocation:i.nextLocation}))}else r?Aa((()=>l(e))):y((()=>l(e)))}),[a.window,f,m,v,y]);r.useLayoutEffect((()=>a.subscribe(E)),[a,E]),r.useEffect((()=>{c.isTransitioning&&!c.flushSync&&d(new Da)}),[c]),r.useEffect((()=>{if(m&&o&&a.window){let e=o,t=m.promise,n=a.window.document.startViewTransition((async()=>{y((()=>l(e))),await t}));n.finished.finally((()=>{d(void 0),p(void 0),s(void 0),u({isTransitioning:!1})})),p(n)}}),[y,o,m,a.window]),r.useEffect((()=>{m&&o&&i.location.key===o.location.key&&m.resolve()}),[m,f,i.location,o]),r.useEffect((()=>{!c.isTransitioning&&h&&(s(h.state),u({isTransitioning:!0,flushSync:!1,currentLocation:h.currentLocation,nextLocation:h.nextLocation}),g(void 0))}),[c.isTransitioning,h]),r.useEffect((()=>{}),[]);let R=r.useMemo((()=>({createHref:a.createHref,encodeLocation:a.encodeLocation,go:e=>a.navigate(e),push:(e,t,n)=>a.navigate(e,{state:t,preventScrollReset:null==n?void 0:n.preventScrollReset}),replace:(e,t,n)=>a.navigate(e,{replace:!0,state:t,preventScrollReset:null==n?void 0:n.preventScrollReset})})),[a]),w=a.basename||"/",N=r.useMemo((()=>({router:a,navigator:R,static:!1,basename:w})),[a,R,w]);return r.createElement(r.Fragment,null,r.createElement(Te.Provider,{value:N},r.createElement(Le.Provider,{value:i},r.createElement(Pa.Provider,{value:v.current},r.createElement(xa.Provider,{value:c},r.createElement(it,{basename:w,location:i.location,navigationType:i.historyAction,navigator:R,future:{v7_relativeSplatPath:a.future.v7_relativeSplatPath}},i.initialized||a.future.v7_partialHydration?r.createElement(ja,{routes:a.routes,future:a.future,state:i}):t))))),null)}function ja(e){let{routes:t,future:a,state:n}=e;return Qe(t,void 0,n,a)}const Ta="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,La=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Ia=r.forwardRef((function(e,t){let a,{onClick:n,relative:i,reloadDocument:l,replace:o,state:s,target:u,to:m,preventScrollReset:d,unstable_viewTransition:p}=e,h=wa(e,Sa),{basename:g}=r.useContext(Ie),v=!1;if("string"==typeof m&&La.test(m)&&(a=m,Ta))try{let e=new URL(window.location.href),t=m.startsWith("//")?new URL(e.protocol+m):new URL(m),a=D(t.pathname,g);t.origin===e.origin&&null!=a?m=a+t.search+t.hash:v=!0}catch(e){}let b=function(e,t){let{relative:a}=void 0===t?{}:t;Fe()||c(!1);let{basename:n,navigator:i}=r.useContext(Ie),{hash:l,pathname:o,search:s}=Je(e,{relative:a}),u=o;return"/"!==n&&(u="/"===o?n:I([n,o])),i.createHref({pathname:u,search:s,hash:l})}(m,{relative:i}),y=function(e,t){let{target:a,replace:n,state:i,preventScrollReset:l,relative:o,unstable_viewTransition:s}=void 0===t?{}:t,c=He(),u=$e(),m=Je(e,{relative:o});return r.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,a)){t.preventDefault();let a=void 0!==n?n:f(u)===f(m);c(e,{replace:a,state:i,preventScrollReset:l,relative:o,unstable_viewTransition:s})}}),[u,c,m,n,i,a,e,l,o,s])}(m,{replace:o,state:s,target:u,preventScrollReset:d,relative:i,unstable_viewTransition:p});return r.createElement("a",Ra({},h,{href:a||b,onClick:v||l?n:function(e){n&&n(e),e.defaultPrevented||y(e)},ref:t,target:u}))})),Ba=r.forwardRef((function(e,t){let{"aria-current":a="page",caseSensitive:n=!1,className:i="",end:l=!1,style:o,to:s,unstable_viewTransition:u,children:m}=e,d=wa(e,ka),f=Je(s,{relative:d.relative}),p=$e(),h=r.useContext(Le),{navigator:g,basename:v}=r.useContext(Ie),b=null!=h&&function(e,t){void 0===t&&(t={});let a=r.useContext(xa);null==a&&c(!1);let{basename:n}=function(e){let t=r.useContext(Te);return t||c(!1),t}(_a.useViewTransitionState),i=Je(e,{relative:t.relative});if(!a.isTransitioning)return!1;let l=D(a.currentLocation.pathname,n)||a.currentLocation.pathname,o=D(a.nextLocation.pathname,n)||a.nextLocation.pathname;return null!=q(i.pathname,o)||null!=q(i.pathname,l)}(f)&&!0===u,y=g.encodeLocation?g.encodeLocation(f).pathname:f.pathname,E=p.pathname,R=h&&h.navigation&&h.navigation.location?h.navigation.location.pathname:null;n||(E=E.toLowerCase(),R=R?R.toLowerCase():null,y=y.toLowerCase()),R&&v&&(R=D(R,v)||R);const w="/"!==y&&y.endsWith("/")?y.length-1:y.length;let N,S=E===y||!l&&E.startsWith(y)&&"/"===E.charAt(w),k=null!=R&&(R===y||!l&&R.startsWith(y)&&"/"===R.charAt(y.length)),C={isActive:S,isPending:k,isTransitioning:b},x=S?a:void 0;N="function"==typeof i?i(C):[i,S?"active":null,k?"pending":null,b?"transitioning":null].filter(Boolean).join(" ");let P="function"==typeof o?o(C):o;return r.createElement(Ia,Ra({},d,{"aria-current":x,className:N,ref:t,style:P,to:s,unstable_viewTransition:u}),"function"==typeof m?m(C):m)}));var _a,za;function Fa(e){let t=r.useRef(Na(e)),a=r.useRef(!1),n=$e(),i=r.useMemo((()=>function(e,t){let a=Na(e);return t&&t.forEach(((e,n)=>{a.has(n)||t.getAll(n).forEach((e=>{a.append(n,e)}))})),a}(n.search,a.current?null:t.current)),[n.search]),l=He(),o=r.useCallback(((e,t)=>{const n=Na("function"==typeof e?e(i):e);a.current=!0,l("?"+n,t)}),[l,i]);return[i,o]}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(_a||(_a={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(za||(za={}));var $a,Va=a(942),Ha=a.n(Va),Ua="M2CC3kdu",Wa="u94oinq8",Ja="yeRWe5ma",Qa="vI3NbzKs",Ka="aVOyWXxT",Ga="c3hM6YMQ";function Ya(){return Ya=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Ya.apply(this,arguments)}const Xa=function(e){return r.createElement("svg",Ya({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 18 17"},e),$a||($a=r.createElement("path",{stroke:"current",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M8.167 14.333A6.667 6.667 0 1 0 8.167 1a6.667 6.667 0 0 0 0 13.333M16.5 16l-3.625-3.625"})))};function Za(){return React.createElement("div",{className:Ua},React.createElement("form",{className:Ja,action:""},React.createElement("div",{className:Ka},React.createElement(Xa,{stroke:"black",className:Qa})),React.createElement("input",{autoComplete:"on",placeholder:"Search",className:Ga,type:"text"}),React.createElement("button",{className:Wa},"Search")))}$RefreshReg$(Za,"Search");var en,tn="flNGvSJK",an="R05czyCd",nn="rv463cbF";function rn(){return rn=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},rn.apply(this,arguments)}const ln=function(e){return r.createElement("svg",rn({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 32 31"},e),en||(en=r.createElement("path",{fill:"#00B307",d:"M31.275 3.843c-3.873 0-9.344.324-12.14 3.118-1.21 1.21-1.815 3.184-1.658 5.418a.725.725 0 0 0 1.279.42c1.555-1.83 3.488-3.296 5.749-4.358a.82.82 0 0 1 .625-.027.69.69 0 0 1 .398.348c.154.325.104.754-.407.995-.03.015-.055.034-.084.047-.01.004-.022.003-.031.007-5.571 2.619-8.31 7.187-9.555 11.885-.906-5.882-2.822-9.345-4.63-11.47C9.51 8.527 8.222 7.627 7.478 7.12c-.138-.095-.555-.38-.728-.552a.727.727 0 0 1 0-1.028c.284-.282.746-.282 1.061.032.077.068.2.156.358.26l.129.087c1.052.721 3.011 2.06 4.749 4.941a.726.726 0 0 0 1.335-.235c.38-1.937.21-4.812-1.518-6.54C10.069 1.293 4.598.968.727.968A.727.727 0 0 0 0 1.695c0 3.873.324 9.344 3.118 12.14 1.166 1.165 2.963 1.688 4.75 1.688 1.457 0 2.885-.364 3.98-.997 1.492 3.093 2.684 7.712 2.684 14.779a.727.727 0 0 0 1.453 0c0-3.942.675-8.674 3.188-12.568 1.007.984 2.74 1.607 4.662 1.665a9 9 0 0 0 .284.004c1.952 0 3.677-.611 4.762-1.698C31.678 13.912 32 8.44 32 4.568a.72.72 0 0 0-.725-.725"})))};function on(e){var t=e.colorText;return React.createElement("div",{className:tn},React.createElement(ln,{className:an}),React.createElement("p",{className:nn,style:{color:t}},"Ecobazar"))}$RefreshReg$(on,"Logo");var sn,cn,un="g9opZt7h",mn="fw53JPpK",dn="MLYtP2DE",fn="oIzVtgDL";function pn(){return pn=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},pn.apply(this,arguments)}const hn=function(e){return r.createElement("svg",pn({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 17 20"},e),sn||(sn=r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M16 8.364C16 14.09 8.5 19 8.5 19S1 14.09 1 8.364c0-1.953.79-3.826 2.197-5.207A7.57 7.57 0 0 1 8.5 1c1.99 0 3.897.776 5.303 2.157A7.3 7.3 0 0 1 16 8.364"})),cn||(cn=r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M8.5 10.818c1.38 0 2.5-1.099 2.5-2.454S9.88 5.909 8.5 5.909 6 7.008 6 8.364c0 1.355 1.12 2.454 2.5 2.454"})))};function gn(){return React.createElement("div",{className:un},React.createElement("div",{className:mn},React.createElement(hn,{stroke:"#B3B3B3",className:dn}),React.createElement("p",{className:fn},"Store Location: Lincoln- 344, Illinois, Chicago, USA")))}$RefreshReg$(gn,"Address");var vn,bn="zBg_WvYC",yn="Qk6v10YB",En="D92Dpoic",Rn="aGNiZQRF",wn="zCiPyIaA",Nn="jvmBcTID",Sn="jqVUfgWX",kn="fgwWj8lu",Cn="bi5mL4e7";function xn(){return xn=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},xn.apply(this,arguments)}const Pn=function(e){return r.createElement("svg",xn({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 16 10"},e),vn||(vn=r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"m15 1.5-7 7-7-7"})))};function On(){return React.createElement("div",{className:bn},React.createElement("div",{className:Cn},React.createElement("div",{className:Nn},React.createElement("div",{className:kn},React.createElement("p",{className:Sn},"Eng"),React.createElement(Pn,{stroke:"#1a1a1a",className:wn})),React.createElement("div",{className:En},React.createElement("p",{className:Rn},"USD"),React.createElement(Pn,{stroke:"#1a1a1a",className:wn}))),React.createElement(Ia,{to:"/login",className:yn},"Sign in / Sign Up")))}$RefreshReg$(On,"SectionCurrency");var qn,An="Au01Qr9Y",Dn="y_Uc1mzq";function Mn(){return Mn=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Mn.apply(this,arguments)}const jn=function(e){return r.createElement("svg",Mn({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 30 26"},e),qn||(qn=r.createElement("path",{strokeWidth:1.5,d:"M15 24.572C-11.668 9.833 7-6.167 15 3.951c8-10.118 26.667 5.882 0 20.621Z"})))};function Tn(){return React.createElement(Ba,{to:"wishlist",className:An},React.createElement(jn,{stroke:"#1a1a1a",className:Dn}))}$RefreshReg$(Tn,"LinkWishlist");var Ln,In="MDiL1eie",Bn="zrNr2LMR",_n="r2_5xxtP",zn="Epin8Sfd",Fn="pe524kuH",$n="U1GucgmP";function Vn(){return Vn=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Vn.apply(this,arguments)}const Hn=function(e){return r.createElement("svg",Vn({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 28 27"},e),Ln||(Ln=r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M8.333 10.667h-4.25L1.25 26.25h25.5l-2.833-15.583h-4.25m-11.334 0v-4.25A5.667 5.667 0 0 1 14 .75v0a5.667 5.667 0 0 1 5.667 5.667v4.25m-11.334 0h11.334m-11.334 0v4.25m11.334-4.25v4.25"})))};function Un(){return React.createElement(Ba,{to:"basket",className:In},React.createElement("div",{className:Bn},"0"),React.createElement(Hn,{stroke:"#1a1a1a",className:_n}),React.createElement("div",{className:zn},React.createElement("p",{className:$n},"Shopping cart:"),React.createElement("p",{className:Fn},"$ 00.00")))}$RefreshReg$(Un,"LinkBasket");var Wn,Jn="qkGroEs9",Qn="hR0_ldol",Kn="PJIOdAoV",Gn=$RefreshSig$();function Yn(){Gn();var e=(0,r.useContext)(Ao),t=(0,r.useContext)(Mo),a=(0,r.useContext)(To),n=(0,r.useContext)(Io),i=(0,r.useContext)(_o),l=function(e){return e.isActive?Jn:Kn};return React.createElement(React.Fragment,null,React.createElement("ul",{className:Qn},React.createElement("li",null,React.createElement(Ba,{onClick:function(){e(1)},className:l,to:"/"},"Home")),React.createElement("li",null,React.createElement(Ba,{onClick:function(){e(1),n({}),i({type:"reset"})},className:l,to:"shop"},"Shop")),React.createElement("li",null,React.createElement(Ba,{onClick:function(){e(1),a({type:"reset"}),t({})},className:l,to:"blog"},"Blog")),React.createElement("li",null,React.createElement(Ba,{onClick:function(){e(1)},className:l,to:"about"},"About Us")),React.createElement("li",null,React.createElement(Ba,{onClick:function(){e(1)},className:l,to:"contact"},"Contact Us"))))}function Xn(){return Xn=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Xn.apply(this,arguments)}Gn(Yn,"jKCi5dQI7yMW3f8u0ywYczDXe/4="),$RefreshReg$(Yn,"PagesLinks");const Zn=function(e){return r.createElement("svg",Xn({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 23 23"},e),Wn||(Wn=r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M14.436 2.375a8.77 8.77 0 0 1 6.189 6.189M13.53 5.757a5.26 5.26 0 0 1 3.713 3.712M7.115 11.652a9.23 9.23 0 0 0 4.27 4.252.87.87 0 0 0 .857-.065l2.74-1.826a.88.88 0 0 1 .829-.077l5.123 2.197a.87.87 0 0 1 .525.907 5.25 5.25 0 0 1-5.209 4.585A14.875 14.875 0 0 1 1.375 6.75 5.25 5.25 0 0 1 5.96 1.542a.87.87 0 0 1 .907.525l2.198 5.127a.88.88 0 0 1-.072.823l-1.82 2.78a.87.87 0 0 0-.058.855"})))};var er;function tr(){return tr=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},tr.apply(this,arguments)}const ar=function(e){return r.createElement("svg",tr({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 22 26"},e),er||(er=r.createElement("path",{strokeWidth:1.5,d:"M11 11.667A5.333 5.333 0 1 0 11 1a5.333 5.333 0 0 0 0 10.667ZM15 15.667H7c-3.683 0-6.98 3.4-4.557 6.172C4.09 23.724 6.816 25 11 25s6.908-1.276 8.556-3.161c2.424-2.774-.875-6.172-4.556-6.172Z"})))};function nr(){return React.createElement(React.Fragment,null,React.createElement("header",{className:ia},React.createElement("div",{className:"".concat(va," ").concat(la)},React.createElement("div",{className:ba},React.createElement(gn,null),React.createElement(On,null))),React.createElement("div",{className:Ha()(pa,la)},React.createElement("div",{className:ha},React.createElement(on,{colorTitle:"#002603"}),React.createElement(Za,null),React.createElement("div",{className:ga},React.createElement(Tn,null),React.createElement(Un,null)))),React.createElement("div",{className:"".concat(oa," ").concat(la)},React.createElement("div",{className:fa},React.createElement(Yn,null),React.createElement("div",{className:ua},React.createElement(Ia,{className:da,to:"tel:2195550114"},React.createElement(Zn,{stroke:"#ffffff",className:sa}),"(219) 555-0114"),React.createElement(Ba,{className:ma,to:"account/dashboard"},React.createElement(ar,{stroke:"#ffffff",className:ca})))))))}$RefreshReg$(nr,"Header");var rr="FJbVWykF",ir="ceS4Egxn",lr="_2usMQTRG",or="tvWkLzxb",sr="CtyX4Cfe",cr="EFoE5DZP",ur="jrqmwGk_",mr="gdM1AENL",dr="QIJaTt3U",fr="yy8YaNQS",pr="cmomkMIi",hr="MY_FEmVk",gr="SsPaua9O",vr="wzyN3dlx",br="LczKgdBa",yr="G85EYSCd",Er="s3ImVTc2",Rr="ohwssOWX",wr="XxYR4730",Nr="e_8Eg1EV";function Sr(){return React.createElement("div",{className:Er},React.createElement("form",{method:"post",name:"subscription",className:wr,action:"/"},React.createElement("input",{name:"email",placeholder:"Your email address",className:Nr,type:"email"}),React.createElement("button",{className:Rr},"Subscribe")))}$RefreshReg$(Sr,"Subscribe");var kr="Hdy6IBK4",Cr="mZXs0TAR",xr="p110Cvlj",Pr="Bkxjvt_y",Or="W9vv9mZ6";function qr(){return React.createElement("div",{className:kr},React.createElement(on,{colorText:"#ffffff"}),React.createElement("h2",{className:Or},"Morbi cursus porttitor enim lobortis molestie. Duis gravida turpis dui, eget bibendum magna congue nec."),React.createElement("div",{className:Cr},React.createElement("a",{href:"tel:2195550114",className:Pr},"(219) 555-0114"),React.createElement("p",null,"or"),React.createElement("a",{href:"mailto:proxy@gmail.com",className:xr},"Proxy@gmail.com")))}$RefreshReg$(qr,"BlockContact");var Ar="eFyHUAlj";function Dr(e){var t=e.active;return React.createElement(React.Fragment,null,React.createElement("div",{className:Ar},React.createElement("h1",null,"My Account"),React.createElement(Ba,{className:t,to:"account/dashboard"},"My Account"),React.createElement(Ba,{className:t,to:"account/orderHistory"},"Order History"),React.createElement("h1",null,"Shoping Cart"),React.createElement(Ba,{className:t,to:"account/accountWishlist"},"Wishlist")))}$RefreshReg$(Dr,"AccountSection");var Mr="W1bmWDpg";function jr(e){var t=e.active;return React.createElement(React.Fragment,null,React.createElement("div",{className:Mr},React.createElement("h1",null,"Helps"),React.createElement(Ba,{className:t,to:"contact"},"Contact"),React.createElement(Ba,{className:t,to:"faqs"},"Faqs"),React.createElement(Ba,{className:t,to:"terms"},"Terms & Condition"),React.createElement(Ba,{className:t,to:"privacyPolicy"},"Privacy Policy")))}$RefreshReg$(jr,"HelpsSection");var Tr="yJsS79Tm";function Lr(e){var t=e.active;return React.createElement(React.Fragment,null,React.createElement("div",{className:Tr},React.createElement("h1",null,"Proxy"),React.createElement(Ba,{className:t,to:"about"},"About"),React.createElement(Ba,{className:t,to:"shop"},"Shop"),React.createElement(Ba,{className:t,to:"shop"},"Product"),React.createElement(Ba,{className:t,to:"ordersHistory"},"Track Order")))}$RefreshReg$(Lr,"ProxySection");var Ir="LhKUGbAG";function Br(e){var t=e.active;return React.createElement(React.Fragment,null,React.createElement("div",{className:Ir},React.createElement("h1",null,"Categories"),React.createElement(Ba,{to:"shop",className:t},"Fruit & Vegetables"),React.createElement(Ba,{to:"shop",className:t},"Meat & Fish"),React.createElement(Ba,{to:"shop",className:t},"Bread & Bakery"),React.createElement(Ba,{to:"shop",className:t},"Beauty & Health")))}$RefreshReg$(Br,"CategoriesLink");var _r,zr,Fr,$r="Xl3D2phY",Vr="l_btGhQ6",Hr="l64TaV0e",Ur="GkWaPI4C",Wr="krIBzoOo";function Jr(){return Jr=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Jr.apply(this,arguments)}const Qr=function(e){return r.createElement("svg",Jr({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 40 40"},e),_r||(_r=r.createElement("circle",{cx:20,cy:20,r:20,fill:"#00B307"})),zr||(zr=r.createElement("g",{clipPath:"url(#iconFacebook_svg__a)"},r.createElement("path",{fill:"#fff",d:"M22.998 13.989h1.643v-2.862A21 21 0 0 0 22.247 11c-2.37 0-3.992 1.49-3.992 4.23v2.52H15.64v3.2h2.615V29h3.205v-8.05h2.509l.398-3.2H21.46v-2.203c.001-.925.25-1.558 1.539-1.558"}))),Fr||(Fr=r.createElement("defs",null,r.createElement("clipPath",{id:"iconFacebook_svg__a"},r.createElement("path",{fill:"#fff",d:"M11 11h18v18H11z"})))))};var Kr,Gr;function Yr(){return Yr=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Yr.apply(this,arguments)}const Xr=function(e){return r.createElement("svg",Yr({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 18 18"},e),Kr||(Kr=r.createElement("g",{clipPath:"url(#iconTwitter_svg__a)"},r.createElement("path",{d:"M18 3.419a7.7 7.7 0 0 1-2.126.583 3.67 3.67 0 0 0 1.623-2.04c-.713.425-1.5.726-2.34.893a3.689 3.689 0 0 0-6.383 2.523c0 .293.025.574.085.842a10.45 10.45 0 0 1-7.606-3.86 3.7 3.7 0 0 0-.505 1.866c0 1.277.658 2.41 1.64 3.066A3.64 3.64 0 0 1 .72 6.838v.04a3.71 3.71 0 0 0 2.957 3.626 3.7 3.7 0 0 1-.968.122c-.236 0-.475-.014-.699-.063a3.725 3.725 0 0 0 3.449 2.57 7.4 7.4 0 0 1-4.576 1.574c-.302 0-.593-.013-.883-.05a10.4 10.4 0 0 0 5.661 1.656c6.79 0 10.503-5.625 10.503-10.501q-.001-.243-.014-.477A7.4 7.4 0 0 0 18 3.419"}))),Gr||(Gr=r.createElement("defs",null,r.createElement("clipPath",{id:"iconTwitter_svg__a"},r.createElement("path",{fill:"#fff",d:"M0 0h18v18H0z"})))))};var Zr;function ei(){return ei=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},ei.apply(this,arguments)}const ti=function(e){return r.createElement("svg",ei({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 18 18"},e),Zr||(Zr=r.createElement("path",{fill:"#4D4D4D",d:"M9.245 0C4.31 0 1.688 3.161 1.688 6.609c0 1.598.893 3.592 2.323 4.224.217.098.335.056.384-.145.042-.153.23-.89.321-1.238a.32.32 0 0 0-.076-.312c-.475-.55-.852-1.55-.852-2.488 0-2.404 1.912-4.739 5.164-4.739 2.813 0 4.78 1.828 4.78 4.441 0 2.953-1.562 4.996-3.593 4.996-1.124 0-1.96-.882-1.695-1.973.32-1.3.95-2.697.95-3.634 0-.84-.476-1.536-1.445-1.536-1.145 0-2.073 1.133-2.073 2.654 0 .967.342 1.62.342 1.62l-1.342 5.426c-.355 1.445.049 3.786.083 3.988.022.111.147.146.216.055.112-.146 1.48-2.098 1.863-3.51l.713-2.598c.377.68 1.464 1.251 2.623 1.251 3.447 0 5.938-3.03 5.938-6.79C16.3 2.697 13.215 0 9.245 0"})))};var ai,ni;function ri(){return ri=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},ri.apply(this,arguments)}const ii=function(e){return r.createElement("svg",ri({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 18 18"},e),ai||(ai=r.createElement("g",{clipPath:"url(#iconInstagram_svg__a)"},r.createElement("path",{d:"M17.982 5.292c-.042-.956-.197-1.614-.418-2.184a4.4 4.4 0 0 0-1.04-1.596A4.4 4.4 0 0 0 14.93.475c-.573-.222-1.227-.377-2.183-.419C11.783.011 11.477 0 9.033 0s-2.75.01-3.71.053C4.368.095 3.71.25 3.14.47a4.4 4.4 0 0 0-1.596 1.041c-.457.45-.813.995-1.038 1.593C.285 3.678.13 4.332.088 5.288c-.046.964-.056 1.27-.056 3.714s.01 2.75.052 3.71c.043.956.197 1.613.419 2.183a4.4 4.4 0 0 0 1.04 1.596c.45.458.996.813 1.594 1.038.573.221 1.227.376 2.183.418.96.043 1.266.053 3.71.053s2.75-.01 3.71-.053c.956-.042 1.614-.197 2.183-.418a4.6 4.6 0 0 0 2.634-2.634c.221-.573.376-1.227.418-2.184.042-.96.053-1.265.053-3.71 0-2.443-.003-2.749-.046-3.709m-1.62 7.35c-.04.878-.187 1.353-.31 1.67a2.99 2.99 0 0 1-1.709 1.708c-.316.123-.795.271-1.67.31-.95.042-1.234.052-3.636.052s-2.69-.01-3.636-.052c-.88-.039-1.354-.187-1.67-.31a2.8 2.8 0 0 1-1.034-.671 2.8 2.8 0 0 1-.672-1.034c-.123-.316-.27-.795-.309-1.67-.042-.95-.053-1.235-.053-3.636 0-2.402.01-2.69.053-3.636.039-.88.186-1.354.31-1.67.144-.39.372-.746.675-1.034a2.8 2.8 0 0 1 1.033-.672c.317-.123.795-.27 1.67-.31.95-.041 1.235-.052 3.636-.052 2.406 0 2.69.01 3.636.053.88.039 1.354.186 1.67.31.39.143.746.372 1.034.67.3.293.528.644.672 1.035.123.316.27.794.31 1.67.042.95.052 1.234.052 3.636 0 2.401-.01 2.683-.053 3.632"}),r.createElement("path",{d:"M9.033 4.378a4.625 4.625 0 0 0 0 9.248 4.625 4.625 0 0 0 0-9.248m0 7.623a3 3 0 1 1 .001-6 3 3 0 0 1 0 6M14.92 4.195a1.08 1.08 0 1 1-2.16 0 1.08 1.08 0 0 1 2.16 0"}))),ni||(ni=r.createElement("defs",null,r.createElement("clipPath",{id:"iconInstagram_svg__a"},r.createElement("path",{fill:"#fff",d:"M0 0h18v18H0z"})))))};function li(){return React.createElement("div",{className:$r},React.createElement(Ia,{to:"https://uk-ua.facebook.com/login/?next=https%3A%2F%2Fuk-ua.facebook.com%2F"},React.createElement(Qr,{className:Vr})),React.createElement(Ia,{to:"https://x.com"},React.createElement(Xr,{fill:"#4D4D4D",className:Wr})),React.createElement(Ia,{to:"https://www.instagram.com/"},React.createElement(ti,{className:Ur})),React.createElement(Ia,{to:"https://www.patreon.com"},React.createElement(ii,{fill:"#4D4D4D",className:Hr})))}$RefreshReg$(li,"SocialMedia");var oi,si,ci="Xo52vuMf",ui="K2NeNNsk",mi="r9tYSKmi";function di(){return di=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},di.apply(this,arguments)}const fi=function(e){return r.createElement("svg",di({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 45 32"},e),oi||(oi=r.createElement("rect",{width:44,height:30.765,x:.5,y:.5,fill:"#1A1A1A",stroke:"#333",rx:4.794})),si||(si=r.createElement("path",{fill:"#fff",fillRule:"evenodd",d:"M12.508 11.042c-.378.466-.982.834-1.587.781-.075-.63.22-1.299.567-1.712.378-.479 1.039-.82 1.574-.846.063.656-.183 1.298-.554 1.777m.547.906c-.533-.032-1.019.166-1.411.327-.253.103-.466.19-.63.19-.182 0-.404-.091-.654-.195-.328-.136-.703-.29-1.095-.283-.9.013-1.738.544-2.197 1.39-.945 1.693-.246 4.199.667 5.576.447.683.982 1.43 1.687 1.404.31-.012.533-.11.764-.213.266-.117.542-.24.974-.24.416 0 .68.12.934.234.24.108.472.212.816.206.73-.013 1.19-.682 1.636-1.364.483-.733.695-1.447.727-1.556l.004-.012-.018-.009c-.16-.077-1.393-.665-1.405-2.241-.012-1.323.978-1.994 1.133-2.1l.019-.012c-.63-.971-1.612-1.076-1.951-1.102m5.054 8.324V10.045h3.682c1.901 0 3.23 1.365 3.23 3.359s-1.354 3.372-3.28 3.372h-2.109v3.496zm1.525-8.888h1.756c1.322 0 2.078.734 2.078 2.027 0 1.292-.756 2.033-2.084 2.033h-1.75zm10.417 7.661c-.403.8-1.291 1.306-2.248 1.306-1.416 0-2.405-.88-2.405-2.204 0-1.312.957-2.067 2.726-2.178l1.901-.118v-.565c0-.832-.522-1.285-1.454-1.285-.768 0-1.328.413-1.442 1.043h-1.372c.044-1.325 1.24-2.29 2.858-2.29 1.744 0 2.877.952 2.877 2.428v5.09h-1.41v-1.227zm-1.838.092c-.812 0-1.328-.407-1.328-1.03 0-.643.497-1.017 1.448-1.075l1.693-.112v.577c0 .958-.78 1.64-1.813 1.64m7.958 1.535c-.61 1.791-1.31 2.381-2.795 2.381-.113 0-.49-.013-.579-.039v-1.227c.095.013.328.027.447.027.674 0 1.051-.296 1.284-1.063l.139-.453-2.581-7.445h1.592l1.795 6.041h.031l1.794-6.041h1.549z",clipRule:"evenodd"})))};var pi,hi;function gi(){return gi=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},gi.apply(this,arguments)}const vi=function(e){return r.createElement("svg",gi({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 45 32"},e),pi||(pi=r.createElement("rect",{width:44,height:30.765,x:.5,y:.5,fill:"#1A1A1A",stroke:"#333",rx:4.794})),hi||(hi=r.createElement("path",{fill:"#fff",fillRule:"evenodd",d:"M14.23 20.989h-2.726l-2.045-8.028c-.097-.37-.303-.696-.606-.85a8.7 8.7 0 0 0-2.499-.85v-.309h4.392c.606 0 1.06.464 1.136 1.004l1.061 5.79 2.725-6.794h2.65zm5.603 0h-2.575l2.12-10.037h2.575zm5.453-7.256c.075-.54.53-.85 1.06-.85a4.7 4.7 0 0 1 2.5.463l.454-2.161a6.4 6.4 0 0 0-2.348-.464c-2.499 0-4.317 1.39-4.317 3.32 0 1.467 1.288 2.238 2.197 2.702.984.463 1.363.772 1.287 1.235 0 .695-.758 1.004-1.514 1.004-.91 0-1.818-.232-2.65-.618l-.455 2.162c.91.385 1.893.54 2.802.54 2.802.077 4.543-1.312 4.543-3.397 0-2.625-3.56-2.779-3.56-3.936m12.57 7.256L35.81 10.952h-2.196c-.454 0-.909.31-1.06.772l-3.786 9.265h2.65l.53-1.466h3.256l.303 1.466zm-3.864-7.334.757 3.783h-2.12z",clipRule:"evenodd"})))};var bi,yi,Ei,Ri;function wi(){return wi=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},wi.apply(this,arguments)}const Ni=function(e){return r.createElement("svg",wi({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 45 32"},e),bi||(bi=r.createElement("rect",{width:44,height:30.765,x:.5,y:.5,fill:"#1A1A1A",stroke:"#333",rx:4.794})),yi||(yi=r.createElement("path",{fill:"#FD6020",d:"m18.53 30.676 25.146-7.61v4.61a3 3 0 0 1-3 3z"})),Ei||(Ei=r.createElement("path",{fill:"#fff",fillRule:"evenodd",d:"M38.904 12.058c1.384 0 2.145.64 2.145 1.85.069.924-.554 1.706-1.384 1.848l1.868 2.631H40.08l-1.59-2.56h-.139v2.56h-1.176v-6.329zm-.553 2.916h.345c.761 0 1.107-.356 1.107-.996 0-.569-.346-.924-1.107-.924h-.345zm-5.258 3.413h3.32V17.32H34.27v-1.706h2.075v-1.067H34.27v-1.422h2.145v-1.067h-3.32zm-3.458-2.062-1.591-4.267h-1.245l2.56 6.471h.622l2.56-6.47h-1.246zm-14.042-1.067c0 1.778 1.383 3.271 3.113 3.271.553 0 1.037-.142 1.521-.355v-1.422c-.346.426-.83.71-1.383.71-1.107 0-2.006-.853-2.006-1.99v-.143c-.07-1.137.83-2.133 1.937-2.204.553 0 1.107.284 1.452.711v-1.422c-.415-.285-.968-.356-1.452-.356-1.799-.142-3.182 1.351-3.182 3.2m-2.146-.782c-.692-.284-.9-.427-.9-.782.07-.427.415-.782.83-.711.346 0 .692.213.969.497l.623-.853c-.485-.427-1.107-.71-1.73-.71-.968-.072-1.798.71-1.868 1.706v.07c0 .854.346 1.352 1.453 1.707.277.072.553.214.83.356a.75.75 0 0 1 .346.64c0 .498-.415.924-.83.924h-.07c-.553 0-1.037-.355-1.244-.853l-.761.782c.415.783 1.245 1.21 2.075 1.21 1.107.07 2.006-.783 2.075-1.92v-.214c-.069-.853-.415-1.28-1.798-1.849m-4.012 3.911h1.176v-6.329H9.435zM3.97 12.058h2.076c1.66.071 2.974 1.494 2.905 3.2 0 .925-.415 1.778-1.107 2.418-.622.498-1.383.782-2.144.711H3.97zm1.522 5.262c.554.072 1.176-.142 1.591-.497.415-.427.623-.996.623-1.636 0-.569-.208-1.138-.623-1.564-.415-.356-1.037-.57-1.59-.498h-.346v4.195z",clipRule:"evenodd"})),Ri||(Ri=r.createElement("path",{fill:"#FD6020",fillRule:"evenodd",d:"M23.753 11.912c-1.729 0-3.182 1.422-3.182 3.27 0 1.778 1.384 3.272 3.182 3.343 1.799.07 3.182-1.422 3.252-3.271-.07-1.85-1.453-3.342-3.252-3.342",clipRule:"evenodd"})))};var Si,ki,Ci,xi;function Pi(){return Pi=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Pi.apply(this,arguments)}const Oi=function(e){return r.createElement("svg",Pi({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 45 32"},e),Si||(Si=r.createElement("rect",{width:44,height:30.765,x:.5,y:.5,fill:"#1A1A1A",stroke:"#333",rx:4.794})),ki||(ki=r.createElement("path",{fill:"#ED0006",fillRule:"evenodd",d:"M28.558 24.393c4.957 0 8.975-3.97 8.975-8.868s-4.018-8.868-8.975-8.868a9 9 0 0 0-5.821 2.119 9 9 0 0 0-5.821-2.119c-4.957 0-8.975 3.97-8.975 8.868s4.018 8.867 8.975 8.867a9 9 0 0 0 5.821-2.118 9 9 0 0 0 5.821 2.118",clipRule:"evenodd"})),Ci||(Ci=r.createElement("path",{fill:"#F9A000",fillRule:"evenodd",d:"M22.736 22.274a8.8 8.8 0 0 0 3.153-6.75 8.8 8.8 0 0 0-3.153-6.748 9 9 0 0 1 5.822-2.119c4.956 0 8.974 3.97 8.974 8.868s-4.018 8.867-8.974 8.867a9 9 0 0 1-5.822-2.118",clipRule:"evenodd"})),xi||(xi=r.createElement("path",{fill:"#FF5E00",fillRule:"evenodd",d:"M22.737 22.274a8.8 8.8 0 0 0 3.153-6.749 8.8 8.8 0 0 0-3.153-6.75 8.8 8.8 0 0 0-3.153 6.75 8.8 8.8 0 0 0 3.153 6.75",clipRule:"evenodd"})))};var qi,Ai,Di,Mi;function ji(){return ji=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},ji.apply(this,arguments)}const Ti=function(e){return r.createElement("svg",ji({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 65 32"},e),qi||(qi=r.createElement("rect",{width:64,height:31,x:.5,y:.5,fill:"#1A1A1A",stroke:"#333",rx:4.794})),Ai||(Ai=r.createElement("g",{clipPath:"url(#iconSecurePayment_svg__a)"},r.createElement("path",{fill:"#1A1A1A",d:"M5 4h11v11H5z"}),r.createElement("path",{stroke:"#fff",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:.917,d:"M13.708 9.042H7.292a.917.917 0 0 0-.917.917v3.208c0 .506.41.917.917.917h6.416c.507 0 .917-.41.917-.917V9.959a.917.917 0 0 0-.917-.917M8.208 9.042V7.209a2.292 2.292 0 0 1 4.584 0v1.833"}))),Di||(Di=r.createElement("path",{fill:"#fff",d:"M21.278 13.077q-.759 0-1.364-.264a2.33 2.33 0 0 1-.935-.748 1.94 1.94 0 0 1-.352-1.111h1.067q.055.54.44.913.396.363 1.144.363.715 0 1.122-.352a1.17 1.17 0 0 0 .418-.924q0-.44-.242-.715a1.55 1.55 0 0 0-.605-.418 10 10 0 0 0-.979-.308 9 9 0 0 1-1.221-.396 2 2 0 0 1-.781-.616q-.32-.429-.319-1.144 0-.627.319-1.111.32-.484.891-.748a3.2 3.2 0 0 1 1.331-.264q1.078 0 1.76.539.693.54.781 1.43h-1.1q-.055-.44-.462-.77-.406-.34-1.078-.341-.627 0-1.023.33-.396.319-.396.902 0 .418.231.682.242.264.583.407.352.131.979.308.759.21 1.221.418.462.198.792.627.33.418.33 1.144 0 .561-.297 1.056t-.88.803-1.375.308m9.525-3.322q0 .285-.033.605h-4.818q.055.891.605 1.397.561.495 1.353.495.65 0 1.078-.297a1.62 1.62 0 0 0 .616-.814h1.078a2.62 2.62 0 0 1-.968 1.419q-.726.54-1.804.539a3.1 3.1 0 0 1-1.54-.385q-.671-.385-1.056-1.089-.385-.715-.385-1.65t.374-1.639q.375-.705 1.045-1.078.682-.385 1.562-.385.858 0 1.518.374t1.012 1.034q.363.65.363 1.474m-1.034-.209q0-.572-.253-.979a1.6 1.6 0 0 0-.693-.627 2.1 2.1 0 0 0-.957-.22q-.76 0-1.298.484-.528.484-.605 1.342zm1.981.429q0-.935.374-1.628.374-.704 1.034-1.089a3 3 0 0 1 1.53-.385q1.11 0 1.825.539.726.54.957 1.496h-1.078a1.54 1.54 0 0 0-.605-.869q-.44-.32-1.1-.319-.858 0-1.386.594-.528.583-.528 1.661 0 1.089.528 1.683t1.386.594q.66 0 1.1-.308t.605-.88h1.078a2.68 2.68 0 0 1-.968 1.485q-.726.55-1.815.55a3 3 0 0 1-1.529-.385 2.7 2.7 0 0 1-1.034-1.089q-.374-.705-.374-1.65m12.402-3.003V13h-1.001v-.891q-.285.462-.803.726a2.5 2.5 0 0 1-1.122.253q-.704 0-1.265-.286a2.2 2.2 0 0 1-.891-.88q-.32-.584-.319-1.419V6.972h.99v3.399q0 .89.451 1.375.45.473 1.232.473.803 0 1.265-.495t.462-1.441V6.972zm2.691.979q.264-.517.748-.803.495-.286 1.2-.286v1.034h-.265q-1.683 0-1.683 1.826V13h-1V6.972h1zm8.603 1.804q0 .285-.033.605h-4.818q.054.891.605 1.397.561.495 1.353.495.648 0 1.078-.297a1.62 1.62 0 0 0 .616-.814h1.078a2.62 2.62 0 0 1-.968 1.419q-.727.54-1.804.539a3.1 3.1 0 0 1-1.54-.385q-.672-.385-1.056-1.089-.385-.715-.385-1.65t.374-1.639a2.6 2.6 0 0 1 1.045-1.078q.681-.385 1.562-.385.858 0 1.518.374t1.012 1.034q.363.65.363 1.474m-1.034-.209q0-.572-.253-.979a1.6 1.6 0 0 0-.693-.627 2.1 2.1 0 0 0-.957-.22q-.76 0-1.298.484-.528.484-.605 1.342zM11.803 20.216q0 .672-.324 1.26-.312.588-.996.948-.672.36-1.704.36H7.375V26h-1.68v-8.376H8.78q.972 0 1.656.336t1.02.924q.348.588.348 1.332m-3.096 1.212q.696 0 1.032-.312.336-.324.336-.9 0-1.224-1.368-1.224H7.375v2.436zm3.857 1.224q0-1.008.396-1.788.408-.78 1.092-1.2.696-.42 1.548-.42.744 0 1.296.3.564.3.9.756v-.948h1.692V26h-1.692v-.972a2.54 2.54 0 0 1-.9.78q-.564.3-1.308.3-.84 0-1.536-.432a3.1 3.1 0 0 1-1.092-1.212q-.396-.792-.396-1.812m5.232.024q0-.612-.24-1.044a1.64 1.64 0 0 0-.648-.672 1.7 1.7 0 0 0-.876-.24q-.468 0-.864.228t-.648.672q-.24.432-.24 1.032t.24 1.056q.252.444.648.684.408.24.864.24.468 0 .876-.228.408-.24.648-.672.24-.444.24-1.056m9.693-3.324-4.116 9.792h-1.788l1.44-3.312-2.664-6.48h1.884l1.716 4.644 1.74-4.644zm9.161-.096q1.224 0 1.968.756.756.744.756 2.088V26h-1.68v-3.672q0-.78-.396-1.188-.396-.42-1.08-.42t-1.092.42q-.396.408-.396 1.188V26h-1.68v-3.672q0-.78-.396-1.188-.396-.42-1.08-.42-.696 0-1.104.42-.396.408-.396 1.188V26h-1.68v-6.648h1.68v.804q.324-.42.828-.66.516-.24 1.128-.24.78 0 1.392.336.612.324.948.936.324-.576.936-.924a2.7 2.7 0 0 1 1.344-.348m10.499 3.276q0 .36-.048.648h-4.86q.06.72.504 1.128t1.092.408q.936 0 1.332-.804h1.812a3.06 3.06 0 0 1-1.104 1.584q-.816.612-2.004.612-.96 0-1.728-.42a3.1 3.1 0 0 1-1.188-1.212q-.42-.78-.42-1.8 0-1.032.42-1.812t1.176-1.2 1.74-.42q.948 0 1.692.408.756.408 1.164 1.164.42.744.42 1.716m-1.74-.48q-.012-.648-.468-1.032-.456-.396-1.116-.396-.624 0-1.056.384-.42.372-.516 1.044zm6.65-2.796q1.188 0 1.92.756.732.744.732 2.088V26h-1.68v-3.672q0-.792-.396-1.212-.396-.432-1.08-.432-.696 0-1.104.432-.396.42-.396 1.212V26h-1.68v-6.648h1.68v.828q.336-.432.852-.672a2.64 2.64 0 0 1 1.152-.252m6.206 1.476v3.216q0 .336.155.492.169.144.552.144h.78V26h-1.056q-2.123 0-2.123-2.064v-3.204h-.792v-1.38h.791v-1.644h1.692v1.644h1.488v1.38z"})),Mi||(Mi=r.createElement("defs",null,r.createElement("clipPath",{id:"iconSecurePayment_svg__a"},r.createElement("path",{fill:"#fff",d:"M5 4h11v11H5z"})))))};function Li(){return React.createElement("div",{className:mi},React.createElement(fi,{className:ci}),React.createElement(vi,{className:ci}),React.createElement(Ni,{className:ci}),React.createElement(Oi,{className:ci}),React.createElement(Ti,{className:ui}))}function Ii(){var e=function(e){return e.isActive?rr:hr};return React.createElement(React.Fragment,null,React.createElement("footer",{className:ir},React.createElement("div",{className:Ha()(gr,lr)},React.createElement("div",{className:vr},React.createElement("h1",{className:yr},"Subcribe our Newsletter"),React.createElement("h3",{className:br},"Pellentesque eu nibh eget mauris congue mattis mattis nec tellus. Phasellus imperdiet elit eu magna.")),React.createElement(Sr,null),React.createElement(li,null)),React.createElement("div",{className:Ha()(or,lr)},React.createElement("div",{className:pr},React.createElement("div",{className:sr},React.createElement("div",{className:cr},React.createElement(qr,null)),React.createElement("div",{className:ur},React.createElement(Dr,{active:e}),React.createElement(jr,{active:e}),React.createElement(Lr,{active:e}),React.createElement(Br,{active:e}))),React.createElement("div",{className:mr}),React.createElement("div",{className:fr},React.createElement("h2",{className:dr},"Ecobazar eCommerce © 2021. All Rights Reserved"),React.createElement(Li,null))))))}$RefreshReg$(Li,"IconsPayment"),$RefreshReg$(Ii,"Footer");var Bi=[{id:0,name:"Green Apple",price:"$14.99",oldPrice:"$20.99",description:"Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla nibh diam, blandit vel consequat nec, ultrices et ipsum. Nulla varius magna a consequat pulvinar.",fullDescription:"Sed commodo aliquam dui ac porta. Fusce ipsum felis, imperdiet at posuere ac, viverra at mauris. Maecenas tincidunt ligula a sem vestibulum pharetra. Maecenas auctor tortor lacus, nec laoreet nisi porttitor vel. Etiam tincidunt metus vel dui interdum sollicitudin. Mauris sem ante, vestibulum nec orci vitae, aliquam mollis lacus. Sed et condimentum arcu, id molestie tellus. Nulla facilisi. Nam scelerisque vitae justo a convallis. Morbi urna ipsum, placerat quis commodo quis, egestas elementum leo. Donec convallis mollis enim. Aliquam id mi quam. Phasellus nec fringilla elit. Nulla mauris tellus, feugiat quis pharetra sed, gravida ac dui. Sed iaculis, metus faucibus elementum tincidunt, turpis mi viverra velit, pellentesque tristique neque mi eget nulla. Proin luctus elementum neque et pharetra. Cras et diam maximus, accumsan sapien et, sollicitudin velit. Nulla blandit eros non turpis lobortis iaculis at ut massa.",category:"Fruits",features:["100 g of fresh leaves provides.","Aliquam ac est at augue volutpat elementum.","Quisque nec enim eget sapien molestie.","Proin convallis odio volutpat finibus posuere."],pictures:["images/apple.png","images/green-apple.png","images/apple.png","images/apple.png"],imgBrand:"images/food-brand.png",inStock:!0,feedback:[{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"},{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"}],counterPurchase:1,tags:["Fruit","Healthy","Apple","Green Apple","Vitamins"],stars:["3","5","4","1","0"],weight:"03",color:"Green",type:"Organic"},{id:1,name:"Fresh Indian Malta",price:"$20.00",oldPrice:"",description:"Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla nibh diam, blandit vel consequat nec, ultrices et ipsum. Nulla varius magna a consequat pulvinar.",fullDescription:"Sed commodo aliquam dui ac porta. Fusce ipsum felis, imperdiet at posuere ac, viverra at mauris. Maecenas tincidunt ligula a sem vestibulum pharetra. Maecenas auctor tortor lacus, nec laoreet nisi porttitor vel. Etiam tincidunt metus vel dui interdum sollicitudin. Mauris sem ante, vestibulum nec orci vitae, aliquam mollis lacus. Sed et condimentum arcu, id molestie tellus. Nulla facilisi. Nam scelerisque vitae justo a convallis. Morbi urna ipsum, placerat quis commodo quis, egestas elementum leo. Donec convallis mollis enim. Aliquam id mi quam. Phasellus nec fringilla elit. Nulla mauris tellus, feugiat quis pharetra sed, gravida ac dui. Sed iaculis, metus faucibus elementum tincidunt, turpis mi viverra velit, pellentesque tristique neque mi eget nulla. Proin luctus elementum neque et pharetra. Cras et diam maximus, accumsan sapien et, sollicitudin velit. Nulla blandit eros non turpis lobortis iaculis at ut massa.",category:"Fruits",features:["100 g of fresh leaves provides.","Aliquam ac est at augue volutpat elementum.","Quisque nec enim eget sapien molestie.","Proin convallis odio volutpat finibus posuere."],pictures:["images/orange.png","images/orange.png","images/orange.png","images/orange.png"],imgBrand:"images/food-brand.png",inStock:!0,feedback:[{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"},{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"}],counterPurchase:1,tags:["Fruit","Healthy","Malta","Indian","Fresh Malta"],stars:["2","2","5","1","1"],weight:"03",color:"Orange",type:"Organic"},{id:2,name:"Chinese Cabbage",price:"$12.00",oldPrice:"$16.00",description:"Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla nibh diam, blandit vel consequat nec, ultrices et ipsum. Nulla varius magna a consequat pulvinar.",fullDescription:"Sed commodo aliquam dui ac porta. Fusce ipsum felis, imperdiet at posuere ac, viverra at mauris. Maecenas tincidunt ligula a sem vestibulum pharetra. Maecenas auctor tortor lacus, nec laoreet nisi porttitor vel. Etiam tincidunt metus vel dui interdum sollicitudin. Mauris sem ante, vestibulum nec orci vitae, aliquam mollis lacus. Sed et condimentum arcu, id molestie tellus. Nulla facilisi. Nam scelerisque vitae justo a convallis. Morbi urna ipsum, placerat quis commodo quis, egestas elementum leo. Donec convallis mollis enim. Aliquam id mi quam. Phasellus nec fringilla elit. Nulla mauris tellus, feugiat quis pharetra sed, gravida ac dui. Sed iaculis, metus faucibus elementum tincidunt, turpis mi viverra velit, pellentesque tristique neque mi eget nulla. Proin luctus elementum neque et pharetra. Cras et diam maximus, accumsan sapien et, sollicitudin velit. Nulla blandit eros non turpis lobortis iaculis at ut massa.",category:"Vegetables",features:["100 g of fresh leaves provides.","Aliquam ac est at augue volutpat elementum.","Quisque nec enim eget sapien molestie.","Proin convallis odio volutpat finibus posuere."],pictures:["images/chinese-cabbage.png","images/chinese-cabbage.png","images/chinese-cabbage.png","images/chinese-cabbage.png"],imgBrand:"images/food-brand.png",inStock:!0,feedback:[{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"},{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"}],counterPurchase:1,tags:["Vegetables","Healthy","Chinese","Cabbage","Green Cabbage"],stars:["5","5","5","2","2"],weight:"03",color:"Green",type:"Organic"},{id:3,name:"Green Lettuce",price:"$9.00",oldPrice:"",description:"Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla nibh diam, blandit vel consequat nec, ultrices et ipsum. Nulla varius magna a consequat pulvinar.",fullDescription:"Sed commodo aliquam dui ac porta. Fusce ipsum felis, imperdiet at posuere ac, viverra at mauris. Maecenas tincidunt ligula a sem vestibulum pharetra. Maecenas auctor tortor lacus, nec laoreet nisi porttitor vel. Etiam tincidunt metus vel dui interdum sollicitudin. Mauris sem ante, vestibulum nec orci vitae, aliquam mollis lacus. Sed et condimentum arcu, id molestie tellus. Nulla facilisi. Nam scelerisque vitae justo a convallis. Morbi urna ipsum, placerat quis commodo quis, egestas elementum leo. Donec convallis mollis enim. Aliquam id mi quam. Phasellus nec fringilla elit. Nulla mauris tellus, feugiat quis pharetra sed, gravida ac dui. Sed iaculis, metus faucibus elementum tincidunt, turpis mi viverra velit, pellentesque tristique neque mi eget nulla. Proin luctus elementum neque et pharetra. Cras et diam maximus, accumsan sapien et, sollicitudin velit. Nulla blandit eros non turpis lobortis iaculis at ut massa.",category:"Vegetables",features:["100 g of fresh leaves provides.","Aliquam ac est at augue volutpat elementum.","Quisque nec enim eget sapien molestie.","Proin convallis odio volutpat finibus posuere."],pictures:["images/green-letuce.png","images/green-letuce.png","images/green-letuce.png","images/green-letuce.png"],imgBrand:"images/food-brand.png",inStock:!0,feedback:[{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"},{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"}],counterPurchase:1,tags:["Vegetables","Healthy","Cabbage","Green Lettuce"],stars:["3","3","3","3","4"],weight:"03",color:"Green",type:"Organic"},{id:4,name:"Eggplant",price:"$34.00",oldPrice:"",description:"Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla nibh diam, blandit vel consequat nec, ultrices et ipsum. Nulla varius magna a consequat pulvinar.",fullDescription:"Sed commodo aliquam dui ac porta. Fusce ipsum felis, imperdiet at posuere ac, viverra at mauris. Maecenas tincidunt ligula a sem vestibulum pharetra. Maecenas auctor tortor lacus, nec laoreet nisi porttitor vel. Etiam tincidunt metus vel dui interdum sollicitudin. Mauris sem ante, vestibulum nec orci vitae, aliquam mollis lacus. Sed et condimentum arcu, id molestie tellus. Nulla facilisi. Nam scelerisque vitae justo a convallis. Morbi urna ipsum, placerat quis commodo quis, egestas elementum leo. Donec convallis mollis enim. Aliquam id mi quam. Phasellus nec fringilla elit. Nulla mauris tellus, feugiat quis pharetra sed, gravida ac dui. Sed iaculis, metus faucibus elementum tincidunt, turpis mi viverra velit, pellentesque tristique neque mi eget nulla. Proin luctus elementum neque et pharetra. Cras et diam maximus, accumsan sapien et, sollicitudin velit. Nulla blandit eros non turpis lobortis iaculis at ut massa.",category:"Vegetables",features:["100 g of fresh leaves provides.","Aliquam ac est at augue volutpat elementum.","Quisque nec enim eget sapien molestie.","Proin convallis odio volutpat finibus posuere."],pictures:["images/eggplant.png","images/eggplant.png","images/eggplant.png","images/eggplant.png"],imgBrand:"images/food-brand.png",inStock:!0,feedback:[{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"},{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"}],counterPurchase:1,tags:["Vegetables","Healthy","Eggplant"],stars:["4","4","4","4","0"],weight:"03",color:"Dark blue",type:"Organic"},{id:5,name:"Big Potatoes",price:"$20.00",oldPrice:"",description:"Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla nibh diam, blandit vel consequat nec, ultrices et ipsum. Nulla varius magna a consequat pulvinar.",fullDescription:"Sed commodo aliquam dui ac porta. Fusce ipsum felis, imperdiet at posuere ac, viverra at mauris. Maecenas tincidunt ligula a sem vestibulum pharetra. Maecenas auctor tortor lacus, nec laoreet nisi porttitor vel. Etiam tincidunt metus vel dui interdum sollicitudin. Mauris sem ante, vestibulum nec orci vitae, aliquam mollis lacus. Sed et condimentum arcu, id molestie tellus. Nulla facilisi. Nam scelerisque vitae justo a convallis. Morbi urna ipsum, placerat quis commodo quis, egestas elementum leo. Donec convallis mollis enim. Aliquam id mi quam. Phasellus nec fringilla elit. Nulla mauris tellus, feugiat quis pharetra sed, gravida ac dui. Sed iaculis, metus faucibus elementum tincidunt, turpis mi viverra velit, pellentesque tristique neque mi eget nulla. Proin luctus elementum neque et pharetra. Cras et diam maximus, accumsan sapien et, sollicitudin velit. Nulla blandit eros non turpis lobortis iaculis at ut massa.",category:"Vegetables",features:["100 g of fresh leaves provides.","Aliquam ac est at augue volutpat elementum.","Quisque nec enim eget sapien molestie.","Proin convallis odio volutpat finibus posuere."],pictures:["images/potatoes.png","images/potatoes.png","images/potatoes.png","images/potatoes.png"],imgBrand:"images/food-brand.png",inStock:!0,feedback:[{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"},{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"}],counterPurchase:1,tags:["Vegetables","Healthy","Potatoes","Big Potatoes"],stars:["2","2","2","2","2"],weight:"04",color:"Gray",type:"Organic"},{id:6,name:"Corn",price:"$20.00",oldPrice:"",description:"Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla nibh diam, blandit vel consequat nec, ultrices et ipsum. Nulla varius magna a consequat pulvinar.",fullDescription:"Sed commodo aliquam dui ac porta. Fusce ipsum felis, imperdiet at posuere ac, viverra at mauris. Maecenas tincidunt ligula a sem vestibulum pharetra. Maecenas auctor tortor lacus, nec laoreet nisi porttitor vel. Etiam tincidunt metus vel dui interdum sollicitudin. Mauris sem ante, vestibulum nec orci vitae, aliquam mollis lacus. Sed et condimentum arcu, id molestie tellus. Nulla facilisi. Nam scelerisque vitae justo a convallis. Morbi urna ipsum, placerat quis commodo quis, egestas elementum leo. Donec convallis mollis enim. Aliquam id mi quam. Phasellus nec fringilla elit. Nulla mauris tellus, feugiat quis pharetra sed, gravida ac dui. Sed iaculis, metus faucibus elementum tincidunt, turpis mi viverra velit, pellentesque tristique neque mi eget nulla. Proin luctus elementum neque et pharetra. Cras et diam maximus, accumsan sapien et, sollicitudin velit. Nulla blandit eros non turpis lobortis iaculis at ut massa.",category:"Vegetables",features:["100 g of fresh leaves provides.","Aliquam ac est at augue volutpat elementum.","Quisque nec enim eget sapien molestie.","Proin convallis odio volutpat finibus posuere."],pictures:["images/corn.png","images/corn.png","images/corn.png","images/corn.png"],imgBrand:"images/food-brand.png",inStock:!0,feedback:[{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"},{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"}],counterPurchase:1,tags:["Vegetables","Healthy","Corn"],stars:["5","5","5","5","5"],weight:"05",color:"Yellow",type:"Organic"},{id:7,name:"Fresh Cauliflower",price:"$12.00",oldPrice:"",description:"Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla nibh diam, blandit vel consequat nec, ultrices et ipsum. Nulla varius magna a consequat pulvinar.",fullDescription:"Sed commodo aliquam dui ac porta. Fusce ipsum felis, imperdiet at posuere ac, viverra at mauris. Maecenas tincidunt ligula a sem vestibulum pharetra. Maecenas auctor tortor lacus, nec laoreet nisi porttitor vel. Etiam tincidunt metus vel dui interdum sollicitudin. Mauris sem ante, vestibulum nec orci vitae, aliquam mollis lacus. Sed et condimentum arcu, id molestie tellus. Nulla facilisi. Nam scelerisque vitae justo a convallis. Morbi urna ipsum, placerat quis commodo quis, egestas elementum leo. Donec convallis mollis enim. Aliquam id mi quam. Phasellus nec fringilla elit. Nulla mauris tellus, feugiat quis pharetra sed, gravida ac dui. Sed iaculis, metus faucibus elementum tincidunt, turpis mi viverra velit, pellentesque tristique neque mi eget nulla. Proin luctus elementum neque et pharetra. Cras et diam maximus, accumsan sapien et, sollicitudin velit. Nulla blandit eros non turpis lobortis iaculis at ut massa.",category:"Vegetables",features:["100 g of fresh leaves provides.","Aliquam ac est at augue volutpat elementum.","Quisque nec enim eget sapien molestie.","Proin convallis odio volutpat finibus posuere."],pictures:["images/fresh-cauliflower.png","images/fresh-cauliflower.png","images/fresh-cauliflower.png","images/fresh-cauliflower.png"],imgBrand:"images/food-brand.png",inStock:!0,feedback:[{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"},{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"}],counterPurchase:1,tags:["Vegetables","Healthy","Cabbage"],stars:["2","2","2","2","2"],weight:"03",color:"Green",type:"Organic"},{id:8,name:"Green Capsicum",price:"$9.00",oldPrice:"$20.99",description:"Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla nibh diam, blandit vel consequat nec, ultrices et ipsum. Nulla varius magna a consequat pulvinar.",fullDescription:"Sed commodo aliquam dui ac porta. Fusce ipsum felis, imperdiet at posuere ac, viverra at mauris. Maecenas tincidunt ligula a sem vestibulum pharetra. Maecenas auctor tortor lacus, nec laoreet nisi porttitor vel. Etiam tincidunt metus vel dui interdum sollicitudin. Mauris sem ante, vestibulum nec orci vitae, aliquam mollis lacus. Sed et condimentum arcu, id molestie tellus. Nulla facilisi. Nam scelerisque vitae justo a convallis. Morbi urna ipsum, placerat quis commodo quis, egestas elementum leo. Donec convallis mollis enim. Aliquam id mi quam. Phasellus nec fringilla elit. Nulla mauris tellus, feugiat quis pharetra sed, gravida ac dui. Sed iaculis, metus faucibus elementum tincidunt, turpis mi viverra velit, pellentesque tristique neque mi eget nulla. Proin luctus elementum neque et pharetra. Cras et diam maximus, accumsan sapien et, sollicitudin velit. Nulla blandit eros non turpis lobortis iaculis at ut massa.",category:"Vegetables",features:["100 g of fresh leaves provides.","Aliquam ac est at augue volutpat elementum.","Quisque nec enim eget sapien molestie.","Proin convallis odio volutpat finibus posuere."],pictures:["images/green-capsicum.png","images/green-capsicum.png","images/green-capsicum.png","images/green-capsicum.png"],imgBrand:"images/food-brand.png",inStock:!0,feedback:[{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"},{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"}],counterPurchase:1,tags:["Vegetables","Healthy","Capsicum"],stars:["4","4","3","3","3"],weight:"03",color:"Green",type:"Organic"},{id:9,name:"Green Chili",price:"$34.00",oldPrice:"",description:"Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla nibh diam, blandit vel consequat nec, ultrices et ipsum. Nulla varius magna a consequat pulvinar.",fullDescription:"Sed commodo aliquam dui ac porta. Fusce ipsum felis, imperdiet at posuere ac, viverra at mauris. Maecenas tincidunt ligula a sem vestibulum pharetra. Maecenas auctor tortor lacus, nec laoreet nisi porttitor vel. Etiam tincidunt metus vel dui interdum sollicitudin. Mauris sem ante, vestibulum nec orci vitae, aliquam mollis lacus. Sed et condimentum arcu, id molestie tellus. Nulla facilisi. Nam scelerisque vitae justo a convallis. Morbi urna ipsum, placerat quis commodo quis, egestas elementum leo. Donec convallis mollis enim. Aliquam id mi quam. Phasellus nec fringilla elit. Nulla mauris tellus, feugiat quis pharetra sed, gravida ac dui. Sed iaculis, metus faucibus elementum tincidunt, turpis mi viverra velit, pellentesque tristique neque mi eget nulla. Proin luctus elementum neque et pharetra. Cras et diam maximus, accumsan sapien et, sollicitudin velit. Nulla blandit eros non turpis lobortis iaculis at ut massa.",category:"Vegetables",features:["100 g of fresh leaves provides.","Aliquam ac est at augue volutpat elementum.","Quisque nec enim eget sapien molestie.","Proin convallis odio volutpat finibus posuere."],pictures:["images/green-chili.png","images/green-chili.png","images/green-chili.png","images/green-chili.png"],imgBrand:"images/food-brand.png",inStock:!0,feedback:[{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"},{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"}],counterPurchase:1,tags:["Vegetables","Healthy","Chili"],stars:["2","2","1","1","1"],weight:"03",color:"Green",type:"Organic"},{id:10,name:"Red Chili",price:"$12.00",oldPrice:"",description:"Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla nibh diam, blandit vel consequat nec, ultrices et ipsum. Nulla varius magna a consequat pulvinar.",fullDescription:"Sed commodo aliquam dui ac porta. Fusce ipsum felis, imperdiet at posuere ac, viverra at mauris. Maecenas tincidunt ligula a sem vestibulum pharetra. Maecenas auctor tortor lacus, nec laoreet nisi porttitor vel. Etiam tincidunt metus vel dui interdum sollicitudin. Mauris sem ante, vestibulum nec orci vitae, aliquam mollis lacus. Sed et condimentum arcu, id molestie tellus. Nulla facilisi. Nam scelerisque vitae justo a convallis. Morbi urna ipsum, placerat quis commodo quis, egestas elementum leo. Donec convallis mollis enim. Aliquam id mi quam. Phasellus nec fringilla elit. Nulla mauris tellus, feugiat quis pharetra sed, gravida ac dui. Sed iaculis, metus faucibus elementum tincidunt, turpis mi viverra velit, pellentesque tristique neque mi eget nulla. Proin luctus elementum neque et pharetra. Cras et diam maximus, accumsan sapien et, sollicitudin velit. Nulla blandit eros non turpis lobortis iaculis at ut massa.",category:"Vegetables",features:["100 g of fresh leaves provides.","Aliquam ac est at augue volutpat elementum.","Quisque nec enim eget sapien molestie.","Proin convallis odio volutpat finibus posuere."],pictures:["images/red-chili.png","images/red-chili.png","images/red-chili.png","images/red-chili.png"],imgBrand:"images/food-brand.png",inStock:!0,feedback:[{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"},{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"}],counterPurchase:1,tags:["Vegetables","Healthy","Chili"],stars:["4","4","4","4","5"],weight:"03",color:"Red",type:"Organic"},{id:11,name:"Red Tomatos",price:"$9.00",oldPrice:"$20.99",description:"Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla nibh diam, blandit vel consequat nec, ultrices et ipsum. Nulla varius magna a consequat pulvinar.",fullDescription:"Sed commodo aliquam dui ac porta. Fusce ipsum felis, imperdiet at posuere ac, viverra at mauris. Maecenas tincidunt ligula a sem vestibulum pharetra. Maecenas auctor tortor lacus, nec laoreet nisi porttitor vel. Etiam tincidunt metus vel dui interdum sollicitudin. Mauris sem ante, vestibulum nec orci vitae, aliquam mollis lacus. Sed et condimentum arcu, id molestie tellus. Nulla facilisi. Nam scelerisque vitae justo a convallis. Morbi urna ipsum, placerat quis commodo quis, egestas elementum leo. Donec convallis mollis enim. Aliquam id mi quam. Phasellus nec fringilla elit. Nulla mauris tellus, feugiat quis pharetra sed, gravida ac dui. Sed iaculis, metus faucibus elementum tincidunt, turpis mi viverra velit, pellentesque tristique neque mi eget nulla. Proin luctus elementum neque et pharetra. Cras et diam maximus, accumsan sapien et, sollicitudin velit. Nulla blandit eros non turpis lobortis iaculis at ut massa.",category:"Vegetables",features:["100 g of fresh leaves provides.","Aliquam ac est at augue volutpat elementum.","Quisque nec enim eget sapien molestie.","Proin convallis odio volutpat finibus posuere."],pictures:["images/red-tomatos.png","images/red-tomatos.png","images/red-tomatos.png","images/red-tomatos.png"],imgBrand:"images/food-brand.png",inStock:!0,feedback:[{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"},{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"}],counterPurchase:1,tags:["Vegetables","Healthy","Tomatos"],stars:["4","4","4","4","5"],weight:"03",color:"Red",type:"Organic"},{id:12,name:"Surjapur Mango",price:"$34.00",oldPrice:"",description:"Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla nibh diam, blandit vel consequat nec, ultrices et ipsum. Nulla varius magna a consequat pulvinar.",fullDescription:"Sed commodo aliquam dui ac porta. Fusce ipsum felis, imperdiet at posuere ac, viverra at mauris. Maecenas tincidunt ligula a sem vestibulum pharetra. Maecenas auctor tortor lacus, nec laoreet nisi porttitor vel. Etiam tincidunt metus vel dui interdum sollicitudin. Mauris sem ante, vestibulum nec orci vitae, aliquam mollis lacus. Sed et condimentum arcu, id molestie tellus. Nulla facilisi. Nam scelerisque vitae justo a convallis. Morbi urna ipsum, placerat quis commodo quis, egestas elementum leo. Donec convallis mollis enim. Aliquam id mi quam. Phasellus nec fringilla elit. Nulla mauris tellus, feugiat quis pharetra sed, gravida ac dui. Sed iaculis, metus faucibus elementum tincidunt, turpis mi viverra velit, pellentesque tristique neque mi eget nulla. Proin luctus elementum neque et pharetra. Cras et diam maximus, accumsan sapien et, sollicitudin velit. Nulla blandit eros non turpis lobortis iaculis at ut massa.",category:"Fruits",features:["100 g of fresh leaves provides.","Aliquam ac est at augue volutpat elementum.","Quisque nec enim eget sapien molestie.","Proin convallis odio volutpat finibus posuere."],pictures:["images/surjapur-mango.png","images/surjapur-mango.png","images/surjapur-mango.png","images/surjapur-mango.png"],imgBrand:"images/food-brand.png",inStock:!0,feedback:[{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"},{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"}],counterPurchase:1,tags:["Fruit","Healthy","Mango","Vitamins"],stars:["3","3","3","3","3"],weight:"03",color:"Orange",type:"Organic"},{id:13,name:"Green Cucumber",price:"$14.99",oldPrice:"$20.99",description:"Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla nibh diam, blandit vel consequat nec, ultrices et ipsum. Nulla varius magna a consequat pulvinar.",fullDescription:"Sed commodo aliquam dui ac porta. Fusce ipsum felis, imperdiet at posuere ac, viverra at mauris. Maecenas tincidunt ligula a sem vestibulum pharetra. Maecenas auctor tortor lacus, nec laoreet nisi porttitor vel. Etiam tincidunt metus vel dui interdum sollicitudin. Mauris sem ante, vestibulum nec orci vitae, aliquam mollis lacus. Sed et condimentum arcu, id molestie tellus. Nulla facilisi. Nam scelerisque vitae justo a convallis. Morbi urna ipsum, placerat quis commodo quis, egestas elementum leo. Donec convallis mollis enim. Aliquam id mi quam. Phasellus nec fringilla elit. Nulla mauris tellus, feugiat quis pharetra sed, gravida ac dui. Sed iaculis, metus faucibus elementum tincidunt, turpis mi viverra velit, pellentesque tristique neque mi eget nulla. Proin luctus elementum neque et pharetra. Cras et diam maximus, accumsan sapien et, sollicitudin velit. Nulla blandit eros non turpis lobortis iaculis at ut massa.",category:"Vegetables",features:["100 g of fresh leaves provides.","Aliquam ac est at augue volutpat elementum.","Quisque nec enim eget sapien molestie.","Proin convallis odio volutpat finibus posuere."],pictures:["images/green-cucumber.png","images/green-cucumber.png","images/green-cucumber.png","images/green-cucumber.png"],imgBrand:"images/food-brand.png",inStock:!0,feedback:[{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"},{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"}],counterPurchase:1,tags:["Vegetables","Healthy","Green"],stars:["3","2","5","4","3"],weight:"03",color:"Green",type:"Organic"},{id:14,name:"Ladies Finger",price:"$14.99",oldPrice:"",description:"Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla nibh diam, blandit vel consequat nec, ultrices et ipsum. Nulla varius magna a consequat pulvinar.",fullDescription:"Sed commodo aliquam dui ac porta. Fusce ipsum felis, imperdiet at posuere ac, viverra at mauris. Maecenas tincidunt ligula a sem vestibulum pharetra. Maecenas auctor tortor lacus, nec laoreet nisi porttitor vel. Etiam tincidunt metus vel dui interdum sollicitudin. Mauris sem ante, vestibulum nec orci vitae, aliquam mollis lacus. Sed et condimentum arcu, id molestie tellus. Nulla facilisi. Nam scelerisque vitae justo a convallis. Morbi urna ipsum, placerat quis commodo quis, egestas elementum leo. Donec convallis mollis enim. Aliquam id mi quam. Phasellus nec fringilla elit. Nulla mauris tellus, feugiat quis pharetra sed, gravida ac dui. Sed iaculis, metus faucibus elementum tincidunt, turpis mi viverra velit, pellentesque tristique neque mi eget nulla. Proin luctus elementum neque et pharetra. Cras et diam maximus, accumsan sapien et, sollicitudin velit. Nulla blandit eros non turpis lobortis iaculis at ut massa.",category:"Vegetables",features:["100 g of fresh leaves provides.","Aliquam ac est at augue volutpat elementum.","Quisque nec enim eget sapien molestie.","Proin convallis odio volutpat finibus posuere."],pictures:["images/ladies-finger.png","images/ladies-finger.png","images/ladies-finger.png","images/ladies-finger.png"],imgBrand:"images/food-brand.png",inStock:!0,feedback:[{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"},{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"}],counterPurchase:1,tags:["Vegetables","Healthy","Green"],stars:["1","3","5","3","3"],weight:"03",color:"Green",type:"Organic"},{id:15,name:"Тестовый продукт",price:"$14.99",oldPrice:"",description:"Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla nibh diam, blandit vel consequat nec, ultrices et ipsum. Nulla varius magna a consequat pulvinar.",fullDescription:"Sed commodo aliquam dui ac porta. Fusce ipsum felis, imperdiet at posuere ac, viverra at mauris. Maecenas tincidunt ligula a sem vestibulum pharetra. Maecenas auctor tortor lacus, nec laoreet nisi porttitor vel. Etiam tincidunt metus vel dui interdum sollicitudin. Mauris sem ante, vestibulum nec orci vitae, aliquam mollis lacus. Sed et condimentum arcu, id molestie tellus. Nulla facilisi. Nam scelerisque vitae justo a convallis. Morbi urna ipsum, placerat quis commodo quis, egestas elementum leo. Donec convallis mollis enim. Aliquam id mi quam. Phasellus nec fringilla elit. Nulla mauris tellus, feugiat quis pharetra sed, gravida ac dui. Sed iaculis, metus faucibus elementum tincidunt, turpis mi viverra velit, pellentesque tristique neque mi eget nulla. Proin luctus elementum neque et pharetra. Cras et diam maximus, accumsan sapien et, sollicitudin velit. Nulla blandit eros non turpis lobortis iaculis at ut massa.",category:"Vegetables",features:["100 g of fresh leaves provides.","Aliquam ac est at augue volutpat elementum.","Quisque nec enim eget sapien molestie.","Proin convallis odio volutpat finibus posuere."],pictures:["images/red-chili.png","images/red-chili.png","images/red-chili.png","images/red-chili.png"],imgBrand:"images/food-brand.png",inStock:!0,feedback:[{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"},{name:"Kristin Watson",text:"Duis at ullamcorper nulla, eu dictum eros.",stars:"5"},{name:"Jane Cooper",text:"Keep the soil evenly moist for the healthiest growth. If the sun gets too hot, Chinese cabbage tends to bolt or go to seed; in long periods of heat, some kind of shade may be helpful. Watch out for snails, as they will harm the plants.",stars:"4"},{name:"Jacob Jones",text:" Vivamus eget euismod magna. Nam sed lacinia nibh, et lacinia lacus.",stars:"5"},{name:"Ralph Edwards",text:"200+ Canton Pak Choi Bok Choy Chinese Cabbage Seeds Heirloom Non-GMO Productive Brassica rapa VAR. chinensis, a.k.a. Canton's Choice, Bok Choi, from USA",stars:"5"}],counterPurchase:1,tags:["Vegetables","Healthy","Red"],stars:["1","5","2","2","1"],weight:"03",color:"Green",type:"Organic"}],_i="vkIkVdCl",zi="ufBCdpCO",Fi="WUn_1Yx0";function $i(e){var t=e.active,a=e.setActive,n=e.children,r=e.setAmount;return React.createElement(React.Fragment,null,React.createElement("div",{className:t.modal?Ha()(zi,_i):zi,onClick:function(){r(1),a()}},React.createElement("div",{className:t.modal?Ha()(Fi,_i):Fi,onClick:function(e){return e.stopPropagation()}},n)))}$RefreshReg$($i,"Modal");var Vi,Hi="rlxhzeu1",Ui="yCLVTVa2",Wi="rAJrul3i",Ji="y66UJVPx",Qi="RCIjspOq",Ki="SBOmI77b",Gi="HfTvEqr9",Yi="wBFZPBbK",Xi="NBhvGIDu",Zi="xsF2b67s",el="k8NrKrzi",tl="vehxZs5A",al="CMBvImhO",nl="fg3FepaM",rl="Wyp8P9C8",il="GMAHWHyW",ll="UVOwZDed",ol="Zpsbgtyn",sl="MQcDVBSE",cl="GottOvGX",ul="l9wYbSdC",ml="KvCWreLB",dl="SRi4ffGA",fl="ShBAtTtW",pl="MKzNbGFK",hl="p1gJCNmW",gl="RMPyVokl",vl="slKcp8Zy",bl="FvzGGobi",yl="Kda0IvOc",El="n8eb8vnW",Rl="II4YmzK3",wl="kPSR9hYQ",Nl="awhWv3N7",Sl="qdTy4eoV",kl="R77CJQ3y",Cl="NUE6dAZG",xl="sWC4yBkJ",Pl="yxc68ggq",Ol="S3ycV9xc",ql="w6Zh7rKk";function Al(){return Al=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Al.apply(this,arguments)}const Dl=function(e){return r.createElement("svg",Al({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 18 17"},e),Vi||(Vi=r.createElement("path",{d:"m9.344 13.901 3.941 2.496c.504.32 1.129-.155.98-.743l-1.139-4.478a.69.69 0 0 1 .222-.694l3.533-2.94c.464-.387.225-1.158-.372-1.196l-4.614-.3a.66.66 0 0 1-.566-.418L9.607 1.294a.65.65 0 0 0-1.215 0l-1.72 4.334a.66.66 0 0 1-.567.418l-4.614.3c-.597.038-.837.809-.372 1.195l3.533 2.941a.69.69 0 0 1 .222.694l-1.055 4.153c-.18.705.571 1.275 1.175.892l3.662-2.32a.64.64 0 0 1 .689 0"})))};function Ml(e){var t=e.card,a=(t.stars.reduce((function(e,t){return e+Number(t)}),0)/t.stars.length).toFixed(0);return React.createElement("div",{className:Ol},React.createElement(Dl,{fill:a<1?"#cccccc":"#ff8a00",className:ql}),React.createElement(Dl,{fill:a<2?"#cccccc":"#ff8a00",className:ql}),React.createElement(Dl,{fill:a<3?"#cccccc":"#ff8a00",className:ql}),React.createElement(Dl,{fill:a<4?"#cccccc":"#ff8a00",className:ql}),React.createElement(Dl,{fill:a<5?"#cccccc":"#ff8a00",className:ql}))}$RefreshReg$(Ml,"StarsRating");var jl,Tl="QxE1MZIV",Ll="G2AvdTf0",Il="b4CbjRLz",Bl="SRdrB0zC",_l="cBcbnmhN",zl="XAYG3kuu",Fl="M_FOZvoN",$l="Li1jjR_6";function Vl(){return Vl=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Vl.apply(this,arguments)}const Hl=function(e){return r.createElement("svg",Vl({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 16 10",width:"1em",height:"1em"},e),jl||(jl=r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"m15 8.5-7-7-7 7"})))};function Ul(e){var t=e.product,a=e.setIndex,n=e.index;return React.createElement("section",{className:Tl},React.createElement("div",{className:Fl},React.createElement(Hl,{stroke:"#1a1a1a",onClick:function(){a(n>0?n-1:3)},className:Il})),React.createElement("div",{className:$l},t.pictures.map((function(e,t){if(t<4)return React.createElement("img",{onMouseDown:function(e){e.preventDefault()},onClick:function(){return a(t)},className:t!==n?Bl:"".concat(Bl," ").concat(_l),key:t,src:"/".concat(e),alt:"mini image"})}))),React.createElement("div",{className:zl},React.createElement(Pn,{stroke:"#1a1a1a",onClick:function(){a(n<3?n+1:0)},className:Ll})))}$RefreshReg$(Ul,"SliderImage");var Wl="vMHEngeF",Jl="IdaE0m0r",Ql="r2tcfJlv",Kl="WucvPVz0",Gl=$RefreshSig$();function Yl(){Gl();var e=(0,r.useContext)(qo),t=(0,r.useContext)(Ao);return React.createElement("div",{className:Wl},React.createElement("button",{onClick:e>1?function(){return t(e-1)}:void 0,className:Jl},"-"),React.createElement("div",{className:Ql},e),React.createElement("button",{onClick:function(){return t(e+1)},className:Kl},"+"))}Gl(Yl,"JzOVTOn6S1lqfXv6+PEFoB/gxQ4="),$RefreshReg$(Yl,"AmountProduct");var Xl="EGhZ7w2M",Zl="yj0QXhYA",eo="zh19dvKP",to=$RefreshSig$();function ao(e){to();var t=e.activeCard,a=e.id,n=(0,r.useContext)(Ao);return React.createElement("button",{onClick:function(){n(1)},className:Xl},React.createElement("p",{className:eo},"Add to Cart"),React.createElement(Hn,{className:Zl,stroke:t===a?"#ffffff":"#1a1a1a"}))}to(ao,"CJiz8A+sfwYcXa5NosDckXRXV6M="),$RefreshReg$(ao,"BtnAddBasket");var no="eDw5Z7ss",ro="NGu3X8W8";function io(){return React.createElement("button",{className:no},React.createElement(jn,{className:ro,stroke:"#1a1a1a"}))}$RefreshReg$(io,"BtnAddWishlist");var lo=$RefreshSig$();function oo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return so(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?so(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function so(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function co(e){lo();var t=e.product,a=e.activeImg,n=e.setActiveImg,i=oo((0,r.useState)(1),2),l=i[0],o=i[1],s=oo((0,r.useState)(0),2),c=s[0],u=s[1],m=100-t.price.slice(1)/t.oldPrice.slice(1)*100;return React.createElement("main",{className:a?"".concat(Hi," ").concat(Pl):Hi},React.createElement("div",{className:pl},React.createElement(Ul,{product:t,index:c,setIndex:u}),React.createElement("div",{className:wl},React.createElement("img",{onClick:function(){n(!a)},className:!1===a?el:"".concat(el," ").concat(tl),src:"/".concat(t.pictures[c]),alt:"big image"}))),React.createElement("div",{className:hl},React.createElement("div",{className:Ji},React.createElement("div",{className:xl},React.createElement("h1",{className:El},t.name),React.createElement("h3",{className:t.inStock?ul:Ui},t.inStock?"In Stock":"Out of Stock")),React.createElement("div",{className:kl},React.createElement(Ml,{card:t}),React.createElement("h3",{className:Yi},"".concat(t.feedback.length," Review")),React.createElement("div",{className:ll},React.createElement("h2",{className:gl},"SKU:"),React.createElement("h3",{className:vl},"2,51,594"))),React.createElement("div",{className:Sl},React.createElement("h2",{className:cl},t.oldPrice),React.createElement("h2",{className:t.oldPrice?dl:ml},t.price),React.createElement("h2",{className:Zi},t.oldPrice?"".concat(m.toFixed(0),"% Off"):"")),React.createElement("div",{className:Nl},React.createElement("div",{className:nl},React.createElement("h2",{className:Ki},"Brand:"),React.createElement("div",{className:rl},React.createElement("img",{className:al,src:t.imgBrand,alt:"Image Brand"}))),React.createElement("div",{className:ol},React.createElement("h3",{className:bl},"Share item:"),React.createElement(li,null))),React.createElement("p",{className:Xi},t.description)),React.createElement("div",{className:Qi},React.createElement("div",{className:fl},React.createElement(Yl,{counter:l,setCounter:o}),React.createElement(ao,null),React.createElement(io,null)),React.createElement("div",{className:Wi},React.createElement("div",{className:il},React.createElement("h2",{className:Rl},"Category: "),React.createElement("p",{className:Gi},t.category)),React.createElement("div",{className:Cl},React.createElement("h3",{className:sl},"Tag:"),t.tags.map((function(e,t){if(t<=4&&e.length>1)return React.createElement("p",{key:t,className:yl},e)})))))))}lo(co,"6Iae1kCES4kJf+M8KN7FB7A+/Ac="),$RefreshReg$(co,"ReviewProduct");var uo="TNq_b4hV",mo="jAC3kbki";function fo(){return React.createElement("article",{onClick:function(){return window.scrollTo(0,0)},className:uo},React.createElement(Hl,{className:mo,stroke:"white"}))}function po(e){return po="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},po(e)}function ho(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function go(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?ho(Object(a),!0).forEach((function(t){var n,r,i,l;n=e,r=t,i=a[t],l=function(e,t){if("object"!=po(e)||!e)return e;var a=e[Symbol.toPrimitive];if(void 0!==a){var n=a.call(e,"string");if("object"!=po(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r),(r="symbol"==po(l)?l:l+"")in n?Object.defineProperty(n,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[r]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):ho(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function vo(e,t){switch(t.type){case"category":return e.category===t.id?go(go({},e),{},{category:null}):go(go({},e),{},{category:t.id});case"tag":return e.tag===t.id?go(go({},e),{},{tag:null}):go(go({},e),{},{tag:t.id});case"reset":return go(go({},e),{},{category:null,tag:null,selectedSort:"Date: news",page:1});case"selected":return go(go({},e),{},{selectedSort:t.state});case"page":return go(go({},e),{},{page:t.page});default:throw new Error("Неизвестная ошибка с обработкой редьюсера")}}function bo(e){return bo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},bo(e)}function yo(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function Eo(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?yo(Object(a),!0).forEach((function(t){var n,r,i,l;n=e,r=t,i=a[t],l=function(e,t){if("object"!=bo(e)||!e)return e;var a=e[Symbol.toPrimitive];if(void 0!==a){var n=a.call(e,"string");if("object"!=bo(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r),(r="symbol"==bo(l)?l:l+"")in n?Object.defineProperty(n,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[r]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):yo(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function Ro(e,t){switch(t.type){case"selected":return Eo(Eo({},e),{},{selectedSort:t.selected});case"priceMin":return Eo(Eo({},e),{},{min:t.min});case"priceMax":return Eo(Eo({},e),{},{max:t.max});case"category":return t.check!==e.category.check?Eo(Eo({},e),{},{category:Eo(Eo({},e.category),{},{check:t.check,id:t.id})}):Eo(Eo({},e),{},{category:Eo(Eo({},e.category),{},{check:null,id:null})});case"tag":return t.tag!==e.tag?Eo(Eo({},e),{},{tag:t.tag}):Eo(Eo({},e),{},{tag:null});case"rating":return t.rating!==e.rating?Eo(Eo({},e),{},{rating:t.rating}):Eo(Eo({},e),{},{rating:""});case"page":return Eo(Eo({},e),{},{page:t.page});case"reset":return Eo(Eo({},e),{},{category:{check:null,id:null},tag:null,selectedSort:"Latest",page:1,min:0,max:1e3,rating:null});default:throw new Error("Ошибка обработки редуктора")}}function wo(e){return wo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},wo(e)}$RefreshReg$(fo,"BtnScrollUp");var No=$RefreshSig$();function So(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function ko(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?So(Object(a),!0).forEach((function(t){var n,r,i,l;n=e,r=t,i=a[t],l=function(e,t){if("object"!=wo(e)||!e)return e;var a=e[Symbol.toPrimitive];if(void 0!==a){var n=a.call(e,"string");if("object"!=wo(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r),(r="symbol"==wo(l)?l:l+"")in n?Object.defineProperty(n,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[r]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):So(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function Co(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return xo(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?xo(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function xo(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}var Po=(0,r.createContext)(),Oo=(0,r.createContext)(),qo=(0,r.createContext)(),Ao=(0,r.createContext)(),Do=(0,r.createContext)(),Mo=(0,r.createContext)(),jo=(0,r.createContext)(),To=(0,r.createContext)(),Lo=(0,r.createContext)(),Io=(0,r.createContext)(),Bo=(0,r.createContext)(),_o=(0,r.createContext)();function zo(){No();var e=Co((0,r.useReducer)(vo,{category:null,tag:null,selectedSort:"Date: news",page:1}),2),t=e[0],a=e[1],n=Co((0,r.useReducer)(Ro,{category:{check:null,id:null},tag:null,selectedSort:"Latest",page:1,min:0,max:1e3,rating:null}),2),i=n[0],l=n[1],o=Co(Fa(),2),s=o[0],c=o[1],u=Co(Fa(),2),m=u[0],d=u[1],f=Co((0,r.useState)({modal:!1,productId:0}),2),p=f[0],h=f[1],g=Co((0,r.useState)(!1),2),v=g[0],b=g[1],y=Co((0,r.useState)(1),2),E=y[0],R=y[1],w=null==Bi?void 0:Bi.find((function(e){return e.id===p.productId}));return React.createElement(React.Fragment,null,React.createElement(ra,null,React.createElement("meta",{charSet:"utf-8"}),React.createElement("title",null,"Ecobazar")),React.createElement(Po.Provider,{value:p},React.createElement(Oo.Provider,{value:h},React.createElement(qo.Provider,{value:E},React.createElement(Ao.Provider,{value:R},React.createElement(jo.Provider,{value:t},React.createElement(To.Provider,{value:a},React.createElement(Do.Provider,{value:s},React.createElement(Mo.Provider,{value:c},React.createElement(Lo.Provider,{value:m},React.createElement(Io.Provider,{value:d},React.createElement(Bo.Provider,{value:i},React.createElement(_o.Provider,{value:l},React.createElement(fo,null),React.createElement(nr,null),React.createElement(React.Fragment,null,React.createElement(nt,null),React.createElement($i,{setAmount:R,setActive:function(){h(ko(ko({},p),{},{modal:!1})),b(!1)},active:p},React.createElement(co,{product:w,activeImg:v,setActiveImg:b}))),React.createElement(Ii,null))))))))))))))}No(zo,"hdh1r1sM9Y0RhsAEhBbzSiRbIhc=",!1,(function(){return[Fa,Fa]})),$RefreshReg$(zo,"Layout");var Fo,$o="HHJVc_vL",Vo="kVzyLG4l",Ho="Q2n4Jx6s",Uo="uRk5ompG",Wo="zrW06MZz",Jo="XDUlO4EN",Qo="wfv4eOCq",Ko="GS7Jvq4E",Go="OZfW1XGy",Yo="B3SoGc03",Xo="gyqM12nl",Zo="qnhwYduB",es="JiZVp_O9",ts="FNu8X5nD",as="yfOA6ujl",ns="JDBusHqS",rs="uOn6rf6g",is="I73pHQyn",ls="MdY1Pkmk",os="vq7UVjdK",ss="Bbx8ICEC",cs="tvmYRxzf",us="EXRbddh8",ms="wn5g8G7w",ds="fnzcjGEy",fs="DkeRazBX",ps="xFNvYeC5",hs="vMPqzsAq",gs="f8uYYqXK",vs="sSbos_NW",bs="XeKqywXC",ys="SSb74jg8",Es="VFu6Eq9n";function Rs(){return Rs=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Rs.apply(this,arguments)}const ws=function(e){return r.createElement("svg",Rs({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 17 14"},e),Fo||(Fo=r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M1.25 7.226h15M7.3 1.201 1.25 7.225 7.3 13.25"})))};var Ns,Ss;function ks(){return ks=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},ks.apply(this,arguments)}const Cs=function(e){return r.createElement("svg",ks({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 17 14"},e),Ns||(Ns=r.createElement("path",{stroke:"current",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M16 7H1"})),Ss||(Ss=r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M9.95.975 16 7l-6.05 6.026"})))};var xs,Ps=[{id:0,text:"Pellentesque eu nibh eget mauris congue mattis mattis nec tellus. Phasellus imperdiet elit eu magna dictum, bibendum cursus velit sodales. Donec sed neque eget",name:"Robert Fox"},{id:1,text:"Pellentesque eu nibh eget mauris congue mattis mattis nec tellus. Phasellus imperdiet elit eu magna dictum, bibendum cursus velit sodales. Donec sed neque eget",name:"Dianne Russell"},{id:2,text:"Pellentesque eu nibh eget mauris congue mattis mattis nec tellus. Phasellus imperdiet elit eu magna dictum, bibendum cursus velit sodales. Donec sed neque eget",name:"Eleanor Pena"}];function Os(){return Os=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Os.apply(this,arguments)}const qs=function(e){return r.createElement("svg",Os({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 32 26"},e),xs||(xs=r.createElement("path",{fill:"#00B307",fillRule:"evenodd",d:"M23.822 0c-3.386 0-6.137 2.657-6.137 5.934 0 3.274 2.75 5.933 6.137 5.933 5.818 0 2.447 10.304-4.891 11.377-.346.05-.662.214-.89.463-.23.25-.355.567-.356.896 0 .843.802 1.509 1.69 1.381C32.712 24.084 37.455.002 23.822.002zM6.14 0C2.75 0 0 2.655 0 5.934c0 3.272 2.748 5.93 6.14 5.93 5.815 0 2.444 10.307-4.894 11.38-.346.05-.662.213-.89.462a1.33 1.33 0 0 0-.356.895c0 .843.802 1.509 1.688 1.381C15.029 24.082 19.772 0 6.139 0",clipRule:"evenodd",opacity:.3})))};function As(){return React.createElement("section",{className:as},React.createElement("div",{className:Es},React.createElement("h1",{className:gs},"Client Testimonials"),React.createElement("div",{className:fs},React.createElement("div",{className:ns},React.createElement(ws,{stroke:"#1a1a1a",className:ls})),React.createElement("div",{className:rs},React.createElement(Cs,{stroke:"#1a1a1a",className:os})))),React.createElement("div",{className:bs},Ps.map((function(e,t){if(t<3)return React.createElement("div",{key:e.id,className:vs},React.createElement("div",{className:ms},React.createElement(qs,{className:ss})),React.createElement("h3",{className:hs},e.text),React.createElement("div",{className:ys},React.createElement("div",{className:us},React.createElement("h2",{className:ps},e.name),React.createElement("h3",{className:is},"Customer")),React.createElement("div",{className:ds},React.createElement(Dl,{className:cs}),React.createElement(Dl,{className:cs}),React.createElement(Dl,{className:cs}),React.createElement(Dl,{className:cs}),React.createElement(Dl,{className:cs}))))}))))}$RefreshReg$(As,"Testimonials");var Ds,Ms,js=["images/logoCompany-one.png","images/logoCompany-two.png","images/logoCompany-three.png","images/logoCompany-four.png","images/logoCompany-five.png","images/logoCompany-six.png"],Ts="Mfi_pxuA",Ls="vPtzkUib",Is="UDwtDcDy";function Bs(){return React.createElement("section",{className:Ts},js.map((function(e,t){if(t<6)return React.createElement("div",{key:t,className:Ls},React.createElement("img",{className:Is,src:e,alt:"logo"}))})))}function _s(){return _s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},_s.apply(this,arguments)}$RefreshReg$(Bs,"CompaniesLogo");const zs=function(e){return r.createElement("svg",_s({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 40 40"},e),Ds||(Ds=r.createElement("g",{fill:"#00B307",stroke:"#00B307",strokeWidth:.3,clipPath:"url(#iconLargeStar_svg__a)"},r.createElement("path",{d:"M31.138 17.37a1.35 1.35 0 0 0-1.094-.923l-6.1-.886-2.728-5.527A1.35 1.35 0 0 0 20 9.277c-.52 0-.986.29-1.216.756l-2.728 5.528-6.1.886a1.35 1.35 0 0 0-1.095.923 1.35 1.35 0 0 0 .343 1.39l4.415 4.302-1.042 6.076c-.088.512.118 1.02.539 1.326a1.35 1.35 0 0 0 1.428.104L20 27.697l5.456 2.87a1.36 1.36 0 0 0 1.428-.104c.42-.305.626-.813.539-1.326l-.412-2.403a.632.632 0 0 0-1.245.213l.412 2.404a.1.1 0 0 1-.037.09c-.042.031-.072.02-.098.007l-5.75-3.023a.63.63 0 0 0-.587 0l-5.751 3.024a.093.093 0 0 1-.134-.098l1.098-6.403a.63.63 0 0 0-.181-.56l-4.652-4.533a.09.09 0 0 1-.024-.095.09.09 0 0 1 .075-.064l6.429-.934a.63.63 0 0 0 .476-.345l2.875-5.826c.031-.064.134-.064.165 0l2.876 5.826c.092.186.27.315.475.345l6.43.934c.034.006.063.03.074.064.01.033.002.07-.023.094l-4.652 4.535a.63.63 0 0 0-.182.559l.347 2.023a.631.631 0 1 0 1.245-.214l-.291-1.695 4.414-4.303c.373-.364.504-.896.343-1.39ZM3.631 19.368h-3a.631.631 0 1 0 0 1.263h3a.632.632 0 1 0 0-1.263ZM39.368 19.368h-3a.632.632 0 1 0 0 1.263h3a.631.631 0 1 0 0-1.263ZM7.98 31.127 5.857 33.25a.631.631 0 1 0 .893.893l2.121-2.122a.631.631 0 1 0-.893-.893ZM33.249 5.857l-2.122 2.121a.631.631 0 1 0 .893.893l2.122-2.12a.632.632 0 1 0-.893-.894ZM20 35.737a.63.63 0 0 0-.631.632v3a.631.631 0 1 0 1.263 0v-3a.63.63 0 0 0-.632-.632ZM20 4.263a.63.63 0 0 0 .632-.632v-3a.632.632 0 0 0-1.263 0v3c0 .35.282.632.631.632ZM32.02 31.127a.631.631 0 1 0-.893.893l2.122 2.122a.63.63 0 0 0 .893 0 .63.63 0 0 0 0-.894zM7.979 8.872a.63.63 0 0 0 .893 0 .63.63 0 0 0 0-.893L6.751 5.858a.632.632 0 0 0-.893.893z"}))),Ms||(Ms=r.createElement("defs",null,r.createElement("clipPath",{id:"iconLargeStar_svg__a"},r.createElement("path",{fill:"#fff",d:"M0 0h40v40H0z"})))))};var Fs,$s;function Vs(){return Vs=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Vs.apply(this,arguments)}const Hs=function(e){return r.createElement("svg",Vs({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 40 40"},e),Fs||(Fs=r.createElement("g",{clipPath:"url(#iconLeaf-2_svg__a)"},r.createElement("path",{fill:"#00B307",d:"M36.49.539a.73.73 0 0 0-.365-.454.73.73 0 0 0-.985.305c0 .02-3.687 7.173-15.005 8.42a14.4 14.4 0 0 0-4.278 1.14 11.9 11.9 0 0 0-5.705 5.228 12.3 12.3 0 0 0-1.403 7.156c.197 1.802.8 3.537 1.761 5.074C8.5 28.85 2.123 33.84 1.55 39.196a.728.728 0 0 0 1.447.153c.527-4.78 6.509-9.416 8.375-10.76 2.239 2.75 5.592 4.303 9.19 4.556a15.54 15.54 0 0 0 7.08-1.206 16.24 16.24 0 0 0 6.24-4.636c4.314-5.226 6.369-14.011 2.61-26.764M11.79 26.689a10.5 10.5 0 0 1-.732-1.368 10.6 10.6 0 0 1-.844-3.144 10.82 10.82 0 0 1 1.206-6.312 10.45 10.45 0 0 1 5.025-4.595 13 13 0 0 1 3.852-1.01c7.47-.804 11.864-4.129 14.132-6.54a30.8 30.8 0 0 1-6.714 11.807l-.442-4.454a.728.728 0 1 0-1.448.14l.567 5.726c-3.381 3.429-8.081 6.875-14.602 9.75m20.966-.319v.005a14.8 14.8 0 0 1-5.677 4.237 14.1 14.1 0 0 1-6.432 1.078 11.5 11.5 0 0 1-7.98-3.808 55 55 0 0 0 6.939-3.687l6.388 1.207a.728.728 0 0 0 .261-1.432l-4.909-.928a42.4 42.4 0 0 0 6.3-5.295 1 1 0 0 0 .097-.1c5.074-5.284 7.233-10.51 8.133-13.727 2.485 10.598.583 17.972-3.12 22.45"}))),$s||($s=r.createElement("defs",null,r.createElement("clipPath",{id:"iconLeaf-2_svg__a"},r.createElement("path",{fill:"#fff",d:"M0 0h40v40H0z"})))))};var Us;function Ws(){return Ws=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Ws.apply(this,arguments)}const Js=function(e){return r.createElement("svg",Ws({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 40 28"},e),Us||(Us=r.createElement("path",{fill:"#00B307",d:"M32.702 20.304c-.977 0-1.906.383-2.606 1.075-.7.7-1.092 1.613-1.092 2.59 0 .978.383 1.89 1.092 2.59a3.7 3.7 0 0 0 2.606 1.076c2.004 0 3.633-1.646 3.633-3.666s-1.63-3.665-3.633-3.665m0 5.702c-1.124 0-2.069-.929-2.069-2.037s.945-2.036 2.07-2.036c1.107 0 2.003.912 2.003 2.036s-.896 2.037-2.004 2.037m.945-17.911a.8.8 0 0 0-.546-.212h-4.178a.817.817 0 0 0-.815.815v6.679c0 .447.367.814.815.814h6.63a.817.817 0 0 0 .814-.814v-4.472a.82.82 0 0 0-.268-.603zm1.091 6.467h-5V9.504h3.045l1.955 1.76zm-21.926 5.742c-.977 0-1.906.383-2.606 1.075-.7.7-1.092 1.613-1.092 2.59 0 .978.383 1.89 1.092 2.59a3.7 3.7 0 0 0 2.606 1.076c2.004 0 3.633-1.646 3.633-3.666s-1.63-3.665-3.633-3.665m0 5.702c-1.124 0-2.069-.929-2.069-2.037s.945-2.036 2.07-2.036c1.107 0 2.003.912 2.003 2.036s-.896 2.037-2.004 2.037m-5.433-4.7H5.742V19.14a.817.817 0 0 0-.814-.815.817.817 0 0 0-.815.815v2.98c0 .448.367.815.815.815h2.451a.817.817 0 0 0 .815-.814.817.817 0 0 0-.815-.815m4.13-4.439a.817.817 0 0 0-.815-.815H.814a.817.817 0 0 0-.814.815c0 .448.367.814.814.814h9.88a.81.81 0 0 0 .815-.814m-9.041-2.94 9.88.057a.82.82 0 0 0 .822-.807.807.807 0 0 0-.806-.822l-9.88-.057h-.008a.81.81 0 0 0-.814.806.807.807 0 0 0 .806.823m1.662-3.698h9.88a.817.817 0 0 0 .814-.815.817.817 0 0 0-.815-.814H4.13a.817.817 0 0 0-.814.814c0 .448.367.815.815.815m35.569-1.1L33.867 4.3a.8.8 0 0 0-.521-.187h-6.858V1.18a.817.817 0 0 0-.815-.815H4.928a.817.817 0 0 0-.815.815v5.962c0 .448.367.814.815.814a.817.817 0 0 0 .814-.814V1.994h19.125v19.312h-6.68a.817.817 0 0 0-.814.814c0 .448.367.815.815.815h9.945a.817.817 0 0 0 .814-.814.817.817 0 0 0-.814-.815h-1.637V5.741h6.564l5.311 4.398-.057 11.15h-.847a.817.817 0 0 0-.815.815c0 .448.367.815.815.815h1.653a.81.81 0 0 0 .815-.807L40 9.765a.86.86 0 0 0-.301-.636"})))};var Qs;function Ks(){return Ks=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Ks.apply(this,arguments)}const Gs=function(e){return r.createElement("svg",Ks({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 39 40"},e),Qs||(Qs=r.createElement("path",{fill:"#00B307",d:"M33.018 15.21v-1.538c0-3.68-1.302-7.1-3.664-9.638C26.934 1.429 23.606 0 19.976 0h-1.269c-3.63 0-6.958 1.429-9.378 4.034-2.361 2.537-3.664 5.958-3.664 9.638v1.538C2.8 15.403.522 17.79.522 20.706v2.403a5.51 5.51 0 0 0 5.505 5.504h3.1c.555 0 1.009-.453 1.009-1.008V16.202c0-.555-.454-1.009-1.009-1.009H7.682v-1.52c0-6.648 4.74-11.656 11.017-11.656h1.269c6.285 0 11.017 5.008 11.017 11.655v1.521h-1.446c-.554 0-1.008.454-1.008 1.009v11.395c0 .554.454 1.008 1.008 1.008h1.412c-.412 5.26-4.034 6.479-5.714 6.756a3.55 3.55 0 0 0-3.37-2.445h-2.521a3.543 3.543 0 0 0-3.538 3.538A3.55 3.55 0 0 0 19.346 40h2.53c1.63 0 3-1.11 3.411-2.605.824-.118 2.126-.412 3.42-1.168 1.824-1.067 3.983-3.244 4.27-7.63a5.51 5.51 0 0 0 5.167-5.496v-2.403a5.49 5.49 0 0 0-5.126-5.488M8.136 26.588H6.043a3.49 3.49 0 0 1-3.487-3.487v-2.403a3.49 3.49 0 0 1 3.487-3.488h2.093zm13.74 11.395h-2.53a1.52 1.52 0 1 1 0-3.042h2.53a1.52 1.52 0 1 1 0 3.042m14.26-14.882a3.49 3.49 0 0 1-3.488 3.487h-2.092V17.21h2.092a3.49 3.49 0 0 1 3.488 3.488z"})))};var Ys,Xs;function Zs(){return Zs=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Zs.apply(this,arguments)}const ec=function(e){return r.createElement("svg",Zs({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 33 40"},e),Ys||(Ys=r.createElement("path",{fill:"#00B307",d:"M32.647 34.668 30.345 8.727a.986.986 0 0 0-.994-.903H24.5C24.491 3.511 20.981 0 16.667 0S8.842 3.51 8.834 7.824H3.982a1 1 0 0 0-.994.903L.687 34.667v.092c0 2.89 2.657 5.241 5.92 5.241h20.12c3.262 0 5.92-2.352 5.92-5.241zm-15.98-32.68a5.853 5.853 0 0 1 5.845 5.836h-11.69a5.854 5.854 0 0 1 5.845-5.837m10.06 36.017H6.607c-2.153 0-3.908-1.433-3.933-3.213l2.219-24.98h3.94v3.486c0 .546.448.993.994.993a.996.996 0 0 0 .994-.994V9.813h11.691v3.486c0 .546.447.993.994.993a.996.996 0 0 0 .993-.994V9.813h3.942L30.66 34.8c-.025 1.772-1.78 3.205-3.933 3.205"})),Xs||(Xs=r.createElement("path",{fill:"#00B307",d:"m20.798 20.683-5.862 5.862-2.393-2.393a.994.994 0 1 0-1.407 1.408l3.096 3.097a.997.997 0 0 0 1.408 0l6.566-6.566a.994.994 0 0 0 0-1.408 1.01 1.01 0 0 0-1.408 0"})))};var tc;function ac(){return ac=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},ac.apply(this,arguments)}const nc=function(e){return r.createElement("svg",ac({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 38 40"},e),tc||(tc=r.createElement("path",{fill:"#00B307",d:"M37.396 9.43c0-.152-.034-.304-.101-.447a.98.98 0 0 0-.684-.54L19.414.1a1.02 1.02 0 0 0-.887 0L1.161 8.518c-.337.16-.557.498-.574.878v21.165c0 .389.22.743.574.912l17.366 8.417c.009 0 .009 0 .017.009q.037.01.076.033c.008 0 .017.009.034.009l.076.025c.008 0 .017.009.025.009.026.008.06.008.085.017h.025c.034 0 .076.008.11.008.033 0 .076 0 .11-.008h.025c.025 0 .059-.009.084-.017.009 0 .017-.009.026-.009l.076-.025c.008 0 .016-.009.033-.009.026-.008.05-.016.076-.033.009 0 .009 0 .017-.009l17.417-8.442c.346-.169.574-.524.574-.912V9.456c-.017-.009-.017-.017-.017-.026m-18.43-7.294 15.061 7.303-5.546 2.693L13.42 4.829zm0 14.605L3.905 9.44l7.193-3.487 15.061 7.303zM2.613 11.068l15.34 7.438v18.852L2.613 29.92zm17.366 26.29V18.506l7.202-3.495v4.93c0 .557.456 1.013 1.013 1.013s1.013-.456 1.013-1.013v-5.918l6.163-2.989v18.852z"})))};var rc;function ic(){return ic=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},ic.apply(this,arguments)}const lc=function(e){return r.createElement("svg",ic({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 14 10"},e),rc||(rc=r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M12.334 1.5 5 8.833 1.667 5.5"})))};var oc="oe2qgRMx",sc="_UiC6ueN";function cc(e){var t=e.colorArrow;return React.createElement(Ia,{to:"/shop"},React.createElement("button",{className:oc},"Shop Now",React.createElement(Cs,{stroke:t,className:sc})))}$RefreshReg$(cc,"BtnLinkShop");var uc=$RefreshSig$();function mc(){return uc(),(0,r.useEffect)((function(){window.scrollTo(0,0)}),[]),React.createElement("main",{className:"Cqlkrzia"},React.createElement(ra,null,React.createElement("meta",{charSet:"utf-8"}),React.createElement("title",null,"About")),React.createElement("section",{className:"xcf9Vdjh"},React.createElement("div",{className:"dFY155C6"},React.createElement("h1",{className:"DZSY38fl"},"100% Trusted Organic Food Store"),React.createElement("h3",{className:"bzjoYmni"},"Morbi porttitor ligula in nunc varius sagittis. Proin dui nisi, laoreet ut tempor ac, cursus vitae eros. Cras quis ultricies elit. Proin ac lectus arcu. Maecenas aliquet vel tellus at accumsan. Donec a eros non massa vulputate ornare. Vivamus ornare commodo ante, at commodo felis congue vitae.")),React.createElement("div",{className:"ys220E_s"},React.createElement("img",{className:"KXkDiLtl",src:"/images/about-image-one.png",alt:"abount image"}))),React.createElement("section",{className:"jKNuJVNE"},React.createElement("div",{className:"Lj0LWCyr"},React.createElement("img",{src:"/images/abount-image-two.png",alt:"abount image"})),React.createElement("div",{className:"mCztD9CM"},React.createElement("div",{className:"i5NlAc5w"},React.createElement("h1",{className:"MKj0FPUq"},"100% Trusted Organic Food Store"),React.createElement("h3",{className:"gpyp6WuZ"},"Pellentesque a ante vulputate leo porttitor luctus sed eget eros. Nulla et rhoncus neque. Duis non diam eget est luctus tincidunt a a mi. Nulla eu eros consequat tortor tincidunt feugiat.")),React.createElement("div",{className:"IK7q_wWB"},React.createElement("div",{className:Zo},React.createElement(Hs,{className:Xo}),React.createElement("div",{className:Yo},React.createElement("h3",{className:ts},"100% Organic food"),React.createElement("h4",{className:es},"100% healthy & Fresh food."))),React.createElement("div",{className:Zo},React.createElement(Gs,{className:Xo}),React.createElement("div",{className:Yo},React.createElement("h3",{className:ts},"Great Support 24/7"),React.createElement("h4",{className:es},"Instant access to Contact"))),React.createElement("div",{className:Zo},React.createElement(zs,{className:Xo}),React.createElement("div",{className:Yo},React.createElement("h3",{className:ts},"Customer Feedback"),React.createElement("h4",{className:es},"Our happy customer"))),React.createElement("div",{className:Zo},React.createElement(ec,{className:Xo}),React.createElement("div",{className:Yo},React.createElement("h3",{className:ts},"100% Sucure Payment"),React.createElement("h4",{className:es},"We ensure your money is save"))),React.createElement("div",{className:Zo},React.createElement(Js,{className:Xo}),React.createElement("div",{className:Yo},React.createElement("h3",{className:ts},"Free Shipping"),React.createElement("h4",{className:es},"Free shipping with discount"))),React.createElement("div",{className:Zo},React.createElement(nc,{className:Xo}),React.createElement("div",{className:Yo},React.createElement("h3",{className:ts},"100% Organic Food"),React.createElement("h4",{className:es},"100% healthy & Fresh food.")))))),React.createElement("section",{className:"A1jm9HjQ"},React.createElement("div",{className:"OP_EU30A"},React.createElement("div",{className:"eW7X4WrC"},React.createElement("h1",{className:"qoPjThaR"},"We Delivered, You Enjoy Your Order."),React.createElement("h3",{className:"JHveAdAE"},"Ut suscipit egestas suscipit. Sed posuere pellentesque nunc, ultrices consectetur velit dapibus eu. Mauris sollicitudin dignissim diam, ac mattis eros accumsan rhoncus. Curabitur auctor bibendum nunc eget elementum.")),React.createElement("div",{className:"CYIkd3_7"},React.createElement("h4",{className:Go},React.createElement(lc,{stroke:"#2C742F",className:Ko}),"Sed in metus pellentesque."),React.createElement("h4",{className:Go},React.createElement(lc,{stroke:"#2C742F",className:Ko}),"Fusce et ex commodo, aliquam nulla efficitur, tempus lorem."),React.createElement("h4",{className:Go},React.createElement(lc,{stroke:"#2C742F",className:Ko}),"Maecenas ut nunc fringilla erat varius."),React.createElement(cc,null))),React.createElement("div",{className:"WOnmkWIF"},React.createElement("img",{className:"UUSbSxHv",src:"/images/abount-image-three.png",alt:"about image"}))),React.createElement("section",{className:"L15sMOTg"},React.createElement("div",{className:"eDYdecvN"},React.createElement("h1",{className:"diJmdO7x"},"Our Awesome Team"),React.createElement("h4",{className:"V6kV3iJ8"},"Pellentesque a ante vulputate leo porttitor luctus sed eget eros. Nulla et rhoncus neque. Duis non diam eget est luctus tincidunt a a mi.")),React.createElement("div",{className:"tHj6gSSK"},React.createElement(ws,{stroke:"#1a1a1a",className:Vo}),React.createElement("div",{className:"STg6blau"},React.createElement("div",{className:$o},React.createElement("div",{className:Uo},React.createElement("img",{className:Ho,src:"/images/image-team-one.png",alt:"Team image"})),React.createElement("div",{className:Wo},React.createElement("h2",{className:Jo},"Jenny Wilson"),React.createElement("h3",{className:Qo},"Ceo & Founder"))),React.createElement("div",{className:$o},React.createElement("div",{className:Uo},React.createElement("img",{className:Ho,src:"/images/image-team-two.png",alt:"Team image"})),React.createElement("div",{className:Wo},React.createElement("h2",{className:Jo},"Jane Cooper"),React.createElement("h3",{className:Qo},"Worker"))),React.createElement("div",{className:$o},React.createElement("div",{className:Uo},React.createElement("img",{className:Ho,src:"/images/image-team-three.png",alt:"Team image"})),React.createElement("div",{className:Wo},React.createElement("h2",{className:Jo},"Cody Fisher"),React.createElement("h3",{className:Qo},"Security Guard"))),React.createElement("div",{className:$o},React.createElement("div",{className:Uo},React.createElement("img",{className:Ho,src:"/images/image-team-four.png",alt:"Team image"})),React.createElement("div",{className:Wo},React.createElement("h2",{className:Jo},"Robert Fox"),React.createElement("h3",{className:Qo},"Senior Farmer Manager")))),React.createElement(Cs,{stroke:"#1a1a1a",className:Vo}))),React.createElement(As,null),React.createElement(Bs,null))}uc(mc,"OD7bBpZva5O2jO+Puf00hKivP7c=");const dc=mc;$RefreshReg$(mc,"About");var fc,pc="vn4julGF",hc="nlT2VrvY",gc="sZuarcD6",vc="sRry9r7I",bc="NmNKFndW",yc="aAoLkQ8S",Ec="cGrALL2J",Rc="BhaPdGJD",wc="ChLP7311",Nc="d1pKlkaq";function Sc(){return Sc=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Sc.apply(this,arguments)}const kc=function(e){return r.createElement("svg",Sc({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 18 19"},e),fc||(fc=r.createElement("path",{stroke:"gray",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"m1 8 8-7 8 7v10h-5v-4a3 3 0 0 0-6 0v4H1z"})))};function Cc(e){var t=e.one,a=e.two,n=e.three;return React.createElement("section",{className:pc},React.createElement("div",{className:Nc},React.createElement(Ia,{className:vc,to:"/"},React.createElement(kc,{className:gc})),React.createElement(Pn,{stroke:"#999999",className:hc}),React.createElement("h2",{className:a?bc:"".concat(bc," ").concat(yc)},t),React.createElement(Pn,{stroke:"#999999",className:hc}),React.createElement("h2",{className:n?Rc:"".concat(Rc," ").concat(wc)},a),n&&React.createElement(Pn,{stroke:"#999999",className:hc}),React.createElement("h2",{className:Ec},n)))}$RefreshReg$(Cc,"Navigate");var xc,Pc,Oc,qc="Uz04ATMw",Ac="rKZZN8bZ",Dc="I2Emsc5D",Mc="QT6k62Ob",jc="sRQtS8OJ",Tc="saGw85Um",Lc="D43AUB8R",Ic="nD3_1NPy",Bc="jOPpYunT",_c="WkV4sw2C",zc="QZiA9rLz",Fc="thoNLpO6",$c="WSosJosr",Vc="fLqO7A7Z",Hc="AXpmHj9j";function Uc(){return Uc=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Uc.apply(this,arguments)}const Wc=function(e){return r.createElement("svg",Uc({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 22 19"},e),xc||(xc=r.createElement("path",{stroke:"#fff",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M18 5H9M13 14H4"})),Pc||(Pc=r.createElement("circle",{cx:5,cy:5,r:4,stroke:"#fff",strokeWidth:1.5})),Oc||(Oc=r.createElement("circle",{cx:17,cy:14,r:4,stroke:"#fff",strokeWidth:1.5})))};var Jc=$RefreshSig$();function Qc(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function Kc(e){Jc();var t,a,n=e.filter,i=e.selected,l=e.setSelected,o=e.resetFilters,s=e.handleResetStates,c=e.onePoint,u=e.twoPoint,m=e.threePoint,d=e.fourPoint,f=(t=(0,r.useState)(!1),a=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(t,a)||function(e,t){if(e){if("string"==typeof e)return Qc(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?Qc(e,t):void 0}}(t,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),p=f[0],h=f[1];return React.createElement("section",{className:qc},React.createElement("button",{onClick:function(){o({}),s()},className:Ac},React.createElement("span",{className:Mc},"Filter"),React.createElement(Wc,{className:Dc})),React.createElement("div",{className:Hc},React.createElement("div",{className:Ic},React.createElement("h3",{className:Vc},"Sort by:"),React.createElement("div",{tabIndex:0,onBlur:function(){return h(!1)},onClick:function(){h(!p)},className:Lc},React.createElement("ul",{className:Bc},React.createElement("li",{className:Fc},"".concat(i.slice(0,1).toUpperCase()).concat(i.slice(1))),!!c&&React.createElement("li",{onClick:function(e){return l(e.target.innerHTML)},className:p?"".concat(_c," ").concat(zc):_c},"".concat(c[0].toUpperCase()).concat(c.slice(1))),!!u&&React.createElement("li",{onClick:function(e){return l(e.target.innerHTML)},className:p?"".concat(_c," ").concat(zc):_c},"".concat(u[0].toUpperCase()).concat(u.slice(1))),!!m&&React.createElement("li",{onClick:function(e){return l(e.target.innerHTML)},className:p?"".concat(_c," ").concat(zc):_c},"".concat(m[0].toUpperCase()).concat(m.slice(1))),!!d&&React.createElement("li",{onClick:function(e){return l(e.target.innerHTML)},className:p?"".concat(_c," ").concat(zc):_c},"".concat(d[0].toUpperCase()).concat(d.slice(1)))),React.createElement(Pn,{className:!1===p?jc:"".concat(jc," ").concat(Tc),stroke:"#4d4d4d"}))),React.createElement("div",{className:$c},React.createElement("b",null,"".concat(n.length," ")),React.createElement("span",null,"results found"))))}Jc(Kc,"aUv+Ajq/hT/CzGRR5wie1ccz4Ew="),$RefreshReg$(Kc,"SortProduct");var Gc="NJy2jN4A",Yc="ZEK19ZbK",Xc="PqA_Ie1s",Zc="Fjjlk_Di",eu="waHsZ8DK",tu="bWcHqc39",au="Y0wSCWfa",nu="VkGRkGL3",ru="OTSBPvHp",iu="RC_u6ydP",lu="AyxSFWkS",ou="HtRERvpC",su="p6ehzkaP",cu=[{id:0,img:"images/fruits.png",name:"Fresh Fruit",category:"Fruits"},{id:1,img:"images/fresh-vegetables.png",name:"Fresh Vegetables",category:"Vegetables"},{id:2,img:"images/meat-fish.png",name:"Meat & Fish",category:"Meats"},{id:3,img:"images/snacks.png",name:"Snacks",category:"Snacks"},{id:4,img:"images/beverages.png",name:"Beverages",category:"Beverages"},{id:5,img:"images/beauty-health.png",name:"Beauty & Health",category:"Beauty"},{id:6,img:"images/bread-bakery.png",name:"Bread & Bakery",category:"Bread"},{id:7,img:"images/baking-needs.png",name:"Baking Needs",category:"Baking"},{id:8,img:"images/cooking.png",name:"Cooking",category:"Cooking"},{id:9,img:"images/diabetic-food.png",name:"Diabetic Food",category:"Diabetic"},{id:10,img:"images/dish-detergents.png",name:"Dish detergents",category:"Dish"},{id:11,img:"images/oil.png",name:"Oil",category:"Oil"}],uu=$RefreshSig$();function mu(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function du(e){uu();var t,a,n=e.handleCategory,i=e.reducerShop,l=e.dispatchShop,o=(t=(0,r.useState)(!1),a=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(t,a)||function(e,t){if(e){if("string"==typeof e)return mu(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?mu(e,t):void 0}}(t,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=o[0],c=o[1],u=Bi.filter((function(e){return e.category.toLowerCase()===i.category.check}));return React.createElement("section",{className:!1===s?Yc:"".concat(Yc," ").concat(su)},React.createElement("div",{onClick:function(){c(!s)},className:ou},React.createElement("h2",{className:ru},"All Categories"),React.createElement(Hl,{stroke:"#1a1a1a",className:!1===s?eu:"".concat(eu," ").concat(tu)})),React.createElement("div",{className:!1===s?iu:"".concat(iu," ").concat(lu)},cu.map((function(e,t){return React.createElement("div",{key:e.id,className:au},React.createElement("label",{className:Xc},React.createElement("input",{onClick:function(t){l({type:"category",check:t.target.value,id:e.id}),n(t.target.value)},type:"radio",className:nu,name:"category",value:e.category.toLowerCase(),checked:e.category.toLowerCase()===i.category.check}),e.category),React.createElement("span",{className:Zc},i.category.id===e.id?"(".concat(u.length,")"):"(".concat(0,")")))}))))}uu(du,"kQt600tPsTduHMlWvIDJn56wzAI="),$RefreshReg$(du,"Categories");var fu="H5fB3ZX3",pu="hAlQk1C4",hu="vDCMLtSe",gu="wPBDOWkd",vu="QcLHk4du",bu="NL5QfEjo",yu="GP5orCq1",Eu="ok7vZjyx",Ru="WUeBmei0",wu="CLhlltOR",Nu="vL56823z",Su="mH28WTOG",ku="dz4DdBeo",Cu="vReyku6y",xu="CG6pyb3V",Pu=$RefreshSig$();function Ou(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function qu(e){Pu();var t,a,n=e.handlePrice,i=e.min,l=e.max,o=e.reducerShop,s=e.dispatchShop,c=(t=(0,r.useState)(!0),a=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(t,a)||function(e,t){if(e){if("string"==typeof e)return Ou(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?Ou(e,t):void 0}}(t,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=c[0],m=c[1],d=(0,r.useRef)(null),f=(0,r.useRef)(null),p=(0,r.useRef)(null);return(0,r.useEffect)((function(){if(d&&d.current){var e="".concat((o.min-i)/(l-i)*100,"%"),t="".concat((l-o.max)/(l-i)*100,"%");d.current.style.left=e,d.current.style.right=t}n(o.min,o.max)}),[l,o.max,i,o.min]),React.createElement("section",{className:!1===u?fu:"".concat(fu," ").concat(Nu)},React.createElement("div",{onClick:function(){m(!u)},className:gu},React.createElement("h1",{className:wu},"Price"),React.createElement(Hl,{className:!1===u?pu:"".concat(pu," ").concat(hu),stroke:"#1a1a1a"})),React.createElement("div",{className:!1===u?Su:"".concat(Su," ").concat(xu)},React.createElement("div",{className:Cu,ref:d}),React.createElement("input",{className:ku,type:"range",min:i,max:l,step:1,name:"min",onChange:function(e){return function(e){f&&f.current&&p&&p.current&&(f.current.style.zIndex=20,p.current.style.zIndex=10);var t=Number(e.target.value);t<=o.max&&s({type:"priceMin",min:t})}(e)},value:o.min,ref:f}),React.createElement("input",{className:ku,type:"range",min:i,max:l,step:1,name:"max",onChange:function(e){return function(e){f&&f.current&&p&&p.current&&(f.current.style.zIndex=10,p.current.style.zIndex=20);var t=Number(e.target.value);t>=o.min&&s({type:"priceMax",max:t})}(e)},value:o.max,ref:p})),React.createElement("div",{className:!1===u?vu:"".concat(vu," ").concat(bu)},React.createElement("h3",{className:Eu},o.min),React.createElement("div",{className:Ru}),React.createElement("h3",{className:yu},o.max)))}Pu(qu,"wTCVAkGebeHa92OvHtxAiIXi0YI="),$RefreshReg$(qu,"Price");var Au="lIbUECKA",Du="ZmOZoy_g",Mu="FrQ42gfq",ju="mfhq6oOE",Tu="V91NPNNM",Lu="DcqBoBxc",Iu="F7w5uTAb",Bu="bLOYqfLk",_u="r5EdhRgu",zu="jAmw4KYq",Fu="fpAVpL8I",$u="ujB9mWUL",Vu="YEDtN3Yg",Hu="EwsqHzZP";function Uu(e){var t=e.value,a=e.handle,n=e.reducerShop,r=e.dispatchShop;return React.createElement("label",{className:_u},React.createElement("input",{type:"radio",name:"rating",className:Vu,value:t.slice(0,1),checked:t.slice(0,1)===n.rating,onClick:function(e){r({type:"rating",rating:e.target.value}),a(e.target.value)}}),React.createElement(lc,{stroke:"#ffffff",className:n.rating!==t.slice(0,1)?Fu:"".concat(Fu," ").concat($u)}),React.createElement(Dl,{className:zu,fill:"#ff8a00"}),React.createElement(Dl,{className:zu,fill:"1"!==t.slice(0,1)?"#ff8a00":"#cccccc"}),React.createElement(Dl,{className:zu,fill:"2"!==t.slice(0,1)&&"1"!==t.slice(0,1)?"#ff8a00":"#cccccc"}),React.createElement(Dl,{className:zu,fill:"1"!==t.slice(0,1)&&"2"!==t.slice(0,1)&&"3"!==t.slice(0,1)?"#ff8a00":"#cccccc"}),React.createElement(Dl,{className:zu,fill:"1"!==t.slice(0,1)&&"2"!==t.slice(0,1)&&"3"!==t.slice(0,1)&&"4"!==t.slice(0,1)?"#ff8a00":"#cccccc"}),React.createElement("span",{className:Hu},t))}$RefreshReg$(Uu,"BoxStars");var Wu=$RefreshSig$();function Ju(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function Qu(e){Wu();var t,a,n=e.handleRating,i=e.reducerShop,l=e.dispatchShop,o=(t=(0,r.useState)(!0),a=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(t,a)||function(e,t){if(e){if("string"==typeof e)return Ju(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?Ju(e,t):void 0}}(t,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=o[0],c=o[1];return React.createElement("section",{className:!1===s?Au:"".concat(Au," ").concat(Bu)},React.createElement("div",{onClick:function(){c(!s)},className:ju},React.createElement("h1",{className:Tu},"Rating"),React.createElement(Hl,{stroke:"#1a1a1a",className:!1===s?Du:"".concat(Du," ").concat(Mu)})),React.createElement("div",{className:!1===s?Lu:"".concat(Lu," ").concat(Iu)},Ku.map((function(e){return React.createElement(Uu,{key:e.id,value:e.value,handle:n,reducerShop:i,dispatchShop:l})}))))}Wu(Qu,"AHukDmvlvAKpCWxJH/sCJAE9HAk=");var Ku=[{id:0,value:"5.0"},{id:1,value:"4.0 & up"},{id:2,value:"3.0 & up"},{id:3,value:"2.0 & up"},{id:4,value:"1.0 & up"}];$RefreshReg$(Qu,"Rating");var Gu="hZIYVHZd",Yu="y7KHzpOC",Xu="c8rLInmz",Zu="hBSong5B",em="ElDhkpzB",tm="iX4FAo_m",am="j5JcRuB8",nm="rIk0ZgQ8",rm="ZSRvmqqn",im="Sj526Fgd",lm="Z7_Qcz2V",om="GAtfYWzF",sm=$RefreshSig$();function cm(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function um(e){sm();var t,a,n=e.handleTag,i=e.reducerShop,l=e.dispatchShop,o=(t=(0,r.useState)(!0),a=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(t,a)||function(e,t){if(e){if("string"==typeof e)return cm(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?cm(e,t):void 0}}(t,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=o[0],c=o[1];return React.createElement("section",{className:!1===s?Gu:"".concat(Gu," ").concat(om)},React.createElement("div",{onClick:function(){c(!s)},className:tm},React.createElement("h1",{className:rm},"Popular Tag"),React.createElement(Hl,{stroke:"#1a1a1a",className:!1===s?Yu:"".concat(Yu," ").concat(Xu)})),React.createElement("div",{className:!1===s?im:"".concat(im," ").concat(lm)},mm.map((function(e,t){return React.createElement("button",{onClick:function(){l({type:"tag",tag:t}),n(e)},key:t,className:t!==i.tag?Zu:"".concat(Zu," ").concat(em)},React.createElement("h2",{className:t!==i.tag?am:"".concat(am," ").concat(nm)},e))}))))}sm(um,"AHukDmvlvAKpCWxJH/sCJAE9HAk=");var mm=["Healthy","Low fat","Vegetarian","Kid foods","Vitamins","Bread","Meat","Snacks","Tiffin","Lunch","Dinner","Breackfast","Fruit"];$RefreshReg$(um,"Tags");var dm="hXUxIfuI",fm="yXZz_EC5",pm="ZucbELUw",hm="MfLd4OeA",gm="Z9GRR8E9",vm="hn_30svt",bm="MsW5Y1jp",ym="SVs2ns6G",Em="CRQYscee",Rm="vJX0BaYg",wm="XvaMjDeb",Nm="JNAqkwqk",Sm="biIGNQP3",km="NYRKduuc",Cm="YMGZ2HTI",xm=$RefreshSig$();function Pm(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function Om(){xm();var e,t,a=(e=(0,r.useState)(null),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Pm(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?Pm(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),n=a[0],i=a[1],l=Bi.filter((function(e){return e.oldPrice})).filter((function(e,t){return t<3}));return React.createElement("section",{className:dm},React.createElement("div",{className:km},React.createElement("img",{className:Em,src:"images/saleBannar.png",alt:"image bannar"})),React.createElement("div",{className:Cm},React.createElement("h2",{className:Sm},"Sale Products"),React.createElement("div",{className:Nm},l.map((function(e,t){return React.createElement(Ia,{onMouseOver:function(){return i(e.id)},onMouseOut:function(){return i(null)},to:"".concat(e.id),key:t,className:n!==e.id?fm:"".concat(fm," ").concat(ym)},React.createElement("div",{className:bm},React.createElement("img",{className:pm,src:e.pictures[0],alt:"card product"})),React.createElement("div",{className:Rm},React.createElement("h3",{className:vm},e.name),React.createElement("div",{className:wm},React.createElement("h3",{className:gm},e.price),React.createElement("h3",{className:hm},e.oldPrice)),React.createElement(Ml,{card:e})))})))))}function qm(e){var t=e.handleCategory,a=e.handlePrice,n=e.handleRating,r=e.handleTag,i=e.min,l=e.max,o=e.reducerShop,s=e.dispatchShop;return React.createElement("nav",{className:Gc},React.createElement(du,{reducerShop:o,dispatchShop:s,handleCategory:t}),React.createElement(qu,{handlePrice:a,min:i,max:l,reducerShop:o,dispatchShop:s}),React.createElement(Qu,{handleRating:n,reducerShop:o,dispatchShop:s}),React.createElement(um,{handleTag:r,reducerShop:o,dispatchShop:s}),React.createElement(Om,null))}xm(Om,"fmiiFJLr4aACkSc0M7H3di7yZd8="),$RefreshReg$(Om,"Sales"),$RefreshReg$(qm,"FiltersProduct");var Am,Dm,Mm="l7jBx1Eu",jm="t3s26QVS",Tm="b4ZJ7jb9",Lm="B6h8un6B",Im="V86mupwx",Bm="XNerfDNE",_m="qd6yvPCV",zm="JUEmHadt",Fm="LMKx6EXJ",$m="iZWjqTa2",Vm="hgpqreSR",Hm="VAQTcScz";function Um(){return Um=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Um.apply(this,arguments)}const Wm=function(e){return r.createElement("svg",Um({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 20 16"},e),Am||(Am=r.createElement("path",{stroke:"#1A1A1A",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M10 1.541c-6.25 0-8.75 6.46-8.75 6.46s2.5 6.457 8.75 6.457S18.75 8 18.75 8 16.25 1.541 10 1.541"})),Dm||(Dm=r.createElement("path",{stroke:"#1A1A1A",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M10 11.125a3.125 3.125 0 1 0 0-6.25 3.125 3.125 0 0 0 0 6.25"})))};var Jm=$RefreshSig$();function Qm(e){return Qm="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qm(e)}function Km(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function Gm(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?Km(Object(a),!0).forEach((function(t){var n,r,i,l;n=e,r=t,i=a[t],l=function(e,t){if("object"!=Qm(e)||!e)return e;var a=e[Symbol.toPrimitive];if(void 0!==a){var n=a.call(e,"string");if("object"!=Qm(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r),(r="symbol"==Qm(l)?l:l+"")in n?Object.defineProperty(n,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[r]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):Km(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function Ym(e){Jm();var t=e.id,a=(0,r.useContext)(Po),n=(0,r.useContext)(Oo);return React.createElement("button",{onClick:function(){return n(Gm(Gm({},a),{},{modal:!0,productId:t}))},className:Vm},React.createElement(Wm,{stroke:"#1a1a1a",className:Hm}))}Jm(Ym,"DClSw+V+Mr8X8BC5LcBR1Di3CCI="),$RefreshReg$(Ym,"BtnActiveModal");var Xm="xJt5Rv6N",Zm="ISSCBCb6";function ed(e){var t=e.product;return React.createElement("h3",{className:t.oldPrice.length>1?Xm:Zm},t.oldPrice.length>1&&"Sale ".concat((100-t.price.slice(1)/t.oldPrice.slice(1)*100).toFixed(0),"%"))}$RefreshReg$(ed,"DiscountProcent");var td=$RefreshSig$();function ad(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function nd(e){td();var t,a,n=e.product,i=e.path,l=(t=(0,r.useState)(null),a=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(t,a)||function(e,t){if(e){if("string"==typeof e)return ad(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?ad(e,t):void 0}}(t,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=l[0],s=l[1];return React.createElement("div",{key:n.id,className:o===n.id?"".concat(jm," ").concat($m):jm,onMouseOver:function(){return s(n.id)},onMouseOut:function(){return s(null)}},React.createElement("div",{className:Fm},React.createElement("img",{className:Tm,src:"/".concat(n.pictures[0]),alt:"image product"})),React.createElement(Ia,{onClick:function(){return window.scrollTo(0,0)},to:i?"".concat(i).concat(n.id,"/description"):"".concat(n.id,"/description"),className:zm},React.createElement("h3",{className:_m},n.name),React.createElement("div",{className:Lm},React.createElement("h3",{className:Bm},n.price),React.createElement("h3",{className:Im},n.oldPrice)),React.createElement(Ml,{card:n})),React.createElement(ed,{product:n}),React.createElement(io,null),React.createElement(Ym,{id:n.id}),React.createElement(ao,{activeCard:o,id:n.id}))}function rd(e){var t=e.filter;return React.createElement("section",{className:Mm},t.map((function(e){return React.createElement(nd,{key:e.id,product:e})})))}td(nd,"fmiiFJLr4aACkSc0M7H3di7yZd8="),$RefreshReg$(nd,"Card"),$RefreshReg$(rd,"ListProducts");var id="D8WW6HDn",ld="GXIH5eig",od="sH5e3SnJ",sd="slKEAAPh",cd="perQ5fWf",ud="L8gOBr09",md="bMlaaUQa",dd="Nf44kY_T";function fd(e){return fd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},fd(e)}var pd=$RefreshSig$();function hd(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function gd(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?hd(Object(a),!0).forEach((function(t){var n,r,i,l;n=e,r=t,i=a[t],l=function(e,t){if("object"!=fd(e)||!e)return e;var a=e[Symbol.toPrimitive];if(void 0!==a){var n=a.call(e,"string");if("object"!=fd(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r),(r="symbol"==fd(l)?l:l+"")in n?Object.defineProperty(n,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[r]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):hd(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function vd(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return bd(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?bd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function bd(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function yd(e){pd();for(var t=e.productPerPage,a=e.totalProducts,n=e.currentPage,i=e.setCurrentPage,l=vd((0,r.useState)({from:0,to:5}),2),o=l[0],s=l[1],c=[],u=vd((0,r.useState)(c[c.length-1]),2),m=u[0],d=(u[1],1);d<=Math.ceil(a/t);d++)c.push(d);var f=c.slice(o.from,o.to);return React.createElement("section",{className:id},React.createElement("div",{className:dd},React.createElement("div",{className:sd},React.createElement(Pn,{onClick:function(){o.from>0&&s(gd(gd({},o),{},{from:o.from-1,to:o.to-1}))},className:ld,stroke:"#1a1a1a"}),f.map((function(e,t){return React.createElement("h3",{onClick:function(){e!==c[c.length-1]&&1!==e&&s({from:e-3,to:e+2}),e===c[c.length-2]&&s({from:e-4,to:e+1}),2===e&&s({from:e-2,to:e+3}),i(e)},key:e,className:n!==e?cd:"".concat(cd," ").concat(ud)},e)})),React.createElement("h3",{className:md},"..."),React.createElement("h3",{onClick:function(){i(c[c.length-1]),m===c[c.length-1]&&s(gd(gd({},o),{},{from:m-5,to:m}))},className:cd},c[c.length-1]),React.createElement(Pn,{onClick:function(){o.to<c[c.length-1]&&s(gd(gd({},o),{},{from:o.from+1,to:o.to+1}))},className:od,stroke:"#1a1a1a"}))))}pd(yd,"Sx6FbO0ASJTkI6Wfqx1uqOgIMg8="),$RefreshReg$(yd,"Pagination");var Ed=$RefreshSig$();function Rd(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function wd(){Ed();var e,t,a=(0,r.useContext)(Lo),n=(0,r.useContext)(Io),i=(0,r.useContext)(Bo),l=(0,r.useContext)(_o),o=(e=(0,r.useState)(15),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Rd(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?Rd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=o[0],c=(o[1],a.get("category")||""),u=a.get("min")||0,m=a.get("max")||1e3,d=a.get("rating")||"",f=a.get("tag")||"";(0,r.useEffect)((function(){window.scrollTo(0,0)}),[i.page]),(0,r.useEffect)((function(){l({type:"reset"}),n({})}),[]);var p=Bi.filter((function(e){return e.category.toLowerCase().includes(c)})).filter((function(e){return parseInt(e.price.slice(1))>=u&&Math.round(e.price.slice(1))<=m})).filter((function(e){return(e.stars.reduce((function(e,t){return e+Number(t)}),0)/e.stars.length).toFixed(0)===d?e:d?void 0:e})).filter((function(e){return f?e.tags.includes(f):e})).sort((function(e,t){if(i.selectedSort.includes("high to low"))return t.price.slice(1)-e.price.slice(1);if(i.selectedSort.includes("low to high"))return e.price.slice(1)-t.price.slice(1);if(i.selectedSort.includes("rating")){var a=e.stars.reduce((function(e,t){return e+Number(t)}),0)/e.stars.length;return t.stars.reduce((function(e,t){return e+Number(t)}),0)/t.stars.length-a}})),h=i.page*s,g=h-s,v=p.slice(g,h);return React.createElement("main",{className:"QVxaPo8h"},React.createElement(ra,null,React.createElement("meta",{charSet:"utf-8"}),React.createElement("title",null,"Shop")),React.createElement(Cc,{one:"Categories",two:i.category.check}),React.createElement(Kc,{onePoint:"Latest",twoPoint:"Price: low to high",threePoint:"Price: high to low",fourPoint:"Rating",selected:i.selectedSort,setSelected:function(e){l({type:"selected",selected:e.toLowerCase()})},filter:p,handleResetStates:function(){l({type:"reset"})},resetFilters:n}),React.createElement("div",{className:"TlnPemJH"},React.createElement(qm,{min:0,max:1e3,reducerShop:i,dispatchShop:l,handleCategory:function(e){c===e.toLowerCase()&&(f&&d&&n({rating:d,tag:f,min:u,max:m}),f||d||n({min:u,max:m}),f&&!d&&n({tag:f,min:u,max:m}),!f&&d&&n({rating:d,min:u,max:m})),c!==e.toLowerCase()&&(f&&d&&n({category:e.toLowerCase(),tag:f,rating:d,min:u,max:m}),f||d||n({category:e.toLowerCase(),min:u,max:m}),f&&!d&&n({category:e.toLowerCase(),tag:f,min:u,max:m}),!f&&d&&n({category:e.toLowerCase(),rating:d,min:u,max:m}))},handlePrice:function(e,t){f&&d&&c&&n({category:c,rating:d,tag:f,min:e,max:t}),f||d||c||n({min:e,max:t}),!f&&d&&c&&n({category:c,rating:d,min:e,max:t}),f||d||!c||n({category:c,min:e,max:t}),f||!d||c||n({rating:d,min:e,max:t}),f&&!d&&c&&n({category:c,tag:f,min:e,max:t}),f&&d&&!c&&n({rating:d,tag:f,min:e,max:t}),!f||d||c||n({tag:f,min:e,max:t})},handleRating:function(e){d===e&&(f&&c&&n({category:c,tag:f,min:u,max:m}),f||c||n({min:u,max:m}),!f&&c&&n({category:c,min:u,max:m}),f&&!c&&n({tag:f,min:u,max:m})),d!==e&&(f&&c&&n({category:c,rating:e,tag:f,min:u,max:m}),f||c||n({rating:e,min:u,max:m}),!f&&c&&n({category:c,rating:e,min:u,max:m}),f&&!c&&n({rating:e,tag:f,min:u,max:m}))},handleTag:function(e){f===e&&(d&&c&&n({category:c,rating:d,min:u,max:m}),d||c||n({min:u,max:m}),!d&&c&&n({category:c,min:u,max:m}),d&&!c&&n({rating:d,min:u,max:m})),f!==e&&(d&&c&&n({category:c,rating:d,tag:e,min:u,max:m}),d||c||n({tag:e,min:u,max:m}),!d&&c&&n({category:c,tag:e,min:u,max:m}),d&&!c&&n({rating:d,tag:e,min:u,max:m}))}}),React.createElement(rd,{filter:v})),React.createElement(yd,{productPerPage:s,totalProducts:Bi.length,currentPage:i.page,setCurrentPage:function(e){l({type:"page",page:e})}}))}Ed(wd,"z7JMeMah6HVP23dMjauDu4qy4F4="),$RefreshReg$(wd,"Shop");var Nd,Sd,kd="xFPmj07j",Cd="xjeD2ONH",xd="VZ2PrCRA",Pd="CmBiCzUn",Od="dUtyWYvO",qd="tdbInwX8";function Ad(){return Ad=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Ad.apply(this,arguments)}const Dd=function(e){return r.createElement("svg",Ad({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 34 45"},e),Nd||(Nd=r.createElement("path",{stroke:"#2C742F",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M2.656 43.219h28.688M17 24.094a6.375 6.375 0 1 0 0-12.75 6.375 6.375 0 0 0 0 12.75"})),Sd||(Sd=r.createElement("path",{stroke:"#2C742F",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M32.938 17.719c0 14.343-15.938 25.5-15.938 25.5S1.063 32.062 1.063 17.719a15.938 15.938 0 1 1 31.875 0"})))};var Md,jd;function Td(){return Td=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Td.apply(this,arguments)}const Ld=function(e){return r.createElement("svg",Td({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 52 51"},e),Md||(Md=r.createElement("g",{fill:"#2C742F",clipPath:"url(#iconMail_svg__a)"},r.createElement("path",{d:"M48.95 5.95H3.05A2.55 2.55 0 0 0 .5 8.5v34a2.55 2.55 0 0 0 2.55 2.55h45.9a2.55 2.55 0 0 0 2.55-2.55v-34a2.55 2.55 0 0 0-2.55-2.55m.85 36.55c0 .47-.38.85-.85.85H3.05a.85.85 0 0 1-.85-.85v-34c0-.47.38-.85.85-.85h45.9c.47 0 .85.38.85.85z"}),r.createElement("path",{d:"M47.324 9.354a.85.85 0 0 0-.62.196l-19.61 16.473a1.7 1.7 0 0 1-2.188 0L5.296 9.55a.85.85 0 0 0-1.093 1.302l19.61 16.472a3.396 3.396 0 0 0 4.374 0l19.61-16.472a.85.85 0 0 0-.473-1.498M16.848 27.206a.85.85 0 0 0-.82.264l-11.9 12.75a.85.85 0 1 0 1.243 1.16l11.9-12.75a.85.85 0 0 0-.423-1.424M35.971 27.47a.85.85 0 1 0-1.242 1.16l11.9 12.75a.85.85 0 0 0 1.242-1.16z"}))),jd||(jd=r.createElement("defs",null,r.createElement("clipPath",{id:"iconMail_svg__a"},r.createElement("path",{fill:"#fff",d:"M.5 0h51v51H.5z"})))))};var Id=$RefreshSig$();function Bd(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function _d(){Id();var e,t,a=(e=(0,r.useState)(null),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Bd(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?Bd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),n=a[0],i=a[1];return(0,r.useEffect)((function(){window.scrollTo(0,0)}),[]),React.createElement("main",{className:"mpWjqkxs"},React.createElement(ra,null,React.createElement("meta",{charSet:"utf-8"}),React.createElement("title",null,"Contact")),React.createElement(Cc,{one:"Contact"}),React.createElement("section",{className:"ppttypBC"},React.createElement("div",{className:"vk4zKYqf"},React.createElement("div",{className:xd},React.createElement(Dd,{className:Cd}),React.createElement("h3",{className:Pd},"2715 Ash Dr. San Jose, South Dakota 83475")),React.createElement("div",{className:xd},React.createElement(Ld,{className:Cd}),React.createElement("h3",{className:Pd},"Proxy@gmail.com Help.proxy@gmail.com")),React.createElement("div",{className:xd},React.createElement(Zn,{stroke:"#2C742F",className:Cd}),React.createElement("h3",{className:Pd},"(219) 555-0114",React.createElement("br",null),"(164) 333-0487"))),React.createElement("div",{className:"IS4b0FOi"},React.createElement("div",{className:"b_fJSSpQ"},React.createElement("h1",{className:"huBe5YEM"},"Just Say Hello!"),React.createElement("h3",{className:"iVDaOPVS"},"Do you fancy saying hi to me or you want to get started with your project and you need my help? Feel free to contact me.")),React.createElement("form",{method:"submit",name:"message-contact",className:"AAyI05pC",action:""},React.createElement("div",{className:"OtrJMNEJ"},React.createElement("h3",{className:"p8IYFmQJ"},"Template Cookie"),React.createElement("input",{onFocus:function(){return i(1)},onBlur:function(){return i(null)},placeholder:"zakirsoft@gmail.com",className:1!==n?Od:"".concat(Od," ").concat("chSA9IeV"),type:"email",name:"email"})),React.createElement("input",{onFocus:function(){return i(2)},onBlur:function(){return i(null)},placeholder:"Hello",className:2!==n?qd:"".concat(qd," ").concat("PT85aR1U"),type:"text",name:"name"}),React.createElement("textarea",{onFocus:function(){return i(3)},onBlur:function(){return i(null)},placeholder:"Subjects",className:3!==n?kd:"".concat(kd," ").concat("_YIpGazh"),name:"message"})),React.createElement("button",{className:"OcA2ID7L"},"Send Message"))),React.createElement("iframe",{className:"gYZ5OjDq",src:"https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d339041.7944956286!2d-88.04452033292914!3d41.82534393093286!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sru!2sua!4v1736779187720!5m2!1sru!2sua",width:"600",height:"450",loading:"lazy",referrerPolicy:"origin-when-cross-origin"}))}Id(_d,"qQhMS8l4m9NJNecidCV9MT368/w="),$RefreshReg$(_d,"Contact");var zd="lOgbD__1",Fd="pIn7pXtu",$d="RuYIQRwv",Vd="Kn0Jt_PU",Hd="BPHNSPX_",Ud="kyufxThv",Wd="rV1Gw_up";function Jd(e){var t=e.array,a=e.category,n=e.setCategory,r=e.filters;return React.createElement("section",{className:zd},React.createElement("h1",{className:Ud},"Top Categories"),cu.map((function(e){return React.createElement("div",{key:e.id,className:Wd},React.createElement("div",{className:Fd},React.createElement("h3",{onClick:function(){n(e.id),r(e.category)},className:a.category!==e.id?Vd:"".concat(Vd," ").concat(Hd)},e.name),React.createElement("span",{className:$d},a.category===e.id?"(".concat(t.length,")"):"(".concat(0,")"))))})))}$RefreshReg$(Jd,"BlogCategories");var Qd="sWwwcWT2",Kd="xBgxtIqw",Gd="LxEvkqyt";function Yd(){return React.createElement("form",{name:"search-post",action:"",className:Qd},React.createElement(Xa,{stroke:"#1a1a1a",className:Kd}),React.createElement("input",{className:Gd,placeholder:"Search...",type:"text"}))}$RefreshReg$(Yd,"BlogSearch");var Xd="pmmguyWO",Zd="PpxFKlg8",ef="vwG_DPrQ",tf="mkoVjJ8B",af="M5BTAzYR";function nf(e){var t=e.reducer,a=e.setTag,n=e.filters;return React.createElement("section",{className:Xd},React.createElement("h1",{className:af},"Popular Tag"),React.createElement("div",{className:Zd},rf.map((function(e,r){return React.createElement("h3",{onClick:function(){a(r),n(e)},key:r,className:t.tag!==r?ef:"".concat(ef," ").concat(tf)},e)}))))}var rf=["Healthy","Low fat","Vegetarian","Bread","Kid foods","Vitamins","Snacks","Tiffin","Meat","Lunch","Dinner"];$RefreshReg$(nf,"BlogTags");var lf="FN4HcJaa",of="adQSxZET",sf="Y2ZvP4Iw",cf="efEdEd16";function uf(){return React.createElement("section",{className:lf},React.createElement("h2",{className:sf},"Our Gallery"),React.createElement("div",{className:cf},mf.map((function(e,t){return React.createElement("img",{className:of,key:t,src:e,alt:"image gallery"})}))))}var mf=["/images/gallery-one.png","/images/gallery-two.png","/images/gallery-three.png","/images/gallery-four.png","/images/gallery-five.png","/images/gallery-six.png","/images/gallery-seven.png","/images/gallery-eight.png"];$RefreshReg$(uf,"BlogGallery");var df,ff="uK9km0Ua",pf="IUFpABxg",hf="VxqF2hGp",gf="uldufRXa",vf="WPEo_fvZ",bf="zrKYmxSb",yf="U5QWfhRV",Ef="dH2gk92k",Rf="mOGmAZCs",wf="pYbl1EkH",Nf="KzJc5XEQ",Sf=[{id:0,img:"/images/news.png",title:"Maecenas tempor urna sed quam mollis, a placerat dui fringill Suspendisse.",subTitle:"Maecenas lacinia felis nec placerat sollicitudin. Quisque placerat dolor at scelerisque imperdiet. Phasellus tristique felis dolor.",descriptionOne:"Maecenas elementum in risus sed condimentum. Duis convallis ante ac tempus maximus. Fusce malesuada sed velit ut dictum. Morbi faucibus vitae orci at euismod. Integer auctor augue in erat vehicula, quis fermentum ex finibus.",descriptionTwo:"Mauris pretium elit a dui pulvinar, in ornare sapien euismod. Nullam interdum nisl ante, id feugiat quam euismod commodo. Sed ultrices lectus ut iaculis rhoncus. Aenean non dignissim justo, at fermentum turpis. Sed molestie, ligula ut molestie ultrices, tellus ligula viverra neque, malesuada consectetur diam sapien volutpat risus. Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. ur ridiculus mus.",descriptionThree:"Sed dictum non nulla eu imperdiet. Duis elit libero, vulputate quis vehicula ut, vestibulum ut mauris. Nullam non felis varius dui rutrum rutrum in a nisi. Suspendisse elementum rutrum lorem sed luctus. Proin iaculis euismod metus non sollicitudin. Duis vel luctus lacus. Nullam faucibus iaculis convallis. In ullamcorper nibh ipsum, eget lacinia eros pulvinar a. Integer accumsan arcu nec faucibus ultricies.",category:"Food",text:"Curabitur porttitor orci eget neque accumsan venenatis. Nunc fermentum.",comments:[{id:0,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:1,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:2,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:3,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:4,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")},{id:5,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:6,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:7,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:8,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:9,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")}],images:["/images/news-another-image.png","/images/news-another-image-one.png"],date:new Date("2024-11-18"),tags:["Healthy","Dinner"]},{id:1,img:"/images/news-one.png",title:"Maecenas tempor urna sed quam mollis, a placerat dui fringill Suspendisse.",subTitle:"Maecenas lacinia felis nec placerat sollicitudin. Quisque placerat dolor at scelerisque imperdiet. Phasellus tristique felis dolor.",descriptionOne:"Maecenas elementum in risus sed condimentum. Duis convallis ante ac tempus maximus. Fusce malesuada sed velit ut dictum. Morbi faucibus vitae orci at euismod. Integer auctor augue in erat vehicula, quis fermentum ex finibus.",descriptionTwo:"Mauris pretium elit a dui pulvinar, in ornare sapien euismod. Nullam interdum nisl ante, id feugiat quam euismod commodo. Sed ultrices lectus ut iaculis rhoncus. Aenean non dignissim justo, at fermentum turpis. Sed molestie, ligula ut molestie ultrices, tellus ligula viverra neque, malesuada consectetur diam sapien volutpat risus. Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. ur ridiculus mus.",descriptionThree:"Sed dictum non nulla eu imperdiet. Duis elit libero, vulputate quis vehicula ut, vestibulum ut mauris. Nullam non felis varius dui rutrum rutrum in a nisi. Suspendisse elementum rutrum lorem sed luctus. Proin iaculis euismod metus non sollicitudin. Duis vel luctus lacus. Nullam faucibus iaculis convallis. In ullamcorper nibh ipsum, eget lacinia eros pulvinar a. Integer accumsan arcu nec faucibus ultricies.",category:"Food",text:"Eget lobortis lorem lacinia. Vivamus pharetra semper.",comments:[{id:0,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:1,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:2,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:3,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:4,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")},{id:5,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:6,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:7,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:8,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:9,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")}],images:["/images/news-one.png","/images/news-one.png"],date:new Date("2024-01-29"),tags:["Healthy","Dinner"]},{id:2,img:"/images/news-two.png",title:"Maecenas tempor urna sed quam mollis, a placerat dui fringill Suspendisse.",subTitle:"Maecenas lacinia felis nec placerat sollicitudin. Quisque placerat dolor at scelerisque imperdiet. Phasellus tristique felis dolor.",descriptionOne:"Maecenas elementum in risus sed condimentum. Duis convallis ante ac tempus maximus. Fusce malesuada sed velit ut dictum. Morbi faucibus vitae orci at euismod. Integer auctor augue in erat vehicula, quis fermentum ex finibus.",descriptionTwo:"Mauris pretium elit a dui pulvinar, in ornare sapien euismod. Nullam interdum nisl ante, id feugiat quam euismod commodo. Sed ultrices lectus ut iaculis rhoncus. Aenean non dignissim justo, at fermentum turpis. Sed molestie, ligula ut molestie ultrices, tellus ligula viverra neque, malesuada consectetur diam sapien volutpat risus. Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. ur ridiculus mus.",descriptionThree:"Sed dictum non nulla eu imperdiet. Duis elit libero, vulputate quis vehicula ut, vestibulum ut mauris. Nullam non felis varius dui rutrum rutrum in a nisi. Suspendisse elementum rutrum lorem sed luctus. Proin iaculis euismod metus non sollicitudin. Duis vel luctus lacus. Nullam faucibus iaculis convallis. In ullamcorper nibh ipsum, eget lacinia eros pulvinar a. Integer accumsan arcu nec faucibus ultricies.",category:"Food",text:"Maecenas blandit risus elementum mauris malesuada.",comments:[{id:0,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:1,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:2,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:3,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:4,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")},{id:5,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:6,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:7,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:8,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:9,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")}],images:["/images/news-two.png","/images/news-two.png"],date:new Date("2024-02-21"),tags:["Healthy"]},{id:3,img:"/images/news-three.png",title:"Maecenas tempor urna sed quam mollis, a placerat dui fringill Suspendisse.",subTitle:"Maecenas lacinia felis nec placerat sollicitudin. Quisque placerat dolor at scelerisque imperdiet. Phasellus tristique felis dolor.",descriptionOne:"Maecenas elementum in risus sed condimentum. Duis convallis ante ac tempus maximus. Fusce malesuada sed velit ut dictum. Morbi faucibus vitae orci at euismod. Integer auctor augue in erat vehicula, quis fermentum ex finibus.",descriptionTwo:"Mauris pretium elit a dui pulvinar, in ornare sapien euismod. Nullam interdum nisl ante, id feugiat quam euismod commodo. Sed ultrices lectus ut iaculis rhoncus. Aenean non dignissim justo, at fermentum turpis. Sed molestie, ligula ut molestie ultrices, tellus ligula viverra neque, malesuada consectetur diam sapien volutpat risus. Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. ur ridiculus mus.",descriptionThree:"Sed dictum non nulla eu imperdiet. Duis elit libero, vulputate quis vehicula ut, vestibulum ut mauris. Nullam non felis varius dui rutrum rutrum in a nisi. Suspendisse elementum rutrum lorem sed luctus. Proin iaculis euismod metus non sollicitudin. Duis vel luctus lacus. Nullam faucibus iaculis convallis. In ullamcorper nibh ipsum, eget lacinia eros pulvinar a. Integer accumsan arcu nec faucibus ultricies.",category:"Fruits",text:"Curabitur porttitor orci eget neque accumsan venenatis. Nunc fermentum.",comments:[{id:0,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:1,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:2,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:3,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:4,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")},{id:5,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:6,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:7,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:8,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:9,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")}],images:["/images/news-three.png","/images/news-three.png"],date:new Date("2024-11-18"),tags:["Healthy","Dinner"]},{id:4,img:"/images/news-four.png",title:"Maecenas tempor urna sed quam mollis, a placerat dui fringill Suspendisse.",subTitle:"Maecenas lacinia felis nec placerat sollicitudin. Quisque placerat dolor at scelerisque imperdiet. Phasellus tristique felis dolor.",descriptionOne:"Maecenas elementum in risus sed condimentum. Duis convallis ante ac tempus maximus. Fusce malesuada sed velit ut dictum. Morbi faucibus vitae orci at euismod. Integer auctor augue in erat vehicula, quis fermentum ex finibus.",descriptionTwo:"Mauris pretium elit a dui pulvinar, in ornare sapien euismod. Nullam interdum nisl ante, id feugiat quam euismod commodo. Sed ultrices lectus ut iaculis rhoncus. Aenean non dignissim justo, at fermentum turpis. Sed molestie, ligula ut molestie ultrices, tellus ligula viverra neque, malesuada consectetur diam sapien volutpat risus. Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. ur ridiculus mus.",descriptionThree:"Sed dictum non nulla eu imperdiet. Duis elit libero, vulputate quis vehicula ut, vestibulum ut mauris. Nullam non felis varius dui rutrum rutrum in a nisi. Suspendisse elementum rutrum lorem sed luctus. Proin iaculis euismod metus non sollicitudin. Duis vel luctus lacus. Nullam faucibus iaculis convallis. In ullamcorper nibh ipsum, eget lacinia eros pulvinar a. Integer accumsan arcu nec faucibus ultricies.",category:"Food",text:"Curabitur porttitor orci eget neque accumsan venenatis. Nunc fermentum.",comments:[{id:0,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:1,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:2,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:3,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:4,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")},{id:5,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:6,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:7,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:8,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:9,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")}],images:["/images/news-four.png","/images/news-four.png"],date:new Date("2024-11-18"),tags:["Healthy","Dinner"]},{id:5,img:"/images/news-five.png",title:"Maecenas tempor urna sed quam mollis, a placerat dui fringill Suspendisse.",subTitle:"Maecenas lacinia felis nec placerat sollicitudin. Quisque placerat dolor at scelerisque imperdiet. Phasellus tristique felis dolor.",descriptionOne:"Maecenas elementum in risus sed condimentum. Duis convallis ante ac tempus maximus. Fusce malesuada sed velit ut dictum. Morbi faucibus vitae orci at euismod. Integer auctor augue in erat vehicula, quis fermentum ex finibus.",descriptionTwo:"Mauris pretium elit a dui pulvinar, in ornare sapien euismod. Nullam interdum nisl ante, id feugiat quam euismod commodo. Sed ultrices lectus ut iaculis rhoncus. Aenean non dignissim justo, at fermentum turpis. Sed molestie, ligula ut molestie ultrices, tellus ligula viverra neque, malesuada consectetur diam sapien volutpat risus. Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. ur ridiculus mus.",descriptionThree:"Sed dictum non nulla eu imperdiet. Duis elit libero, vulputate quis vehicula ut, vestibulum ut mauris. Nullam non felis varius dui rutrum rutrum in a nisi. Suspendisse elementum rutrum lorem sed luctus. Proin iaculis euismod metus non sollicitudin. Duis vel luctus lacus. Nullam faucibus iaculis convallis. In ullamcorper nibh ipsum, eget lacinia eros pulvinar a. Integer accumsan arcu nec faucibus ultricies.",category:"Fruits",text:"Curabitur porttitor orci eget neque accumsan venenatis. Nunc fermentum.",comments:[{id:0,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:1,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:2,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:3,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:4,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")},{id:5,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:6,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:7,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:8,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:9,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")}],images:["/images/news-five.png","/images/news-five.png"],date:new Date("2024-11-18"),tags:["Healthy","Vegetarian"]},{id:6,img:"/images/news-six.png",title:"Maecenas tempor urna sed quam mollis, a placerat dui fringill Suspendisse.",subTitle:"Maecenas lacinia felis nec placerat sollicitudin. Quisque placerat dolor at scelerisque imperdiet. Phasellus tristique felis dolor.",descriptionOne:"Maecenas elementum in risus sed condimentum. Duis convallis ante ac tempus maximus. Fusce malesuada sed velit ut dictum. Morbi faucibus vitae orci at euismod. Integer auctor augue in erat vehicula, quis fermentum ex finibus.",descriptionTwo:"Mauris pretium elit a dui pulvinar, in ornare sapien euismod. Nullam interdum nisl ante, id feugiat quam euismod commodo. Sed ultrices lectus ut iaculis rhoncus. Aenean non dignissim justo, at fermentum turpis. Sed molestie, ligula ut molestie ultrices, tellus ligula viverra neque, malesuada consectetur diam sapien volutpat risus. Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. ur ridiculus mus.",descriptionThree:"Sed dictum non nulla eu imperdiet. Duis elit libero, vulputate quis vehicula ut, vestibulum ut mauris. Nullam non felis varius dui rutrum rutrum in a nisi. Suspendisse elementum rutrum lorem sed luctus. Proin iaculis euismod metus non sollicitudin. Duis vel luctus lacus. Nullam faucibus iaculis convallis. In ullamcorper nibh ipsum, eget lacinia eros pulvinar a. Integer accumsan arcu nec faucibus ultricies.",category:"Food",text:"Curabitur porttitor orci eget neque accumsan venenatis. Nunc fermentum.",comments:[{id:0,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:1,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:2,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:3,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:4,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")},{id:5,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:6,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:7,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:8,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:9,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")}],images:["/images/news-six.png","/images/news-six.png"],date:new Date("2024-11-18"),tags:["Healthy","Vegetarian","Dinner"]},{id:7,img:"/images/news-seven.png",title:"Maecenas tempor urna sed quam mollis, a placerat dui fringill Suspendisse.",subTitle:"Maecenas lacinia felis nec placerat sollicitudin. Quisque placerat dolor at scelerisque imperdiet. Phasellus tristique felis dolor.",descriptionOne:"Maecenas elementum in risus sed condimentum. Duis convallis ante ac tempus maximus. Fusce malesuada sed velit ut dictum. Morbi faucibus vitae orci at euismod. Integer auctor augue in erat vehicula, quis fermentum ex finibus.",descriptionTwo:"Mauris pretium elit a dui pulvinar, in ornare sapien euismod. Nullam interdum nisl ante, id feugiat quam euismod commodo. Sed ultrices lectus ut iaculis rhoncus. Aenean non dignissim justo, at fermentum turpis. Sed molestie, ligula ut molestie ultrices, tellus ligula viverra neque, malesuada consectetur diam sapien volutpat risus. Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. ur ridiculus mus.",descriptionThree:"Sed dictum non nulla eu imperdiet. Duis elit libero, vulputate quis vehicula ut, vestibulum ut mauris. Nullam non felis varius dui rutrum rutrum in a nisi. Suspendisse elementum rutrum lorem sed luctus. Proin iaculis euismod metus non sollicitudin. Duis vel luctus lacus. Nullam faucibus iaculis convallis. In ullamcorper nibh ipsum, eget lacinia eros pulvinar a. Integer accumsan arcu nec faucibus ultricies.",category:"Meats",text:"Curabitur porttitor orci eget neque accumsan venenatis. Nunc fermentum.",comments:[{id:0,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:1,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:2,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:3,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:4,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")},{id:5,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:6,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:7,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:8,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:9,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")}],images:["/images/news-seven.png","/images/news-seven.png"],date:new Date("2024-11-18"),tags:["Healthy"]},{id:8,img:"/images/news-eight.png",title:"Maecenas tempor urna sed quam mollis, a placerat dui fringill Suspendisse.",subTitle:"Maecenas lacinia felis nec placerat sollicitudin. Quisque placerat dolor at scelerisque imperdiet. Phasellus tristique felis dolor.",descriptionOne:"Maecenas elementum in risus sed condimentum. Duis convallis ante ac tempus maximus. Fusce malesuada sed velit ut dictum. Morbi faucibus vitae orci at euismod. Integer auctor augue in erat vehicula, quis fermentum ex finibus.",descriptionTwo:"Mauris pretium elit a dui pulvinar, in ornare sapien euismod. Nullam interdum nisl ante, id feugiat quam euismod commodo. Sed ultrices lectus ut iaculis rhoncus. Aenean non dignissim justo, at fermentum turpis. Sed molestie, ligula ut molestie ultrices, tellus ligula viverra neque, malesuada consectetur diam sapien volutpat risus. Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. ur ridiculus mus.",descriptionThree:"Sed dictum non nulla eu imperdiet. Duis elit libero, vulputate quis vehicula ut, vestibulum ut mauris. Nullam non felis varius dui rutrum rutrum in a nisi. Suspendisse elementum rutrum lorem sed luctus. Proin iaculis euismod metus non sollicitudin. Duis vel luctus lacus. Nullam faucibus iaculis convallis. In ullamcorper nibh ipsum, eget lacinia eros pulvinar a. Integer accumsan arcu nec faucibus ultricies.",category:"Food",text:"Curabitur porttitor orci eget neque accumsan venenatis. Nunc fermentum.",comments:[{id:0,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:1,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:2,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:3,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:4,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")},{id:5,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:6,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:7,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:8,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:9,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")}],images:["/images/news-eight.png","/images/news-eight.png"],date:new Date("2024-11-18"),tags:["Healthy"]},{id:9,img:"/images/news-nine.png",title:"Maecenas tempor urna sed quam mollis, a placerat dui fringill Suspendisse.",subTitle:"Maecenas lacinia felis nec placerat sollicitudin. Quisque placerat dolor at scelerisque imperdiet. Phasellus tristique felis dolor.",descriptionOne:"Maecenas elementum in risus sed condimentum. Duis convallis ante ac tempus maximus. Fusce malesuada sed velit ut dictum. Morbi faucibus vitae orci at euismod. Integer auctor augue in erat vehicula, quis fermentum ex finibus.",descriptionTwo:"Mauris pretium elit a dui pulvinar, in ornare sapien euismod. Nullam interdum nisl ante, id feugiat quam euismod commodo. Sed ultrices lectus ut iaculis rhoncus. Aenean non dignissim justo, at fermentum turpis. Sed molestie, ligula ut molestie ultrices, tellus ligula viverra neque, malesuada consectetur diam sapien volutpat risus. Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. ur ridiculus mus.",descriptionThree:"Sed dictum non nulla eu imperdiet. Duis elit libero, vulputate quis vehicula ut, vestibulum ut mauris. Nullam non felis varius dui rutrum rutrum in a nisi. Suspendisse elementum rutrum lorem sed luctus. Proin iaculis euismod metus non sollicitudin. Duis vel luctus lacus. Nullam faucibus iaculis convallis. In ullamcorper nibh ipsum, eget lacinia eros pulvinar a. Integer accumsan arcu nec faucibus ultricies.",category:"Meats",text:"Curabitur porttitor orci eget neque accumsan venenatis. Nunc fermentum.",comments:[{id:0,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:1,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:2,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:3,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:4,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")},{id:5,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:6,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:7,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:8,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:9,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")}],images:["/images/news-nine.png","/images/news-nine.png"],date:new Date("2024-11-18"),tags:["Healthy"]},{id:10,img:"/images/news-ten.png",title:"Maecenas tempor urna sed quam mollis, a placerat dui fringill Suspendisse.",subTitle:"Maecenas lacinia felis nec placerat sollicitudin. Quisque placerat dolor at scelerisque imperdiet. Phasellus tristique felis dolor.",descriptionOne:"Maecenas elementum in risus sed condimentum. Duis convallis ante ac tempus maximus. Fusce malesuada sed velit ut dictum. Morbi faucibus vitae orci at euismod. Integer auctor augue in erat vehicula, quis fermentum ex finibus.",descriptionTwo:"Mauris pretium elit a dui pulvinar, in ornare sapien euismod. Nullam interdum nisl ante, id feugiat quam euismod commodo. Sed ultrices lectus ut iaculis rhoncus. Aenean non dignissim justo, at fermentum turpis. Sed molestie, ligula ut molestie ultrices, tellus ligula viverra neque, malesuada consectetur diam sapien volutpat risus. Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. ur ridiculus mus.",descriptionThree:"Sed dictum non nulla eu imperdiet. Duis elit libero, vulputate quis vehicula ut, vestibulum ut mauris. Nullam non felis varius dui rutrum rutrum in a nisi. Suspendisse elementum rutrum lorem sed luctus. Proin iaculis euismod metus non sollicitudin. Duis vel luctus lacus. Nullam faucibus iaculis convallis. In ullamcorper nibh ipsum, eget lacinia eros pulvinar a. Integer accumsan arcu nec faucibus ultricies.",category:"Food",text:"Curabitur porttitor orci eget neque accumsan venenatis. Nunc fermentum.",comments:[{id:0,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:1,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:2,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:3,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:4,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")},{id:5,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:6,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:7,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:8,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:9,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")}],images:["/images/news-ten.png","/images/news-ten.png"],date:new Date("2024-11-18"),tags:["Healthy","Vegetarian"]},{id:11,img:"/images/news-eleven.png",title:"Maecenas tempor urna sed quam mollis, a placerat dui fringill Suspendisse.",subTitle:"Maecenas lacinia felis nec placerat sollicitudin. Quisque placerat dolor at scelerisque imperdiet. Phasellus tristique felis dolor.",descriptionOne:"Maecenas elementum in risus sed condimentum. Duis convallis ante ac tempus maximus. Fusce malesuada sed velit ut dictum. Morbi faucibus vitae orci at euismod. Integer auctor augue in erat vehicula, quis fermentum ex finibus.",descriptionTwo:"Mauris pretium elit a dui pulvinar, in ornare sapien euismod. Nullam interdum nisl ante, id feugiat quam euismod commodo. Sed ultrices lectus ut iaculis rhoncus. Aenean non dignissim justo, at fermentum turpis. Sed molestie, ligula ut molestie ultrices, tellus ligula viverra neque, malesuada consectetur diam sapien volutpat risus. Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. ur ridiculus mus.",descriptionThree:"Sed dictum non nulla eu imperdiet. Duis elit libero, vulputate quis vehicula ut, vestibulum ut mauris. Nullam non felis varius dui rutrum rutrum in a nisi. Suspendisse elementum rutrum lorem sed luctus. Proin iaculis euismod metus non sollicitudin. Duis vel luctus lacus. Nullam faucibus iaculis convallis. In ullamcorper nibh ipsum, eget lacinia eros pulvinar a. Integer accumsan arcu nec faucibus ultricies.",category:"Vegetables",text:"Curabitur porttitor orci eget neque accumsan venenatis. Nunc fermentum.",comments:[{id:0,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:1,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:2,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:3,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:4,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")},{id:5,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:6,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:7,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:8,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:9,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")}],images:["/images/news-eleven.png","/images/news-eleven.png"],date:new Date("2024-11-18"),tags:["Healthy"]},{id:12,img:"/images/news-twelve.png",title:"Maecenas tempor urna sed quam mollis, a placerat dui fringill Suspendisse.",subTitle:"Maecenas lacinia felis nec placerat sollicitudin. Quisque placerat dolor at scelerisque imperdiet. Phasellus tristique felis dolor.",descriptionOne:"Maecenas elementum in risus sed condimentum. Duis convallis ante ac tempus maximus. Fusce malesuada sed velit ut dictum. Morbi faucibus vitae orci at euismod. Integer auctor augue in erat vehicula, quis fermentum ex finibus.",descriptionTwo:"Mauris pretium elit a dui pulvinar, in ornare sapien euismod. Nullam interdum nisl ante, id feugiat quam euismod commodo. Sed ultrices lectus ut iaculis rhoncus. Aenean non dignissim justo, at fermentum turpis. Sed molestie, ligula ut molestie ultrices, tellus ligula viverra neque, malesuada consectetur diam sapien volutpat risus. Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. ur ridiculus mus.",descriptionThree:"Sed dictum non nulla eu imperdiet. Duis elit libero, vulputate quis vehicula ut, vestibulum ut mauris. Nullam non felis varius dui rutrum rutrum in a nisi. Suspendisse elementum rutrum lorem sed luctus. Proin iaculis euismod metus non sollicitudin. Duis vel luctus lacus. Nullam faucibus iaculis convallis. In ullamcorper nibh ipsum, eget lacinia eros pulvinar a. Integer accumsan arcu nec faucibus ultricies.",category:"Vegetables",text:"Curabitur porttitor orci eget neque accumsan venenatis. Nunc fermentum.",comments:[{id:0,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:1,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:2,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:3,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:4,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")},{id:5,userName:"Annette Black",userPhoto:"/images/user-photo.png",comment:"In a nisi commodo, porttitor ligula consequat, tincidunt dui. Nulla volutpat, metus eu aliquam malesuada, elit libero venenatis urna, consequat maximus arcu diam non diam.",date:new Date("2021-04-26")},{id:6,userName:"Devon Lane",userPhoto:"/images/user-photo-two.png",comment:"Quisque eget tortor lobortis, facilisis metus eu, elementum est. Nunc sit amet erat quis ex convallis suscipit. Nam hendrerit, velit ut aliquam euismod, nibh tortor rutrum nisi, ac sodales nunc eros porta nisi. Sed scelerisque, est eget aliquam venenatis, est sem tempor eros.",date:new Date("2021-04-24")},{id:7,userName:"Jacob Jones",userPhoto:"/images/user-photo-three.png",comment:"Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae.",date:new Date("2021-04-20")},{id:8,userName:"Jane Cooper",userPhoto:"/images/user-photo-four.png",comment:"Pellentesque feugiat, nibh vel vehicula pretium, nibh nibh bibendum elit, a volutpat arcu dui nec orci. Aenean dui odio, ullamcorper quis turpis ac, volutpat imperdiet ex.",date:new Date("2021-04-18")},{id:9,userName:"Darrell Steward",userPhoto:"/images/user-photo-five.png",comment:"Nulla molestie interdum ultricies.",date:new Date("2021-04-7")}],images:["/images/news-twelve.png","/images/news-twelve.png"],date:new Date("2024-11-18"),tags:["Healthy","Tiffin"]}];function kf(){return kf=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},kf.apply(this,arguments)}const Cf=function(e){return r.createElement("svg",kf({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 16 17"},e),df||(df=r.createElement("path",{stroke:"#00B307",strokeLinecap:"round",strokeLinejoin:"round",d:"M13.25 2.5H2.75A1.5 1.5 0 0 0 1.25 4v10.5a1.5 1.5 0 0 0 1.5 1.5h10.5a1.5 1.5 0 0 0 1.5-1.5V4a1.5 1.5 0 0 0-1.5-1.5M11 1v3M5 1v3M1.25 7h13.5"})))};function xf(){return React.createElement("section",{className:ff},React.createElement("h2",{className:Rf},"Recently Added"),React.createElement("div",{className:Nf},Sf.reverse().map((function(e,t){if(t<3)return React.createElement("div",{key:t,className:yf},React.createElement("div",{className:wf},React.createElement("img",{className:vf,src:e.img,alt:"image post"})),React.createElement("div",{className:hf},React.createElement("h3",{className:Ef},e.text),React.createElement("div",{className:bf},React.createElement(Cf,{className:gf}),React.createElement("h3",{className:pf},"".concat((a=e.date.getMonth(),["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][a])," ").concat(e.date.getDay(),", ").concat(e.date.getFullYear())))));var a}))))}$RefreshReg$(xf,"BlogRecentlyAdded");var Pf,Of,qf="widAo3qU",Af="REbsa4GX",Df="prp6XWaP",Mf="q5NAtXlb",jf="y1NiriiF",Tf="OEOndpgE",Lf="o3g6lOkc",If="tKTizaXC",Bf="QYIZMeuk",_f="sM6PXKyN",zf="lT7zxUiu",Ff="vboSUHSx",$f="I4RtRQhi",Vf="q3kyl66o",Hf="ZL91SJxA",Uf="DT2y97e5",Wf="WAaI3O4k",Jf="xvCObAXV",Qf="BPy97yzt";function Kf(){return Kf=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Kf.apply(this,arguments)}const Gf=function(e){return r.createElement("svg",Kf({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 18 18"},e),Pf||(Pf=r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.2,d:"m16.158 10.675-5.975 5.975a1.667 1.667 0 0 1-2.358 0L.667 9.5V1.167H9l7.158 7.158a1.667 1.667 0 0 1 0 2.35"})),Of||(Of=r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M4.833 5.333h.009"})))};var Yf;function Xf(){return Xf=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Xf.apply(this,arguments)}const Zf=function(e){return r.createElement("svg",Xf({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 16 14"},e),Yf||(Yf=r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.2,d:"m9.524 11.273-1.042 1.736a.563.563 0 0 1-.965 0l-1.04-1.736A.56.56 0 0 0 5.994 11H1.813a.563.563 0 0 1-.563-.562v-9a.563.563 0 0 1 .563-.563h12.375a.56.56 0 0 1 .562.563v9a.56.56 0 0 1-.562.562h-4.182a.56.56 0 0 0-.482.273"})))};function ep(e){var t=e.active,a=e.setActive,n=e.bannar,r=e.path;return React.createElement("div",{onMouseOver:function(){return a(n.id)},onMouseOut:function(){return a(null)},className:t!==n.id?qf:"".concat(qf," ").concat(Qf)},React.createElement("div",{className:zf},React.createElement("h3",{className:Df},n.date.getDate()),React.createElement("h3",{className:Mf},["JAN","FEB","MAR","APR","MAY","JUN","JUL","AUG","SEPT","OCT","NOV","DEC"][n.date.getMonth()])),React.createElement("div",{className:Jf},React.createElement("img",{className:Bf,src:n.img,alt:"Bannar news"})),React.createElement("div",{className:Wf},React.createElement("div",{className:Ff},React.createElement("h3",{className:$f},React.createElement(Gf,{stroke:"#B3B3B3",className:Lf}),n.category),React.createElement("h3",{className:Uf},React.createElement(ar,{stroke:"#B3B3B3",className:If}),"By Admin"),React.createElement("h3",{className:Af},React.createElement(Zf,{stroke:"#B3B3B3",className:Tf}),n.comments.length>0?"".concat(n.comments.length," Comments"):"0 Comments")),React.createElement("h2",{className:Hf},n.text.length<72?n.text:n.text.slice(0,72)),React.createElement(Ia,{to:r?"".concat(r).concat(n.id):"".concat(n.id),className:_f},React.createElement("h3",{className:Vf},"Read More"),React.createElement(Cs,{stroke:"#00B207",className:jf}))))}$RefreshReg$(ep,"Post");var tp=$RefreshSig$();function ap(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return np(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?np(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function np(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function rp(){tp();var e=ap((0,r.useState)(null),2),t=e[0],a=e[1],n=ap((0,r.useState)(10),2),i=n[0],l=(n[1],(0,r.useContext)(Do)),o=(0,r.useContext)(Mo),s=(0,r.useContext)(jo),c=(0,r.useContext)(To);(0,r.useEffect)((function(){window.scrollTo(0,0)}),[s.page]),(0,r.useEffect)((function(){c({type:"reset"}),o({})}),[]);var u=Sf.filter((function(e){return e.category.toLowerCase().includes(l.get("category")||"")})).filter((function(e){return l.get("tag")?e.tags.includes(l.get("tag")||""):e})).sort((function(e,t){return s.selectedSort.includes("olds")?t.date-e.date:s.selectedSort.includes("news")?e.date-t.date:void 0})),m=s.page*i,d=m-i,f=u.slice(d,m);return React.createElement("main",{className:"bfSkfo6A"},React.createElement(ra,null,React.createElement("meta",{charSet:"utf-8"}),React.createElement("title",null,"Blog")),React.createElement(Cc,{one:"Blog"}),React.createElement(Kc,{onePoint:"Date: olds",twoPoint:"Date: news",selected:s.selectedSort,setSelected:function(e){c({type:"selected",state:e.toLowerCase()})},filter:f,resetFilters:o,handleResetStates:function(){c({type:"reset"})}}),React.createElement("div",{className:"I9UjVzgk"},React.createElement("nav",{className:"JK6UEoT3"},React.createElement(Yd,null),React.createElement(Jd,{array:f,category:s,setCategory:function(e){c({type:"category",id:e})},filters:function(e){l.get("category")===e.toLowerCase()&&(l.get("tag")?o({tag:l.get("tag")}):o({})),l.get("category")!==e.toLowerCase()&&(l.get("tag")?o({category:e.toLowerCase(),tag:l.get("tag")}):o({category:e.toLowerCase()}))}}),React.createElement(nf,{filters:function(e){l.get("tag")===e&&(l.get("category")?o({category:l.get("category")}):o({})),l.get("tag")!==e&&(l.get("category")?o({category:l.get("category"),tag:e}):o({tag:e}))},reducer:s,setTag:function(e){c({type:"tag",id:e})}}),React.createElement(uf,null),React.createElement(xf,null)),React.createElement("section",{className:"Y6gzWEBe"},React.createElement("div",{className:"K7J474YV"},f.map((function(e){return React.createElement(ep,{key:e.id,active:t,setActive:a,bannar:e})}))),React.createElement(yd,{productPerPage:i,totalProducts:Sf.length,currentPage:s.page,setCurrentPage:function(e){c({type:"page",page:e})}}))))}tp(rp,"zUz9pstUJR2BEd+c8rEOaeXerXs="),$RefreshReg$(rp,"Blog");var ip,lp="LbwAMOCA",op="Qi7EzvFC",sp="TySN9nCs",cp="gTK89p2I",up="sY2DwvzG",mp="gtagSC7h",dp="_2GjboLfh",fp="IcleoDtH";function pp(){return pp=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},pp.apply(this,arguments)}const hp=function(e){return r.createElement("svg",pp({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 18 18"},e),ip||(ip=r.createElement("path",{d:"M18 18h-8v-6h8zM8 18H0V8h8zm10-8h-8V0h8zM8 6H0V0h8z"})))};var gp;function vp(){return vp=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},vp.apply(this,arguments)}const bp=function(e){return r.createElement("svg",vp({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 16 16"},e),gp||(gp=r.createElement("path",{d:"M0 16V9h7l-3.217 3.22A5.92 5.92 0 0 0 8 14a6 6 0 0 0 5.648-4h.018q.172-.489.259-1h2.012A8 8 0 0 1 8 16h-.01a7.94 7.94 0 0 1-5.653-2.34zm2.074-9H.062a8 8 0 0 1 7.933-7H8a7.94 7.94 0 0 1 5.654 2.34L16 0v7H9l3.222-3.22A5.92 5.92 0 0 0 8 2a6 6 0 0 0-5.648 4h-.018q-.173.489-.259 1z"})))};var yp;function Ep(){return Ep=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Ep.apply(this,arguments)}const Rp=function(e){return r.createElement("svg",Ep({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 20 20"},e),yp||(yp=r.createElement("path",{d:"M11.82 20H8.18a1 1 0 0 1-.977-.786l-.407-1.884a8 8 0 0 1-1.535-.887l-1.837.585a1 1 0 0 1-1.17-.453L.43 13.424a1.006 1.006 0 0 1 .193-1.239l1.425-1.3a8 8 0 0 1 0-1.772L.623 7.816a1.006 1.006 0 0 1-.193-1.24l1.82-3.153a1 1 0 0 1 1.17-.453l1.837.585q.367-.271.76-.5.38-.213.779-.386L7.204.787A1 1 0 0 1 8.18 0h3.64a1 1 0 0 1 .976.787l.412 1.883a8 8 0 0 1 1.534.887l1.838-.585a1 1 0 0 1 1.169.453l1.82 3.153c.233.407.152.922-.193 1.239l-1.425 1.3a8 8 0 0 1 0 1.772l1.425 1.3c.345.318.425.832.193 1.239l-1.82 3.153a1 1 0 0 1-1.17.453l-1.837-.585a8 8 0 0 1-1.534.886l-.412 1.879a1 1 0 0 1-.976.786m-6.2-5.771.82.6q.278.204.577.375.281.163.579.296l.933.409L8.986 18h2.03l.457-2.092.933-.409c.407-.18.794-.403 1.153-.666l.82-.6 2.042.65 1.015-1.758-1.583-1.443.112-1.012c.05-.443.05-.89 0-1.332l-.112-1.012 1.584-1.446-1.016-1.759-2.041.65-.821-.6a6.2 6.2 0 0 0-1.153-.671l-.933-.409L11.016 2h-2.03l-.46 2.092-.93.408a6 6 0 0 0-1.153.666l-.821.6-2.04-.65L2.565 6.88l1.583 1.441-.112 1.013c-.05.443-.05.89 0 1.332l.112 1.012-1.583 1.443 1.015 1.758zM9.996 14a4 4 0 1 1 0-8 4 4 0 0 1 0 8m0-6a2 2 0 1 0 2 2.09v.4V10a2 2 0 0 0-2-2"})))};var wp;function Np(){return Np=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Np.apply(this,arguments)}const Sp=function(e){return r.createElement("svg",Np({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 18 18"},e),wp||(wp=r.createElement("path",{d:"M16 18H7a2 2 0 0 1-2-2v-4h2v4h9V2H7v4H5V2a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2m-7-5v-3H0V8h9V5l5 4z"})))};function kp(){var e=function(e){return e.isActive?lp:fp};return React.createElement("nav",{className:op},React.createElement("h2",{className:mp},"Navigation"),React.createElement("div",{className:dp},React.createElement(Ba,{to:"dashboard",className:e},React.createElement(hp,{className:sp}),"Dashboard"),React.createElement(Ba,{to:"orderHistory",className:e},React.createElement(bp,{className:sp}),"Order History"),React.createElement(Ba,{to:"accountWishlist",className:e},React.createElement(jn,{className:cp}),"Wishlist"),React.createElement(Ba,{to:"shoppingCart",className:e},React.createElement(Hn,{className:cp}),"Shopping Cart"),React.createElement(Ba,{to:"settings",className:e},React.createElement(Rp,{className:sp}),"Settings"),React.createElement("div",{className:up},React.createElement(Sp,{className:sp,fill:"#b3afaf"}),"Log-out")))}$RefreshReg$(kp,"Nav");var Cp=$RefreshSig$();function xp(){Cp();var e=$e();return React.createElement("div",{className:"Dl6ciVS3"},React.createElement(ra,null,React.createElement("meta",{charSet:"utf-8"}),React.createElement("title",null,"Account")),React.createElement(Cc,{one:"Account",two:function(){switch(e.pathname){case"/account/dashboard":return"Dashboar";case"/account/orderHistory":return"Order History";case"/account/accountWishlist":return"Wishlist";case"/account/shoppingCart":return"Shopping Cart";case"/account/settings":return"Settings";default:return""}}()}),React.createElement("div",{className:"NS0yROmw"},React.createElement(kp,null),React.createElement(nt,null)))}Cp(xp,"pkHmaVRPskBaU4tMJuJJpV42k1I=",!1,(function(){return[$e]})),$RefreshReg$(xp,"Account");var Pp,Op="VBpC1fSy",qp="Lr8AHMZP",Ap="lEilQsWS",Dp="gf9aQpds",Mp="HPgiGaCK",jp="P3PeR0gz";function Tp(){return Tp=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Tp.apply(this,arguments)}const Lp=function(e){return r.createElement("svg",Tp({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 10 10"},e),Pp||(Pp=r.createElement("path",{stroke:"#1A1A1A",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M1 5h8M5 1v8z"})))};var Ip=$RefreshSig$();function Bp(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function _p(){Ip();var e,t,a=(e=(0,r.useState)(null),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Bp(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?Bp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),n=a[0],i=a[1];return(0,r.useEffect)((function(){window.scrollTo(0,0)}),[]),React.createElement("main",{className:"DF5125Cn"},React.createElement(ra,null,React.createElement("meta",{charSet:"utf-8"}),React.createElement("title",null,"Faqs")),React.createElement(Cc,{one:"Faqs"}),React.createElement("div",{className:"n95GSeaL"},React.createElement("div",{className:"_X3EzwaA"},React.createElement("h1",{className:"Uzj4MgFi"},"Welcome, Let's Talk About Our Ecobazar"),React.createElement("div",{className:"d1mfIurD"},React.createElement("div",{className:0!==n?Op:"".concat(Op," ").concat(qp)},React.createElement("div",{onClick:function(){0!==n&&i(0),0===n&&i(null)},className:Ap},React.createElement("h3",{className:Mp},"In elementum est a ante sodales iaculis."),React.createElement(Lp,{className:Dp})),React.createElement("p",{className:jp},"Morbi porttitor ligula in nunc varius sagittis. Proin dui nisi, laoreet ut tempor ac, cursus vitae eros. Cras quis ultricies elit. Proin ac lectus arcu. Maecenas aliquet vel tellus at accumsan. Donec a eros non massa vulputate ornare. Vivamus ornare commodo ante, at commodo felis congue vitae.")),React.createElement("div",{className:1!==n?Op:"".concat(Op," ").concat(qp)},React.createElement("div",{onClick:function(){1!==n&&i(1),1===n&&i(null)},className:Ap},React.createElement("h3",{className:Mp},"Etiam lobortis massa eu nibh tempor elementum."),React.createElement(Lp,{className:Dp})),React.createElement("p",{className:jp},"Morbi porttitor ligula in nunc varius sagittis. Proin dui nisi, laoreet ut tempor ac, cursus vitae eros. Cras quis ultricies elit. Proin ac lectus arcu. Maecenas aliquet vel tellus at accumsan. Donec a eros non massa vulputate ornare. Vivamus ornare commodo ante, at commodo felis congue vitae.")),React.createElement("div",{className:2!==n?Op:"".concat(Op," ").concat(qp)},React.createElement("div",{onClick:function(){2!==n&&i(2),2===n&&i(null)},className:Ap},React.createElement("h3",{className:Mp},"In elementum est a ante sodales iaculis."),React.createElement(Lp,{className:Dp})),React.createElement("p",{className:jp},"Morbi porttitor ligula in nunc varius sagittis. Proin dui nisi, laoreet ut tempor ac, cursus vitae eros. Cras quis ultricies elit. Proin ac lectus arcu. Maecenas aliquet vel tellus at accumsan. Donec a eros non massa vulputate ornare. Vivamus ornare commodo ante, at commodo felis congue vitae.")),React.createElement("div",{className:3!==n?Op:"".concat(Op," ").concat(qp)},React.createElement("div",{onClick:function(){3!==n&&i(3),3===n&&i(null)},className:Ap},React.createElement("h3",{className:Mp},"Aenean quis quam nec lacus semper dignissim."),React.createElement(Lp,{className:Dp})),React.createElement("p",{className:jp},"Morbi porttitor ligula in nunc varius sagittis. Proin dui nisi, laoreet ut tempor ac, cursus vitae eros. Cras quis ultricies elit. Proin ac lectus arcu. Maecenas aliquet vel tellus at accumsan. Donec a eros non massa vulputate ornare. Vivamus ornare commodo ante, at commodo felis congue vitae.")),React.createElement("div",{className:4!==n?Op:"".concat(Op," ").concat(qp)},React.createElement("div",{onClick:function(){4!==n&&i(4),4===n&&i(null)},className:Ap},React.createElement("h3",{className:Mp},"Nulla tincidunt eros id tempus accumsan."),React.createElement(Lp,{className:Dp})),React.createElement("p",{className:jp},"Morbi porttitor ligula in nunc varius sagittis. Proin dui nisi, laoreet ut tempor ac, cursus vitae eros. Cras quis ultricies elit. Proin ac lectus arcu. Maecenas aliquet vel tellus at accumsan. Donec a eros non massa vulputate ornare. Vivamus ornare commodo ante, at commodo felis congue vitae.")))),React.createElement("div",{className:"hp2BN6pv"},React.createElement("img",{className:"pjPFEYHJ",src:"/images/imageFaqs.png",alt:"image shop"}))))}Ip(_p,"jI2HbqGomc4nmRRLH4K/on0VeLA="),$RefreshReg$(_p,"Faqs");var zp=$RefreshSig$();function Fp(){return zp(),(0,r.useEffect)((function(){window.scrollTo(0,0)}),[]),React.createElement("main",{className:"GlyHbsGg"},React.createElement(Cc,{one:"404 Error Page"}),React.createElement(ra,null,React.createElement("meta",{charSet:"utf-8"}),React.createElement("title",null,"NotFoundPage")),React.createElement("div",{className:"GSWOGf4v"},React.createElement("div",{className:"FcjVp32t"},React.createElement("img",{className:"cMDpYu31",src:"/images/notFoundPage.png",alt:"Not Found Page"})),React.createElement("div",{className:"UzPLILFr"},React.createElement("h2",{className:"ifYrtfpq"},"Oops! page not found"),React.createElement("h4",{className:"a6bBd9WW"},"Ut consequat ac tortor eu vehicula. Aenean accumsan purus eros. Maecenas sagittis tortor at metus mollis")),React.createElement(Ia,{to:"/",className:"SmXpQzRN"},"Back to Home")))}zp(Fp,"OD7bBpZva5O2jO+Puf00hKivP7c="),$RefreshReg$(Fp,"NotFoundPage");var $p="sB3NS7Cw",Vp="OBKskfUo",Hp="ctONfTrh",Up="t1laDgOr",Wp="DsKTFawL",Jp=[{id:0,img:"images/bannarBig.png"},{id:1,img:"images/bannarLow.png"},{id:2,img:"images/bannarLowTwo.png"}];function Qp(){var e=Jp.map((function(e){return React.createElement("img",{className:Wp,src:e.img,alt:"Banner",key:e.id})}));return React.createElement("section",{className:$p},React.createElement("div",{className:Vp},e[0],React.createElement(cc,{colorArrow:"#00B207"})),React.createElement("div",{className:Hp},e[1],React.createElement(cc,{colorArrow:"#00B207"})),React.createElement("div",{className:Up},e[2]))}$RefreshReg$(Qp,"Banners");var Kp="AUj6aMFn",Gp="ONFrLv70",Yp="Wrh1xHYE",Xp="n3wcPMPI",Zp="Fp46xgp1",eh="pazt52hC",th="LwOTkxZv",ah="GsjLaLrY",nh="FnaYm9rw";function rh(){return React.createElement("section",{className:Kp},React.createElement("div",{className:eh},React.createElement(Js,{className:Zp}),React.createElement("div",{className:th},React.createElement("h2",{className:nh},"Free Shipping"),React.createElement("p",{className:ah},"Free shipping on all your order"))),React.createElement("div",{className:eh},React.createElement(Gs,{className:Gp}),React.createElement("div",{className:th},React.createElement("h2",{className:nh},"Customer Support 24/7"),React.createElement("p",{className:ah},"Instant access to Support"))),React.createElement("div",{className:eh},React.createElement(ec,{className:Xp}),React.createElement("div",{className:th},React.createElement("h2",{className:nh},"100% Secure Payment"),React.createElement("p",{className:ah},"We ensure your money is save"))),React.createElement("div",{className:eh},React.createElement(nc,{className:Yp}),React.createElement("div",{className:th},React.createElement("h2",{className:nh},"Money-Back Guarantee"),React.createElement("p",{className:ah},"30 Days Money-Back Guarantee"))))}$RefreshReg$(rh,"FeaturesStore");var ih="Anoj56p4",lh="ZYB8_TgZ",oh="mfKCDQVW",sh="yrncTWsQ",ch="RefGJNO1",uh="QMcfzXxF",mh="WBfzzbT3",dh="uvWcaozG",fh="KWPjsGmm",ph="KuQgbjk7",hh="uAHREsng",gh="McQMTt4R",vh=$RefreshSig$();function bh(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function yh(){vh();var e,t,a=(e=(0,r.useState)(null),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return bh(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?bh(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),n=a[0],i=a[1],l=cu.filter((function(e){return e.id<=11}));return React.createElement("section",{className:ch},React.createElement("div",{className:dh},React.createElement("div",{className:gh},React.createElement("h1",{className:ph},"Popular Categories")),React.createElement("div",{className:hh},React.createElement(Ia,{to:"/shop"},React.createElement("span",{className:fh},"View All"),React.createElement(Cs,{stroke:"#00B207",className:uh})))),React.createElement("div",{className:mh},l.map((function(e){return React.createElement(Ia,{onMouseOver:function(){return i(e.id)},onMouseOut:function(){return i(null)},key:e.id,to:"shop"},React.createElement("div",{className:n!==e.id?ih:"".concat(ih," ").concat(sh)},React.createElement("img",{className:lh,src:e.img,alt:"CardGoods"}),React.createElement("h2",{className:oh},e.name)))}))))}vh(yh,"UiziKGcot5E8nbuQQ2ZlRLdhk5k="),$RefreshReg$(yh,"PopularCategories");var Eh="oa4IU2o4",Rh="XS_Ww8aw",wh="KqA14xox",Nh="MG78i73X",Sh="z546LHqf",kh="PDh51J1k",Ch="rwQAIhXW",xh="kZ4ASBhn",Ph=[];function Oh(){return React.createElement("section",{className:Eh},React.createElement("div",{className:wh},React.createElement("h1",{className:Sh},"Popular Products"),React.createElement("div",{className:kh},React.createElement(Ia,{to:"shop",className:Ch},React.createElement("p",{className:xh},"View All"),React.createElement(Cs,{stroke:"#00B207",className:Nh})))),React.createElement("div",{className:Rh},Ph.map((function(e){return React.createElement(nd,{path:"shop/",key:e.id,product:e})}))))}$RefreshReg$(Oh,"PopularProducts");var qh="CviU74Qr",Ah="_1RO0p7bl",Dh="rLr5VB_w",Mh=[{id:0,image:"images/Bannar-stock-one.png"},{id:1,image:"images/Bannar-stock-two.png"},{id:2,image:"images/Bannar-stock-three.png"}];function jh(){return React.createElement("section",{className:qh},Mh.map((function(e){return React.createElement("div",{key:e.id,className:Dh},React.createElement("img",{className:Ah,src:e.image,alt:"image Stock"}),React.createElement(cc,{colorArrow:"#00B207"}))})))}$RefreshReg$(jh,"Stocks");var Th="QgkkVhLD",Lh="PDelkRoK",Ih="GNOQc1gP",Bh="FMr96so2",_h="w8eKfujF",zh="xx3YBfni",Fh="eaWV6zIR",$h="eRIcGirp",Vh=[],Hh="zzR1jk9N",Uh="xFiRxHS_",Wh="E1lXMZ7_",Jh="iWH0ZOiC",Qh="evViBeP8",Kh="U2Lqlr6h",Gh="HIALCqWw",Yh="njWKpMOD",Xh="RVUt7ZdQ",Zh="b0vPesHd",eg="C4mVQOJe",tg="uabYlI0I",ag="HqPNWi2g",ng="iqwcq72A",rg="LPIUoB3O",ig="jHtMdhuL",lg="t8M_nATO",og="ur028NFb",sg="eY4E3ZpN",cg="n1hmRYha",ug="hvWgOB6t",mg="asyAgkzX",dg="W6cC10jM",fg="b6p8Gq5n",pg="Gc_XbuM2",hg="T7bbE93n",gg="vsVXN3la",vg="rJ_6Zcpw",bg="XXoVxEy2";function yg(e){var t=e.product,a=e.active,n=e.setActive;return React.createElement("article",{onMouseOver:function(){return n(t.id)},onMouseOut:function(){return n(null)},className:a!==t.id?Hh:"".concat(Hh," ").concat(bg)},React.createElement(ed,{product:t}),React.createElement("div",{className:dg},"Best Sale"),React.createElement("div",{className:gg},React.createElement("div",{className:hg},React.createElement(io,null),React.createElement(ao,null),React.createElement(Ym,{id:t.id})),React.createElement("img",{src:t.pictures[1],alt:"image product"})),React.createElement(Ia,{to:"shop/".concat(t.id,"/description"),className:vg},React.createElement("h1",{className:pg},t.name),React.createElement("div",{className:tg},React.createElement("h2",{className:lg},t.price),React.createElement("h2",{className:ig},t.oldPrice)),React.createElement("div",{className:ng},React.createElement(Ml,{card:t}),React.createElement("h2",{className:Gh},"(".concat(t.feedback.length," Feedback)"))),React.createElement("div",{className:Yh},React.createElement("h3",{className:sg},"Hurry up! Offer ends in:"),React.createElement("div",{className:Kh},React.createElement("div",{className:Xh},React.createElement("h3",{className:Uh},"01"),React.createElement("h3",{className:cg},"DAYS")),React.createElement("div",{className:rg},React.createElement("div",{className:Zh},React.createElement("h3",{className:Wh},"23"),React.createElement("h3",{className:ug},"HOURS")),React.createElement("div",{className:og},":"),React.createElement("div",{className:eg},React.createElement("h3",{className:Jh},"34"),React.createElement("h3",{className:mg},"MINS")),React.createElement("div",{className:og},":"),React.createElement("div",{className:ag},React.createElement("h3",{className:Qh},"57"),React.createElement("h3",{className:fg},"SECS")))))))}$RefreshReg$(yg,"BestSale");var Eg=$RefreshSig$();function Rg(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function wg(){Eg();var e,t,a=(e=(0,r.useState)(null),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Rg(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?Rg(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),n=a[0],i=a[1],l=Vh.filter((function(e,t){return t>0}));return React.createElement("section",{className:Th},React.createElement("div",{className:zh},React.createElement("div",{className:Bh},React.createElement("h1",{className:$h},"Hot Deals")),React.createElement(Ia,{to:"shop",className:Ih},React.createElement("h3",{className:Fh},"View All"),React.createElement(Cs,{stroke:"#00B207",className:Lh}))),React.createElement("div",{className:_h},React.createElement(yg,{active:n,product:Vh[0],setActive:i}),l.map((function(e){return React.createElement(nd,{path:"shop/",product:e,key:e.id})}))))}Eg(wg,"UiziKGcot5E8nbuQQ2ZlRLdhk5k="),$RefreshReg$(wg,"HotDeals");var Ng="PpxQmy3o",Sg="gP37QX5L",kg="gjTkVxT9",Cg=[{id:0,name:"home",img:"/images/advertising.png"},{id:1,name:"singleBlog",img:"/images/advertising-one.png"}];function xg(){return React.createElement("section",{className:Ng},Cg.map((function(e){if(0===e.id)return React.createElement("div",{key:e.id,className:kg},React.createElement("img",{className:Sg,src:e.img,alt:"advertising image"}),React.createElement(cc,{colorArrow:"#ffffff"}))})))}$RefreshReg$(xg,"Advertising");var Pg="YS9XTNWu",Og="gL4SvNIe",qg="blam_bqr",Ag="hrjLi5YG",Dg="CGv7oFFy",Mg="JpCG1Ibs",jg="hj3FNFS0";function Tg(){return React.createElement("section",{className:Pg},React.createElement("div",{className:Og},React.createElement("h1",{className:Mg},"Featured Products"),React.createElement(Ia,{to:"shop",className:Ag},React.createElement("h3",{className:Dg},"View All"),React.createElement(Cs,{className:qg,stroke:"#00B207"}))),React.createElement("div",{className:jg},Bi.map((function(e,t){if(t<=4)return React.createElement(nd,{path:"shop/",key:e.id,product:e})}))))}$RefreshReg$(Tg,"FeaturedProducts");var Lg="bP5fW4c9",Ig="qjhYaOwr",Bg="hzxhrvqy",_g=$RefreshSig$();function zg(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function Fg(){_g();var e,t,a=(e=(0,r.useState)(null),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return zg(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?zg(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),n=a[0],i=a[1];return React.createElement("section",{className:Lg},React.createElement("h1",{className:Ig},"Latest News"),React.createElement("div",{className:Bg},Sf.map((function(e){if(e.id<3)return React.createElement(ep,{path:"blog/",key:e.id,bannar:e,active:n,setActive:i})}))))}_g(Fg,"UiziKGcot5E8nbuQQ2ZlRLdhk5k="),$RefreshReg$(Fg,"LatestNews");var $g="wevsGGwT",Vg="_DevUb3k",Hg="vLw3dBpr",Ug="J5VStIJn",Wg="ndTXmgS4",Jg="keSXq8Xl",Qg="K27wHWjd",Kg="XzkSogPM",Gg=[{id:0,img:"images/Instagram Post-one.png"},{id:1,img:"images/Instagram Post-two.png"},{id:2,img:"images/Instagram Post-three.png"},{id:3,img:"images/Instagram Post-four.png"},{id:4,img:"images/Instagram Post-five.png"},{id:5,img:"images/Instagram Post-one.png"}],Yg=$RefreshSig$();function Xg(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function Zg(){Yg();var e,t,a=(e=(0,r.useState)(null),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Xg(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?Xg(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),n=a[0],i=a[1];return React.createElement("section",{className:$g},React.createElement("p",{className:Jg},"Follow us on Instagram"),React.createElement("div",{className:Qg},Gg.map((function(e,t){if(t<6)return React.createElement(Ia,{onMouseOver:function(){return i(e.id)},onMouseOut:function(){return i(null)},key:e.id,className:Kg,to:"https://www.instagram.com/"},React.createElement("div",{className:n!==e.id?Vg:"".concat(Vg," ").concat(Hg)},React.createElement(ii,{fill:"#ffffff",className:Ug})),React.createElement("img",{className:Wg,src:e.img,alt:"image instagram"}))}))))}function ev(){return React.createElement("main",{className:"Fbzsv4JG"},React.createElement(Qp,null),React.createElement(rh,null),React.createElement(yh,null),React.createElement(Oh,null),React.createElement(jh,null),React.createElement(wg,null),React.createElement(xg,null),React.createElement(Tg,null),React.createElement(Fg,null),React.createElement(As,null),React.createElement(Bs,null),React.createElement(Zg,null))}Yg(Zg,"gDJwyYyohEUNtND+y+jSDUuYDYs="),$RefreshReg$(Zg,"InstagramSection"),$RefreshReg$(ev,"Home");var tv="WO9xuz0u",av="fE3LrjRU",nv="yotnXcD6",rv="Y0_OqOan",iv="s8ErvCMp",lv="shF0HLrE",ov="jX6fJ0ce",sv="Ev_F3eQH",cv="sO2447K6",uv="UeHdRxXE",mv="QBLNg_0x",dv="MlVabZJW",fv="YTQdIU51",pv="bxSiVq55",hv="VsGxhtUX",gv="Dze5723c",vv="RKXI9KZv",bv="CxA_L8r9",yv="HElDs89G",Ev="RO2pjqW9",Rv="MlB_cdCq",wv="fxQoecjv",Nv="P4Kt6Xke",Sv="pCJdaOEX",kv="wrfd4sbs",Cv="QjsQ2skk",xv="wWagh1uV",Pv="OGZOD2wh";function Ov(e){var t=e.product,a=e.index,n=100-t.price.slice(1)/t.oldPrice.slice(1)*100;return React.createElement("section",{className:tv},React.createElement("div",{className:Sv},React.createElement("img",{className:lv,src:"/".concat(t.pictures[a]),alt:"Big image"})),React.createElement("div",{className:sv},React.createElement("div",{className:fv},React.createElement("h1",{className:wv},t.name),React.createElement("h3",{className:t.inStock?Pv:xv},t.inStock?"In Stock":"Out of Stock")),React.createElement("div",{className:uv},React.createElement(Ml,{card:t}),React.createElement("h3",{className:iv},"".concat(t.feedback.length," Review")),React.createElement("h3",{className:vv},React.createElement("b",null,"SKU:")," 2,51,594")),React.createElement("div",{className:kv},React.createElement("h2",{className:!0!==t.oldPrice?hv:"".concat(hv," ").concat(gv)},t.price),React.createElement("h2",{className:pv},t.oldPrice),React.createElement("h2",{className:rv},t.oldPrice?"".concat(n.toFixed(0),"% Off"):"")),React.createElement("div",{className:Cv},React.createElement("div",{className:cv},React.createElement("h3",{className:av},React.createElement("strong",null,"Brand:")),React.createElement("img",{className:ov,src:"/".concat(t.imgBrand),alt:"image brand"})),React.createElement("div",{className:mv},React.createElement("h3",{className:Rv},"Share item:"),React.createElement(li,null))),React.createElement("p",{className:Ev},t.description),React.createElement("div",{className:Nv},React.createElement(Yl,null),React.createElement(ao,null),React.createElement(io,null)),React.createElement("h3",{className:nv},React.createElement("span",null,"Category:"),t.category),React.createElement("div",{className:dv},React.createElement("span",{className:yv},"Tag:"),t.tags.map((function(e,t){return React.createElement("span",{key:t,className:bv},e)})))))}$RefreshReg$(Ov,"InfoProduct");var qv="mrFM2NHz",Av="Ge2PqENX",Dv="oQBptWLg",Mv="w0lzF_VX",jv="xJv_Dbhw",Tv="CeG1Vp1I",Lv="y1llelee",Iv="Okmd8kAS";function Bv(e){var t=e.product,a=e.setIndex,n=e.index;return React.createElement("section",{className:qv},React.createElement("div",{className:Lv},React.createElement(Hl,{stroke:"#1a1a1a",onClick:function(){a(n>0?n-1:3)},className:Dv})),React.createElement("div",{className:Iv},t.pictures.map((function(e,t){if(t<4)return React.createElement("img",{onMouseDown:function(e){e.preventDefault()},onClick:function(){return a(t)},className:t!==n?Mv:"".concat(Mv," ").concat(jv),key:t,src:"/".concat(e),alt:"mini image"})}))),React.createElement("div",{className:Tv},React.createElement(Pn,{stroke:"#1a1a1a",onClick:function(){a(n<3?n+1:0)},className:Av})))}$RefreshReg$(Bv,"SliderImage");var _v="fcvabtfC",zv="HwgUMvD6",Fv="hpMLAgHH",$v="rpxmyfB7";function Vv(){return React.createElement("section",{className:_v},React.createElement("div",{className:$v},React.createElement("h1",{className:zv},"Related Products")),React.createElement("div",{className:Fv},Bi.map((function(e,t){if(t<=3)return React.createElement(nd,{key:t,product:e,path:"/shop/"})}))))}$RefreshReg$(Vv,"RelatedProducts");var Hv=$RefreshSig$();function Uv(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function Wv(){Hv();var e,t,a=We().id,n=Bi.find((function(e){return e.id==a})),i=(e=(0,r.useState)(0),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Uv(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?Uv(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=i[0],o=i[1],s=function(e){return e.isActive?"JpgsTVlV":"uBgpj8mt"};return(0,r.useEffect)((function(){window.scrollTo(0,0)}),[]),React.createElement("main",{className:"zOs4pByi"},React.createElement(ra,null,React.createElement("meta",{charSet:"utf-8"}),React.createElement("title",null,"Product")),React.createElement(Cc,{one:"Category",two:n.category,three:n.name}),React.createElement("div",{className:"RhspMvCq"},React.createElement(Bv,{index:l,setIndex:o,product:n}),React.createElement(Ov,{product:n,index:l})),React.createElement("div",{className:"R08PrGhO"},React.createElement(Ba,{className:s,to:"description"},"Descriptions"),React.createElement(Ba,{className:s,to:"information"},"Additional Information"),React.createElement(Ba,{className:s,to:"feedback"},"Customer Feedback")),React.createElement("div",{className:"LRRGHilY"},React.createElement(nt,null)),React.createElement(Vv,null))}Hv(Wv,"YDHBYU3jdvopLAVsK3ccAsMB9ds=",!1,(function(){return[We]})),$RefreshReg$(Wv,"Product");var Jv,Qv,Kv="O5yISir9",Gv="ATltgvgf",Yv="ST_yS770",Xv="FC4l49rH";function Zv(){return Zv=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},Zv.apply(this,arguments)}const eb=function(e){return r.createElement("svg",Zv({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 26 33"},e),Jv||(Jv=r.createElement("path",{fill:"#00B307",d:"M25.067 24.75c.259 0 .469-.21.469-.469v-11.25c0-.56-.218-1.132-.614-1.611l-3.477-4.212a2.8 2.8 0 0 0-.619-.555 5 5 0 0 0 .022-.434V.969a.469.469 0 0 0-.937 0l-.001 5.317a2.3 2.3 0 0 0-.405-.036h-6.063c-.427 0-.845.12-1.22.34l-.048.02-4.569 2.226a2.45 2.45 0 0 0-1.147 1.216l-1.89 4.792a.469.469 0 0 0 .873.344l1.885-4.783c.142-.317.39-.576.694-.729L10.435 8.5l-2.41 2.92c-.36.437-.552.994-.552 1.611V29.22q.001.282.047.553l-4.83-2.14a2.173 2.173 0 0 1-1.102-2.863l.006-.014 3.055-7.593a.469.469 0 1 0-.87-.35L.727 24.398a3.11 3.11 0 0 0 1.583 4.09l5.664 2.51.021.008a3.2 3.2 0 0 0 2.697 1.494h11.563c1.778 0 3.28-1.503 3.28-3.281v-2.75a.469.469 0 0 0-.937 0v2.75c0 1.27-1.073 2.344-2.343 2.344H10.692c-1.258 0-2.281-1.052-2.281-2.344V13.03c0-.402.113-.744.337-1.014l3.476-4.213c.324-.392.768-.616 1.218-.616h6.063q.132 0 .263.025a3.53 3.53 0 0 1-2.002 2.254 1.47 1.47 0 1 0 .196.932 4.47 4.47 0 0 0 2.642-2.725q.061.062.118.13l3.477 4.213c.257.312.4.672.4 1.014v11.25c0 .26.21.47.468.47m-8.562-14a.532.532 0 1 1 .001-1.064.532.532 0 0 1-.001 1.064"})),Qv||(Qv=r.createElement("path",{fill:"#00B307",d:"M12.442 25.438c.12 0 .24-.046.332-.138l8-8a.469.469 0 1 0-.663-.663l-8 8c-.299.279-.07.815.331.8M13.441 20.5c1.12 0 2.032-.911 2.032-2.031s-.912-2.032-2.032-2.032h-.062c-1.12 0-2.031.912-2.031 2.032s.91 2.031 2.03 2.031zm-1.156-2.031c0-.603.49-1.094 1.094-1.094h.062a1.095 1.095 0 0 1 0 2.188h-.062c-.603 0-1.094-.491-1.094-1.094M19.504 25.438h.062c1.12 0 2.032-.912 2.032-2.032s-.912-2.031-2.032-2.031h-.062c-1.12 0-2.031.911-2.031 2.031s.91 2.032 2.03 2.032m0-3.125h.062c.604 0 1.094.49 1.094 1.093s-.49 1.094-1.094 1.094h-.062a1.095 1.095 0 0 1 0-2.187"})))};var tb;function ab(){return ab=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},ab.apply(this,arguments)}const nb=function(e){return r.createElement("svg",ab({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 32 31"},e),tb||(tb=r.createElement("path",{fill:"#00B307",d:"M31.976.371a.49.49 0 0 0-.442-.334c-1.02-.042-3.806-.035-7.652.948-3.58.916-6.939 2.42-9.715 4.352a.486.486 0 0 0 .556.798c2.68-1.866 5.932-3.321 9.4-4.208a32 32 0 0 1 3.906-.74c-.52.224-1.079.487-1.66.796-3.929 2.086-6.124 4.753-7.337 6.896a10 10 0 0 1-.203-1.903.486.486 0 0 0-.972 0c0 .215.017 2.007.56 3.112a205 205 0 0 0-2.125 4.74q-.43.987-.852 1.937a7.77 7.77 0 0 1-.856-4.27.486.486 0 0 0-.969-.078c-.227 2.805.888 4.763 1.34 5.431-.848 1.874-1.684 3.6-2.565 5.074-.453-1.027-1.164-2.983-1.164-5.162a.486.486 0 0 0-.972 0c0 2.89 1.118 5.347 1.52 6.137-.962 1.438-1.99 2.563-3.15 3.247-3.536-3.84-3.881-11.045 2.296-17.717a23 23 0 0 1 2.29-2.151.486.486 0 1 0-.615-.752 24 24 0 0 0-2.388 2.243c-6.516 7.037-6.149 14.708-2.413 18.91-3.253 2.19-7.279 2.326-7.321 2.327a.486.486 0 0 0 .026.972c.186-.005 4.48-.146 7.998-2.603 1.066.87 2.738 1.399 4.765 1.399 2.295 0 5.045-.678 7.886-2.308 2.632-1.51 4.519-3.82 5.608-6.866.933-2.608 1.248-5.746.91-9.075-.602-5.934 1.64-8.611 4.152-10.621a.49.49 0 0 0 .158-.53m-4.293 3.975c-.956 2.001-1.278 4.381-.984 7.275.323 3.186.026 6.177-.858 8.65-1.01 2.822-2.751 4.958-5.177 6.35-3.06 1.756-5.63 2.154-7.246 2.178-1.652.026-3.081-.326-4.04-.98.798-.517 1.53-1.211 2.219-2.05h.124c.478 0 1.367-.02 2.416-.142 2.098-.245 3.753-.763 4.917-1.54a.486.486 0 0 0-.539-.808c-1.794 1.196-4.683 1.455-6.174 1.507.946-1.349 1.816-2.968 2.675-4.76.845-.003 3.088-.185 5.22-1.886a.486.486 0 0 0-.605-.76 7.74 7.74 0 0 1-4.147 1.65c.56-1.213 1.12-2.493 1.698-3.812q.446-1.021.91-2.067l.105.002c.733 0 2.191-.18 3.794-1.367a.486.486 0 1 0-.578-.78c-.99.732-1.9 1.007-2.49 1.11q-.214.035-.391.05.424-.944.869-1.89c1.81-3.84 5.022-6.155 7.398-7.42a22 22 0 0 1 2.789-1.243 10.6 10.6 0 0 0-1.905 2.733"})))};var rb=$RefreshSig$();function ib(){rb();var e=We().id,t=Bi.find((function(t){return t.id==e}));return React.createElement("section",{className:"swn2fW0D"},React.createElement("div",{className:"JmDeEqiR"},React.createElement("div",{className:"W1WFHgy9"},React.createElement("h3",{className:"mLQLJAPK"},t.fullDescription)),React.createElement("div",{className:"uyFlpkq3"},t.features.map((function(e){return React.createElement("div",{className:"fn13IjmQ"},React.createElement("div",{className:"uFnDo8iz"},React.createElement(lc,{stroke:"white",className:"yeToQ9Dt"})),React.createElement("h3",{className:"zSygLMFz"},e))})))),React.createElement("div",{className:"z1W3I7iP"},React.createElement("iframe",{className:"eJ0WVlJk",src:"https://www.youtube.com/embed/ScP-j6hELzY?si=WGRMnj3uLoE_6e7F",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:!0}),React.createElement("div",{className:"y4n9mJP9"},React.createElement("div",{className:Yv},React.createElement(eb,{className:"lQUgjQtL"}),React.createElement("div",{className:Xv},React.createElement("h3",{className:Gv},"64% Discount"),React.createElement("h2",{className:Kv},"Save your 64% money with us"))),React.createElement("div",{className:Yv},React.createElement(nb,{className:"OJJKblNB"}),React.createElement("div",{className:Xv},React.createElement("h3",{className:Gv},"100% Organic"),React.createElement("h2",{className:Kv},"100% Organic Vegetables"))))))}rb(ib,"yQgCIz/jJfqV1l9s2yoba81MT5A=",!1,(function(){return[We]})),$RefreshReg$(ib,"Descriptions");var lb="jSLlSyIT",ob="QQceeBOk",sb="EpPaUotj",cb="uQ1GxzJN",ub="sKxAHRNQ",mb="bJFtTFMw",db=$RefreshSig$();function fb(){db();var e=We().id,t=Bi.find((function(t){return t.id==e}));return React.createElement("section",{className:"dIs7rLrx"},React.createElement("div",{className:"FkPVcUwR"},React.createElement("div",{className:"STg0nOXz"},React.createElement("h3",{className:mb},"Weight:"),React.createElement("h3",{className:mb},"Color:"),React.createElement("h3",{className:mb},"Type:"),React.createElement("h3",{className:mb},"Category:"),React.createElement("h3",{className:mb},"Stock Status:"),React.createElement("h3",{className:mb},"Tags:")),React.createElement("div",{className:"gF3YXvl2"},React.createElement("h3",{className:lb},t.weight),React.createElement("h3",{className:lb},t.color),React.createElement("h3",{className:lb},t.type),React.createElement("h3",{className:lb},t.category),React.createElement("h3",{className:lb},!0===t.inStock?"Available":""),React.createElement("div",{className:"W_ulHgG8"},t.tags.map((function(e){return React.createElement("h3",{className:"o4jm4N7w"},"".concat(e,","))}))))),React.createElement("div",{className:"k23p4MCt"},React.createElement("iframe",{className:"G7B4fn5Q",src:"https://www.youtube.com/embed/ScP-j6hELzY?si=WGRMnj3uLoE_6e7F",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:!0}),React.createElement("div",{className:"cABDqN4L"},React.createElement("div",{className:cb},React.createElement(eb,{className:"CjoSkKi0"}),React.createElement("div",{className:ub},React.createElement("h3",{className:sb},"64% Discount"),React.createElement("h2",{className:ob},"Save your 64% money with us"))),React.createElement("div",{className:cb},React.createElement(nb,{className:"OqV343Tk"}),React.createElement("div",{className:ub},React.createElement("h3",{className:sb},"100% Organic"),React.createElement("h2",{className:ob},"100% Organic Vegetables"))))))}db(fb,"yQgCIz/jJfqV1l9s2yoba81MT5A=",!1,(function(){return[We]})),$RefreshReg$(fb,"InformationProduct");var pb="hl0ikttp",hb="En2Z8xaC";function gb(e){var t=e.stars;return React.createElement("div",{className:pb},React.createElement(Dl,{className:hb,fill:t>=1?"#FF8A00":"#CCCCCC"}),React.createElement(Dl,{className:hb,fill:t>=2?"#FF8A00":"#CCCCCC"}),React.createElement(Dl,{className:hb,fill:t>=3?"#FF8A00":"#CCCCCC"}),React.createElement(Dl,{className:hb,fill:t>=4?"#FF8A00":"#CCCCCC"}),React.createElement(Dl,{className:hb,fill:t>=5?"#FF8A00":"#CCCCCC"}))}$RefreshReg$(gb,"UserRating");var vb=$RefreshSig$();function bb(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function yb(){vb();var e,t,a=(e=(0,r.useState)(3),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return bb(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?bb(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),n=a[0],i=a[1],l=We().id,o=Bi.find((function(e){return e.id==l})).feedback.filter((function(e,t){return t<=n}));return React.createElement("section",{className:"TmfEG3_P"},React.createElement("div",{className:"bTLXWZGx"},o.map((function(e,t){return React.createElement("div",{key:t,className:"yFqm3fnC"},React.createElement("div",{className:"_3OgWFIT"},React.createElement("h3",{className:"LXUSCXzO"},e.name),React.createElement(gb,{stars:e.stars})),React.createElement("h3",{className:"y5etwHfs"},e.text))}))),React.createElement("div",{onClick:function(){return i(n+4)},className:"Dtuqm_yO"},"Load More"))}vb(yb,"/Nq2XoxojnzqYD/mt8oZsUzbz0Q=",!1,(function(){return[We]})),$RefreshReg$(yb,"Feedback");var Eb="a3jrz5oI",Rb="mZyZujNq",wb="ZjA5OQrT",Nb="MYm7S4tm",Sb="Ldr2o0zz";function kb(){return React.createElement("section",{className:Eb},React.createElement("h1",{className:Nb},"Top Categories"),React.createElement("div",{className:Sb},cu.map((function(e){return React.createElement("div",{key:e.id,className:Rb},React.createElement(Ia,{to:"/blog",className:wb},e.name))}))))}$RefreshReg$(kb,"PostCategories");var Cb="L9QhCGwb",xb="ay6_HKq3",Pb="jBLvtGsR",Ob="xplNzRhB";function qb(){return React.createElement("section",{className:Cb},React.createElement("h2",{className:Pb},"Our Gallery"),React.createElement("div",{className:Ob},Ab.map((function(e,t){return React.createElement("img",{className:xb,key:t,src:e,alt:"image gallery"})}))))}var Ab=["/images/gallery-one.png","/images/gallery-two.png","/images/gallery-three.png","/images/gallery-four.png","/images/gallery-five.png","/images/gallery-six.png","/images/gallery-seven.png","/images/gallery-eight.png"];$RefreshReg$(qb,"PostGallery");var Db="iO06l6hs",Mb="pqjctQzw",jb="uP8M9E26",Tb="wlg3gs5R",Lb="tyltUUhG",Ib="mKNpcYe4",Bb="qrjTJVuE",_b="B5l9AV6h",zb="JSAFelAy",Fb="hp4Im8pl",$b="ML32u67a";function Vb(){return React.createElement("section",{className:Db},React.createElement("h2",{className:zb},"Recently Added"),React.createElement("div",{className:$b},Sf.reverse().map((function(e,t){if(t<3)return React.createElement("div",{key:t,className:Bb},React.createElement("div",{className:Fb},React.createElement("img",{className:Lb,src:e.img,alt:"image post"})),React.createElement("div",{className:jb},React.createElement("h3",{className:_b},e.text),React.createElement("div",{className:Ib},React.createElement(Cf,{className:Tb}),React.createElement("h3",{className:Mb},"".concat((a=e.date.getMonth(),["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][a])," ").concat(e.date.getDay(),", ").concat(e.date.getFullYear())))));var a}))))}$RefreshReg$(Vb,"PostRecentlyAdded");var Hb="OjpStY7W",Ub="wiK7Hl0K",Wb="zMIQ5fqs";function Jb(){return React.createElement("form",{name:"search-post",action:"",className:Hb},React.createElement(Xa,{stroke:"#1a1a1a",className:Ub}),React.createElement("input",{className:Wb,placeholder:"Search...",type:"search"}))}$RefreshReg$(Jb,"PostSearch");var Qb="UQz1ledY",Kb="V8mWQn1c",Gb="sc70Lo4p",Yb="cDD2mOr5";function Xb(){return React.createElement("section",{className:Qb},React.createElement("h1",{className:Yb},"Popular Tag"),React.createElement("div",{className:Kb},Zb.map((function(e,t){return React.createElement(Ia,{to:"/blog",key:t,className:Gb},e)}))))}var Zb=["Healthy","Low fat","Vegetarian","Bread","Kid foods","Vitamins","Snacks","Tiffin","Meat","Lunch","Dinner"];$RefreshReg$(Xb,"PostTags");var ey,ty="GXamtQYy",ay="sXNGo2lR",ny="PVuWWnSc",ry="DQC_S_SU",iy="aR7MLyia",ly="O8G73SMw",oy="Ad7MVE8D",sy="JV0U1Qmg",cy="WKUFUCwv",uy="qOK0bsui",my="WegTncTj",dy="XDdaX1oU",fy="aA89iJ4X",py="ctJNA1LS",hy="RplH4s2a",gy="uKGVe0HN",vy="bAdn0k4Y",by="S5NfrAtx",yy="q0g0dlgY",Ey="_bfzGjhp",Ry="IXt9N2q8",wy="IK3Kbh5t",Ny="veypuqQq",Sy="bl67s5J8",ky="ZCm9EARY",Cy="UH06fxSN",xy="sbXxmCBM",Py="MXuU13Qy",Oy="AYAkRt2t",qy="AVcBkZ3p",Ay="oZKhU3Xd",Dy="yR5t2J8b",My="X5L5ea6c",jy="gscD4Thi",Ty="JXluNDtU",Ly="p5XlqVGu",Iy="o2kgiArs",By="JNsme1_W",_y="v8AHXT8T",zy="mreEkiaQ",Fy="D4OzlUBI",$y="W1QkC1Vi",Vy="E5gmnncK",Hy="uNYvSdCF",Uy="XZtC45zV",Wy="c11pT8DD",Jy="qYgQnoro",Qy="qi8KQGny",Ky="LVxKHjw0",Gy="FyQ3TpFf",Yy="LO6Sv1Wm",Xy="VdRpt179",Zy="Tnz7TpSX",eE="fAnlzLzj",tE="nJ8ey6f4",aE=$RefreshSig$();function nE(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return rE(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?rE(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function rE(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function iE(e){aE();var t=e.post,a=e.getMonthString,n=nE((0,r.useState)(5),2),i=n[0],l=n[1],o=nE((0,r.useState)(!1),2),s=o[0],c=o[1],u=t.comments.filter((function(e,t){return t<i}));return React.createElement("section",{className:qy},React.createElement("div",{className:Zy},React.createElement("h2",{className:Jy},"Leave a Comment"),React.createElement("form",{className:By,action:"",method:"post"},React.createElement("div",{className:eE},React.createElement("div",{className:zy},React.createElement("h4",{className:Uy},"Full Name"),React.createElement("input",{placeholder:"Zalir Hossen",className:Vy,type:"text"})),React.createElement("div",{className:zy},React.createElement("h4",{className:Uy},"Email"),React.createElement("input",{className:Iy,type:"email",placeholder:"zakirsoft.20@gl"}))),React.createElement("div",{className:tE},React.createElement("h4",{className:Uy},"Message"),React.createElement("textarea",{rows:4,cols:15,className:Wy,name:"message",placeholder:"Write your comment here…"})),React.createElement("div",{className:Fy},React.createElement("input",{onClick:function(){c(!s)},className:My,name:"checkboxRemember",type:"checkbox",checked:s}),React.createElement("span",{className:jy},"Save my name and email in this browser for the next time I comment.")),React.createElement("button",{type:"submit",formMethod:"post",className:Dy},"Post Comments"))),React.createElement("div",{className:Xy},React.createElement("h2",{className:Jy},"Comments"),React.createElement("div",{className:_y},u.map((function(e){return React.createElement("div",{key:e.id,className:Ty},React.createElement("img",{className:Yy,src:e.userPhoto,alt:"image user"}),React.createElement("div",{className:Ky},React.createElement("div",{className:$y},React.createElement("h3",{className:Gy},e.userName),React.createElement("div",{className:Hy},"•"),React.createElement("span",{className:Ly},"".concat(e.date.getDate()," ").concat(a(e.date.getMonth()),", ").concat(e.date.getFullYear()))),React.createElement("h4",{className:Qy},e.comment)))})))),React.createElement("button",{onClick:function(){return l(i+5)},className:Ay},"Load More"))}function lE(){return lE=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},lE.apply(this,arguments)}aE(iE,"08dnBykAzyXfFaevg4MLFhWyQUw="),$RefreshReg$(iE,"SectionComments");const oE=function(e){return r.createElement("svg",lE({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 18 16"},e),ey||(ey=r.createElement("path",{fill:"#fff",d:"M18 2.419a7.7 7.7 0 0 1-2.126.583 3.67 3.67 0 0 0 1.623-2.04c-.713.425-1.5.726-2.34.893a3.689 3.689 0 0 0-6.383 2.523c0 .293.025.574.085.842a10.45 10.45 0 0 1-7.606-3.86 3.7 3.7 0 0 0-.505 1.865c0 1.278.658 2.411 1.64 3.067A3.64 3.64 0 0 1 .72 5.838v.04a3.71 3.71 0 0 0 2.957 3.626c-.3.082-.628.122-.968.122-.236 0-.475-.014-.699-.063a3.725 3.725 0 0 0 3.449 2.57 7.4 7.4 0 0 1-4.576 1.574c-.302 0-.593-.013-.883-.05a10.4 10.4 0 0 0 5.661 1.656c6.79 0 10.503-5.626 10.503-10.501q-.001-.243-.014-.477A7.4 7.4 0 0 0 18 2.419"})))};var sE;function cE(){return cE=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},cE.apply(this,arguments)}const uE=function(e){return r.createElement("svg",cE({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 16 18"},e),sE||(sE=r.createElement("path",{d:"M8.245 0C3.31 0 .688 3.161.688 6.609c0 1.598.893 3.592 2.323 4.224.217.098.335.056.384-.145.042-.153.23-.89.321-1.238a.32.32 0 0 0-.076-.312c-.475-.55-.852-1.55-.852-2.488 0-2.404 1.912-4.739 5.164-4.739 2.813 0 4.78 1.828 4.78 4.441 0 2.953-1.562 4.996-3.593 4.996-1.124 0-1.96-.882-1.695-1.973.32-1.3.95-2.697.95-3.634 0-.84-.476-1.536-1.445-1.536-1.145 0-2.073 1.133-2.073 2.654 0 .967.342 1.62.342 1.62l-1.342 5.426c-.355 1.445.049 3.786.083 3.988.022.111.147.146.216.055.112-.146 1.48-2.098 1.863-3.51l.713-2.598c.377.68 1.464 1.251 2.623 1.251 3.447 0 5.938-3.03 5.938-6.79C15.3 2.697 12.215 0 8.245 0"})))};var mE;function dE(){return dE=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},dE.apply(this,arguments)}const fE=function(e){return r.createElement("svg",dE({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 10 18"},e),mE||(mE=r.createElement("path",{d:"M7.998 2.989H9.64V.127A21 21 0 0 0 7.247 0c-2.37 0-3.992 1.49-3.992 4.23v2.52H.64v3.2h2.615V18H6.46V9.95H8.97l.398-3.2H6.46V4.548c.001-.925.25-1.558 1.539-1.558"})))};var pE,hE;function gE(){return gE=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},gE.apply(this,arguments)}const vE=function(e){return r.createElement("svg",gE({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 18 18"},e),pE||(pE=r.createElement("g",{clipPath:"url(#instagramBlog_svg__a)"},r.createElement("path",{d:"M17.982 5.292c-.042-.956-.197-1.614-.418-2.184a4.4 4.4 0 0 0-1.041-1.596A4.4 4.4 0 0 0 14.93.475c-.573-.222-1.227-.377-2.184-.419C11.784.011 11.478 0 9.034 0s-2.75.01-3.71.053C4.368.095 3.71.25 3.14.47a4.4 4.4 0 0 0-1.596 1.041c-.458.45-.813.995-1.038 1.593C.285 3.678.13 4.332.088 5.288.042 6.252.03 6.558.03 9.002s.011 2.75.053 3.71c.042.956.197 1.613.419 2.183a4.4 4.4 0 0 0 1.04 1.596c.45.458.996.813 1.593 1.038.574.221 1.228.376 2.184.418.96.043 1.266.053 3.71.053s2.75-.01 3.71-.053c.956-.042 1.613-.197 2.183-.418a4.6 4.6 0 0 0 2.634-2.634c.221-.573.376-1.227.418-2.184.042-.96.053-1.265.053-3.71 0-2.443-.004-2.749-.046-3.709m-1.62 7.35c-.04.878-.187 1.353-.31 1.67a2.99 2.99 0 0 1-1.71 1.708c-.316.123-.794.271-1.67.31-.949.042-1.234.052-3.635.052-2.402 0-2.69-.01-3.636-.052-.88-.039-1.354-.187-1.67-.31a2.8 2.8 0 0 1-1.034-.671 2.8 2.8 0 0 1-.672-1.034c-.123-.316-.27-.795-.31-1.67-.041-.95-.052-1.235-.052-3.636 0-2.402.01-2.69.053-3.636.038-.88.186-1.354.31-1.67.143-.39.372-.746.674-1.034a2.8 2.8 0 0 1 1.034-.672c.317-.123.795-.27 1.67-.31.95-.041 1.235-.052 3.636-.052 2.406 0 2.69.01 3.636.053.88.039 1.354.186 1.67.31.39.143.746.372 1.034.67.3.293.528.644.672 1.035.123.316.27.794.31 1.67.042.95.052 1.234.052 3.636 0 2.401-.01 2.683-.053 3.632"}),r.createElement("path",{d:"M9.033 4.378a4.625 4.625 0 0 0 0 9.248 4.625 4.625 0 0 0 0-9.248m0 7.623a3 3 0 1 1 .001-6 3 3 0 0 1 0 6M14.92 4.195a1.08 1.08 0 1 1-2.16 0 1.08 1.08 0 0 1 2.16 0"}))),hE||(hE=r.createElement("defs",null,r.createElement("clipPath",{id:"instagramBlog_svg__a"},r.createElement("path",{fill:"#fff",d:"M0 0h18v18H0z"})))))};var bE;function yE(){return yE=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},yE.apply(this,arguments)}const EE=function(e){return r.createElement("svg",yE({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 20 11"},e),bE||(bE=r.createElement("path",{d:"M5.833 2.167a3.333 3.333 0 0 0 0 6.666H7.5a.833.833 0 0 1 0 1.667H5.833a5 5 0 1 1 0-10H7.5a.833.833 0 0 1 0 1.667zm5.834-.834A.833.833 0 0 1 12.5.5h1.667a5 5 0 1 1 0 10H12.5a.833.833 0 1 1 0-1.667h1.667a3.333 3.333 0 0 0 0-6.666H12.5a.833.833 0 0 1-.833-.834M5.833 5.5a.833.833 0 0 1 .834-.833h6.666a.833.833 0 0 1 0 1.666H6.667a.833.833 0 0 1-.834-.833"})))};function RE(e){var t=e.post,a=e.banner,n=e.getMonthString;return React.createElement("section",{className:Oy},React.createElement("div",{className:vy},React.createElement("img",{className:py,src:t.img,alt:"post image"})),React.createElement("div",{className:Ey},React.createElement("div",{className:ky},React.createElement(Gf,{stroke:"#00B207",className:hy}),React.createElement("h4",{className:Cy},t.category)),React.createElement("div",{className:dy},React.createElement(ar,{stroke:"#00B207",className:hy}),React.createElement("h4",{className:Cy},"by Admin")),React.createElement("div",{className:fy},React.createElement(Zf,{stroke:"#00B207",className:hy}),React.createElement("h4",{className:Cy},"".concat(t.comments.length," Comments")))),React.createElement("h1",{className:Py},t.title),React.createElement("div",{className:ty},React.createElement("div",{className:ry},React.createElement("img",{className:ny,src:"/images/admin-photo.png",alt:"admin image"}),React.createElement("div",{className:ly},React.createElement("h3",{className:oy},"Cameron Williamson"),React.createElement("div",{className:iy},React.createElement("h3",{className:ay},"".concat(t.date.getDate()," ").concat(n(t.date.getMonth()),", ").concat(t.date.getFullYear())),React.createElement("span",{className:sy},"•"),React.createElement("h3",{className:cy},"6 min read")))),React.createElement("div",{className:yy},React.createElement("div",{className:wy},React.createElement(fE,{fill:"#4d4d4d",className:gy})),React.createElement("div",{className:"".concat(Ny," ").concat(wy)},React.createElement(oE,{stroke:"#ffffff",className:gy})),React.createElement("div",{className:wy},React.createElement(uE,{fill:"#4d4d4d",className:gy})),React.createElement("div",{className:wy},React.createElement(vE,{fill:"#4d4d4d",className:gy})),React.createElement("div",{className:wy},React.createElement(EE,{fill:"#4d4d4d",className:gy})))),React.createElement("h3",{className:Sy},t.subTitle),React.createElement("p",{className:xy},t.descriptionOne),React.createElement("br",null),React.createElement("p",{className:xy},t.descriptionTwo),React.createElement("div",{className:by},React.createElement("img",{className:Ry,src:t.images[0],alt:"post image"}),React.createElement("img",{className:Ry,src:t.images[1],alt:"post image"})),React.createElement("h4",{className:xy},t.descriptionThree),React.createElement("div",{className:uy},React.createElement(cc,null),React.createElement("img",{className:my,src:a.img,alt:"Banner"})),React.createElement(iE,{getMonthString:n,post:t}))}$RefreshReg$(RE,"PostInfo");var wE=$RefreshSig$();function NE(){wE();var e=We().id,t=Sf.find((function(t){return t.id==e})),a=Cg.find((function(e){return"singleBlog"===e.name}));return(0,r.useEffect)((function(){window.scrollTo(0,0)}),[]),React.createElement("main",{className:"qbU__3xo"},React.createElement(ra,null,React.createElement("meta",{charSet:"utf-8"}),React.createElement("title",null,"Post")),React.createElement(Cc,{one:"Blog",two:"Single Post"}),React.createElement("div",{className:"Z3hzgfwM"},React.createElement(RE,{post:t,banner:a,getMonthString:function(e){return["January","February","March","April","May","June","July","August","Septemnber","October","November","December"][e]}}),React.createElement("nav",{className:"rxGGDSXe"},React.createElement(Jb,null),React.createElement(kb,null),React.createElement(Xb,null),React.createElement(qb,null),React.createElement(Vb,null))))}wE(NE,"XT1vicrm+NSYLQxrGm9hA77HN9Y=",!1,(function(){return[We]})),$RefreshReg$(NE,"SinglePost");var SE,kE,CE="zBwc9340";function xE(){return xE=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},xE.apply(this,arguments)}const PE=function(e){return r.createElement("svg",xE({xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",fill:"none",viewBox:"0 0 20 15"},e),SE||(SE=r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M1.667 7.5S4.697 1.667 10 1.667 18.333 7.5 18.333 7.5s-3.03 5.834-8.333 5.834S1.667 7.5 1.667 7.5"})),kE||(kE=r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"M10 10a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5"})))};var OE=$RefreshSig$();function qE(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function AE(){OE();var e,t,a=(0,r.useRef)(),n=(0,r.useRef)(),i=(e=(0,r.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return qE(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?qE(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=i[0],o=i[1];return(0,r.useEffect)((function(){var e="password"===n.current.getAttribute("type")?"text":"password";n.current.setAttribute("type",e)}),[l]),(0,r.useEffect)((function(){window.scrollTo(0,0)}),[]),React.createElement("main",{className:"_0d_WYaQ"},React.createElement(ra,null,React.createElement("meta",{charSet:"utf-8"}),React.createElement("title",null,"Login")),React.createElement(Cc,{one:"Account",two:"Login"}),React.createElement("section",{className:"JIZlScBU"},React.createElement("h1",{className:"qDfIwofq"},"Sign In"),React.createElement("form",{name:"login",method:"post",action:"",className:"QHG5s8D3"},React.createElement("input",{name:"email",id:"email",autoComplete:"on",placeholder:"Email",className:"ogNOrrw1",type:"email"}),React.createElement("div",{className:"uL7i5eR5"},React.createElement("input",{ref:n,name:"password",id:"password",placeholder:"Password",className:"DGPofIO_",type:"password"}),React.createElement(PE,{ref:a,onClick:function(){return o(!l)},className:!1===l?CE:"".concat(CE," ").concat("rXQjXr3F")})),React.createElement("div",{className:"iCXFtzNT"},React.createElement("label",{className:"NGDruORq"},React.createElement("input",{name:"login",className:"LPB1EL2w",type:"checkbox"}),"Remember me"),React.createElement("span",{className:"C6Bq9jbu"},"Forget Password")),React.createElement("button",{className:"xDc8f6vR"},"Login")),React.createElement("div",{className:"Pnc6XyTd"},React.createElement("h4",{className:"vI9ultZ5"},"Don't have account?"),React.createElement(Ia,{className:"KTj2A6Ci",to:"/register"},"Register"))))}OE(AE,"iNIhrypdRfchj4YRxzs3kNPb2lg="),$RefreshReg$(AE,"Login");var DE="SCwjWpbU",ME="L1FFggno",jE="a3MBbOtI",TE=$RefreshSig$();function LE(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return IE(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?IE(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function IE(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function BE(){TE();var e=(0,r.useRef)(),t=(0,r.useRef)(),a=LE((0,r.useState)(!1),2),n=a[0],i=a[1],l=LE((0,r.useState)(!1),2),o=l[0],s=l[1];return(0,r.useEffect)((function(){window.scrollTo(0,0)}),[]),(0,r.useEffect)((function(){n?e.current.setAttribute("type","text"):e.current.setAttribute("type","password"),o?t.current.setAttribute("type","text"):t.current.setAttribute("type","password")}),[n,o]),React.createElement("main",{className:"HoyiFC44"},React.createElement(ra,null,React.createElement("meta",{charSet:"utf-8"}),React.createElement("title",null,"Register")),React.createElement(Cc,{one:"Account",two:"Create Account"}),React.createElement("div",{className:"qCkVuzYW"},React.createElement("h1",{className:"WyOzaoLl"},"Create Account"),React.createElement("form",{name:"register",action:"",method:"post",className:"beBf4ioq"},React.createElement("div",{className:"G05FsEaF"},React.createElement("input",{className:jE,name:"email",type:"email",placeholder:"Email"}),React.createElement("div",{className:ME},React.createElement("input",{ref:e,placeholder:"Password",className:jE,name:"password",type:"password"}),React.createElement(PE,{onClick:function(){return i(!n)},stroke:!1===n?"#1a1a1a":"#00B207",className:DE})),React.createElement("div",{className:ME},React.createElement("input",{ref:t,placeholder:"Confirm Password",className:jE,name:"confirmPassword",type:"password"}),React.createElement(PE,{onClick:function(){return s(!o)},stroke:!1===o?"#1a1a1a":"#00B207",className:DE})),React.createElement("label",{className:"OC4TRTYs"},React.createElement("input",{className:"VynO3JOX",name:"register",type:"checkbox"}),"Accept all terms & Conditions")),React.createElement("button",{className:"GYorUa1C"},"Create Account")),React.createElement("div",{className:"KzEJm35Q"},React.createElement("span",{className:"yMXHNZfw"},"Already have account"),React.createElement(Ia,{to:"/login",className:"FjXWqcwA"},"Login"))))}TE(BE,"x/NdPo75C8suGLj4wjWhoDxcpik="),$RefreshReg$(BE,"Register");var _E="arMkBRoN",zE="jqA7jLxP",FE="fVlhOqOk",$E="rDupWrPl",VE="LTedYtoI",HE=[{id:0,name:"Dennis Nzioki",group:"Customer",address:"4140 Parker Rd. Allentown, New Runda 31134",email:"dennisnzioki@gmail.com",tel:"254 555-0110",password:"1111",img:"/images/user-photo-six.png",history:[{id:0,orderId:"3933",date:new Date("2021-04-04"),status:"Processing",paymentMethod:"Paypal",discount:"20",shipping:"Free",products:[{id:10,price:"14.00",amount:5},{id:8,price:"14.00",amount:2},{id:9,price:"26.70",amount:10}]},{id:1,orderId:"5045",date:new Date("2021-03-27"),status:"on the way",paymentMethod:"Paypal",discount:"",shipping:"Free",products:[{id:9,price:"26.70",amount:1}]},{id:2,orderId:"5028",date:new Date("2021-03-20"),status:"Completed",paymentMethod:"Paypal",discount:"0",shipping:"Free",products:[{id:9,price:"26.70",amount:4}]},{id:3,orderId:"4600",date:new Date("2021-03-19"),status:"Completed",paymentMethod:"Paypal",discount:"20",shipping:"Free",products:[{id:5,price:"35.00",amount:1}]},{id:4,orderId:"4152",date:new Date("2021-03-18"),status:"Completed",paymentMethod:"Paypal",discount:"20",shipping:"Free",products:[{id:2,price:"22.00",amount:4},{id:8,price:"18.00",amount:4},{id:1,price:"17.00",amount:5}]},{id:5,orderId:"8811",date:new Date("2021-03-10"),status:"Completed",paymentMethod:"Paypal",discount:"20",shipping:"Free",products:[{id:3,price:"15.00",amount:4},{id:9,price:"32.00",amount:4}]},{id:6,orderId:"3536",date:new Date("2021-03-5"),status:"Completed",paymentMethod:"Paypal",discount:"20",shipping:"Free",products:[{id:5,price:"280.00",amount:1},{id:6,price:"280.00",amount:1}]},{id:7,orderId:"1374",date:new Date("2021-02-27"),status:"Completed",paymentMethod:"Paypal",discount:"20",shipping:"Free",products:[{id:5,price:"280.00",amount:1},{id:6,price:"280.00",amount:1}]},{id:8,orderId:"7791",date:new Date("2021-02-25"),status:"Completed",paymentMethod:"Paypal",discount:"20",shipping:"Free",products:[{id:7,price:"280.00",amount:1},{id:8,price:"280.00",amount:1}]},{id:9,orderId:"4846",date:new Date("2021-02-24"),status:"Completed",paymentMethod:"Paypal",discount:"20",shipping:"Free",products:[{id:7,price:"23.00",amount:1}]},{id:10,orderId:"5948",date:new Date("2021-02-20"),status:"Completed",paymentMethod:"Paypal",discount:"20",shipping:"Free",products:[{id:2,price:"23.00",amount:1}]},{id:11,orderId:"1577",date:new Date("2020-10-12"),status:"Completed",paymentMethod:"Paypal",discount:"20",shipping:"Free",products:[{id:7,price:"23.00",amount:1}]},{id:12,orderId:"1563",date:new Date("2020-10-10"),status:"Completed",paymentMethod:"Paypal",discount:"20",shipping:"Free",products:[{id:3,price:"19.00",amount:2}]}]}];function UE(){var e=HE.find((function(e){return 0===e.id})),t=e.history.sort((function(e,t){return t.date-e.date}));return React.createElement("main",{className:"G5MWEvEd"},React.createElement("div",{className:"PFqseBMj"},React.createElement("div",{className:"anRWzO1d"},React.createElement("div",{className:"IJlshOOz"},React.createElement("img",{className:"jFP0ZrHE",src:e.img,alt:"user Photo"})),React.createElement("div",{className:"oW0do05x"},React.createElement("h2",{className:"Qdr8wN_o"},e.name),React.createElement("h4",{className:"eomd2OHw"},e.group),React.createElement(Ia,{className:_E,to:"/account/settings"},"Edit Profile"))),React.createElement("div",{className:"Vk00mxaP"},React.createElement("h3",{className:$E},"BILLING ADDRESS"),React.createElement("h3",{className:"_3lUwSDnV"},e.name),React.createElement("h3",{className:$E},e.address),React.createElement("h3",{className:VE},e.email),React.createElement("h3",{className:VE},e.tel),React.createElement(Ia,{to:"/account/settings",className:_E},"Edit Address"))),React.createElement("div",{className:"VoEfmSzz"},React.createElement("div",{className:"oQETPhtd"},React.createElement("h2",{className:"sSZc9FSd"},"Recent Order History"),React.createElement(Ia,{to:"/account/orderHistory",className:"Pa2VaVdJ"},"View All")),React.createElement("div",{className:"CP1IL2fk"},React.createElement("span",{className:FE},"ORDER ID"),React.createElement("span",{className:FE},"DATE"),React.createElement("span",{className:FE},"TOTAL"),React.createElement("span",{className:FE},"STATUS")),React.createElement("div",{className:"pqv9x15k"},t.map((function(e,t){if(t<6)return React.createElement("div",{key:e.id,className:"T4MkoilR"},React.createElement("span",{className:zE},"#".concat(e.orderId)),React.createElement("span",{className:zE},"".concat(e.date.getDate()," ").concat((a=e.date.getMonth(),["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][a]),", ").concat(e.date.getFullYear())),React.createElement("span",{className:zE},React.createElement("b",null,"$".concat(e.products.reduce((function(e,t){return e+=+t.price*t.amount,Math.round(e)}),0)))," "," (".concat(e.products.reduce((function(e,t){return e+t.amount}),0)," products)")),React.createElement("span",{className:zE},e.status),React.createElement("div",{className:"_k7X5Eyl"},React.createElement(Ia,{to:"/account/orderHistory".concat("/",e.id),className:"dn19UOLR"},"View Details")));var a})))))}$RefreshReg$(UE,"Dashboard");var WE="mQ9j_3Fe",JE="ByCaAE6h",QE=$RefreshSig$();function KE(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return GE(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?GE(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function GE(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function YE(){QE();var e=KE((0,r.useState)(12),2),t=e[0],a=(e[1],KE((0,r.useState)(1),2)),n=a[0],i=a[1],l=HE.find((function(e){return 0==e.id})).history.sort((function(e,t){return t.date-e.date})),o=n*t,s=o-t,c=l.slice(s,o);return React.createElement("main",{className:"OwvpYNb9"},React.createElement(ra,null,React.createElement("meta",{charSet:"utf-8"}),React.createElement("title",null,"Order History")),React.createElement("div",{className:"ZzPVdQtf"},React.createElement("h2",{className:"CR3BuUl5"},"Order History"),React.createElement("div",{className:"aFIEdCKT"},React.createElement("span",{className:WE},"ORDER ID"),React.createElement("span",{className:WE},"DATE"),React.createElement("span",{className:WE},"TOTAL"),React.createElement("span",{className:WE},"STATUS")),React.createElement("div",{className:"je_ufEY3"},c.map((function(e){return React.createElement("div",{key:e.id,className:"zJdNrQbX"},React.createElement("span",{className:JE},"#".concat(e.orderId)),React.createElement("span",{className:JE},"".concat(e.date.getDate()," ").concat((t=e.date.getMonth(),["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][t]),", ").concat(e.date.getFullYear())),React.createElement("span",{className:JE},React.createElement("b",null,"\n                  $".concat(e.products.reduce((function(e,t){return e+=+t.price*+t.amount,Math.round(e),e}),0)))," ( ".concat(e.products.reduce((function(e,t){return e+ +t.amount}),0)," Products )\n                ")),React.createElement("span",{className:JE},e.status),React.createElement("div",{className:"T4OEndLN"},React.createElement(Ia,{to:"".concat(e.id),className:"TBPUlWyC"},"View Details")));var t})))),React.createElement(yd,{productPerPage:t,totalProducts:l.length,currentPage:n,setCurrentPage:i}))}QE(YE,"1nJCobq9scJaGEZwzhqDvzBh7mA="),$RefreshReg$(YE,"OrderHistory");var XE="CTZJjab0",ZE="_qvmkOLs",eR="Wg5Qtr00",tR="ofDAvBHO",aR="lfZcMnJC",nR="mb2tOZDV",rR="R1GDQmGb";function iR(e){return iR="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},iR(e)}var lR=$RefreshSig$();function oR(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function sR(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?oR(Object(a),!0).forEach((function(t){var n,r,i,l;n=e,r=t,i=a[t],l=function(e,t){if("object"!=iR(e)||!e)return e;var a=e[Symbol.toPrimitive];if(void 0!==a){var n=a.call(e,"string");if("object"!=iR(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r),(r="symbol"==iR(l)?l:l+"")in n?Object.defineProperty(n,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[r]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):oR(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function cR(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function uR(){lR();var e,t,a=HE.find((function(e){return 0==e.id})),n=(e=(0,r.useState)({name:a.name.split(" ")[0],surname:a.name.split(" ")[1],email:a.email,tel:a.tel}),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,i,l,o=[],s=!0,c=!1;try{if(i=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;s=!1}else for(;!(s=(n=i.call(a)).done)&&(o.push(n.value),o.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=a.return&&(l=a.return(),Object(l)!==l))return}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return cR(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?cR(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=n[0],l=n[1];return(0,r.useEffect)((function(){HE.find((function(e){0==e.id&&(e.name="".concat(i.name," ").concat(i.surname),e.email=i.email,e.tel=i.tel)}))}),[]),React.createElement("section",{className:XE},React.createElement("h2",{className:rR},"Account Settings"),React.createElement("div",{className:eR},React.createElement("div",{className:tR},React.createElement("h4",{className:nR},"First name"),React.createElement("input",{className:aR,type:"text",value:i.name.split(" ")[0],onChange:function(e){return l(sR(sR({},i),{},{name:e.target.value}))}})),React.createElement("div",{className:tR},React.createElement("h4",{className:nR},"Last name"),React.createElement("input",{className:aR,type:"text",value:a.name.split(" ")[1],onChange:function(e){return l(sR(sR({},i),{},{surname:e.target.value}))}})),React.createElement("div",{className:tR},React.createElement("h4",{className:nR},"Email"),React.createElement("input",{className:aR,type:"text",value:i.email,onChange:function(e){return l(sR(sR({},i),{},{email:e.target.value}))}})),React.createElement("div",{className:tR},React.createElement("h4",{className:nR},"Phone Number"),React.createElement("input",{className:aR,type:"text",value:a.tel,onChange:function(e){return l(sR(sR({},i),{},{tel:e.target.value}))}})),React.createElement("button",{className:ZE},"Save Changes")))}lR(uR,"2z7cV2f7ccJ5LNZHJxpavGR38Yo="),$RefreshReg$(uR,"UserInformation");var mR="A5JSVTi_";function dR(){return React.createElement("section",{className:mR})}$RefreshReg$(dR,"ChangeAddress");var fR="d2xkyM1_";function pR(){return React.createElement("section",{className:fR})}function hR(){return React.createElement("main",{className:"DZhXSynw"},React.createElement(ra,null,React.createElement("meta",{charSet:"utf-8"}),React.createElement("title",null,"Settings")),React.createElement(uR,null),React.createElement(dR,null),React.createElement(pR,null))}function gR(){return React.createElement("main",{className:"V8CVJDSw"},React.createElement(ra,null,React.createElement("meta",{charSet:"utf-8"}),React.createElement("title",null,"Shopping Cart")))}function vR(){return React.createElement("main",{className:"sEWdt5Av"},React.createElement(ra,null,React.createElement("meta",{charSet:"utf-8"}),React.createElement("title",null,"Wishlist")))}function bR(){return React.createElement("main",{className:"yBL_a2cE"})}function yR(){return React.createElement("main",{className:"wg0EN6DB"})}$RefreshReg$(pR,"ChangePassword"),$RefreshReg$(hR,"Settings"),$RefreshReg$(gR,"ShoppingCart"),$RefreshReg$(vR,"AccountWishlist"),$RefreshReg$(bR,"Wishlist"),$RefreshReg$(yR,"Basket");var ER="v60jwVvQ",RR="j6s9npYg",wR="y_kxJBmt",NR="c7THpGiy",SR="fWWuvdFG",kR="RXWJoztn",CR="qoBKtRZd",xR="jyIxNedh",PR="m8ytJ8x3",OR="o9EZ4Dm7",qR="JKuexktw",AR="Euvre6J6",DR="smv1zz0A",MR="UMngzlhg",jR="KTPp9Kh6",TR="PkEjXpit",LR="gUvvcVhB",IR="KeLdYazP",BR="BWQz4W2x",_R="Jab_Lz_Q";function zR(e){var t=e.order,a=e.user,n=t.products.reduce((function(e,t){return e+ +t.price*t.amount}),0);return React.createElement("section",{className:wR},React.createElement("div",{className:BR},React.createElement("div",{className:NR},React.createElement("h4",{className:TR},"BILLING ADDRESS"),React.createElement("div",{className:CR},React.createElement("p",{className:IR},a.name),React.createElement("p",{className:jR},a.address)),React.createElement("div",{className:kR},React.createElement("h4",{className:TR},"EMAIL"),React.createElement("p",{className:AR},a.email)),React.createElement("div",{className:kR},React.createElement("h4",{className:TR},"PHONE"),React.createElement("p",{className:AR},a.tel))),React.createElement("div",{className:NR},React.createElement("h4",{className:TR},"SHIPPING ADDRES"),React.createElement("div",{className:CR},React.createElement("p",{className:IR},a.name),React.createElement("p",{className:jR},a.address)),React.createElement("div",{className:kR},React.createElement("h4",{className:TR},"EMAIL"),React.createElement("p",{className:AR},a.email)),React.createElement("div",{className:kR},React.createElement("h4",{className:TR},"PHONE"),React.createElement("p",{className:AR},a.tel)))),React.createElement("div",{className:_R},React.createElement("div",{className:xR},React.createElement("div",{className:SR},React.createElement("h4",{className:TR},"ORDER ID:"),React.createElement("p",{className:DR},"# ".concat(t.orderId))),React.createElement("div",{className:PR},React.createElement("h4",{className:TR},"PAYMENT METHOD:"),React.createElement("p",{className:DR},t.paymentMethod))),React.createElement("div",{className:OR},React.createElement("div",{className:qR},React.createElement("h4",{className:TR},"Subtotal:"),React.createElement("h4",{className:AR},"$".concat(n.toFixed(2)))),React.createElement("div",{className:qR},React.createElement("h4",{className:TR},"Discount"),React.createElement("h4",{className:AR},0==t.discount?"".concat(0,"%"):"".concat(t.discount,"%"))),React.createElement("div",{className:qR},React.createElement("h4",{className:TR},"Shipping"),React.createElement("h4",{className:AR},t.shipping)),React.createElement("div",{className:qR},React.createElement("h4",{className:LR},"Total"),React.createElement("h4",{className:MR},"$".concat(0!=t.discount&&""!=t.discount?(n*"0.".concat(100-t.discount)).toFixed(2):n.toFixed(2)))))))}$RefreshReg$(zR,"AddressSection");var FR="JqBEQRYA",$R="afkSPv26",VR="hGrDnEoO",HR="ukxbwLy0",UR="aFNBRaQf",WR="ieMtaD5Q",JR="m_ssleuQ",QR="oNyRvT_Y",KR="ftRoJ43D",GR="IqcZL_u_";function YR(e){var t=e.order,a="received"==t.status.toLowerCase()||"processing"==t.status.toLowerCase()||"on the way"==t.status.toLowerCase()||"completed"==t.status.toLowerCase()?VR:$R,n="processing"==t.status.toLowerCase()||"on the way"==t.status.toLowerCase()||"completed"==t.status.toLowerCase()?VR:$R,r="on the way"==t.status.toLowerCase()||"completed"==t.status.toLowerCase()?VR:$R,i="completed"==t.status.toLowerCase()?VR:$R,l="processing"==t.status.toLowerCase()||"on the way"==t.status.toLowerCase()||"completed"==t.status.toLowerCase()?KR:QR,o="on the way"==t.status.toLowerCase()||"completed"==t.status.toLowerCase()?KR:QR,s="completed"==t.status.toLowerCase()?KR:QR;return React.createElement("section",{className:FR},React.createElement("div",{className:GR},React.createElement("div",{className:l}),React.createElement("div",{className:o}),React.createElement("div",{className:s})),React.createElement("div",{className:UR},React.createElement("div",{className:a},a==VR?"":"01",React.createElement(lc,{className:HR})),React.createElement("h4",{className:a==VR?JR:WR},"Order received")),React.createElement("div",{className:UR},React.createElement("div",{className:n},n==VR?"":"02",React.createElement(lc,{className:HR})),React.createElement("h4",{className:n==VR?JR:WR},"Processing")),React.createElement("div",{className:UR},React.createElement("div",{className:r},r==VR?"":"03",React.createElement(lc,{className:HR})),React.createElement("h4",{className:r==VR?JR:WR},"On the way")),React.createElement("div",{className:UR},React.createElement("div",{className:i},i==VR?"":"04",React.createElement(lc,{className:HR})),React.createElement("h4",{className:i==VR?JR:WR},"Delivered")))}$RefreshReg$(YR,"OrderProgress");var XR="vVqiozNc",ZR="odWFlA3T",ew="Z14W2WIZ",tw="BvBeyaG4",aw="R0Ug2HWS",nw="m2Tf9U5H",rw="DuEgwTnd",iw="qc_DLAHU";function lw(e){return lw="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},lw(e)}function ow(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function sw(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?ow(Object(a),!0).forEach((function(t){var n,r,i,l;n=e,r=t,i=a[t],l=function(e,t){if("object"!=lw(e)||!e)return e;var a=e[Symbol.toPrimitive];if(void 0!==a){var n=a.call(e,"string");if("object"!=lw(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r),(r="symbol"==lw(l)?l:l+"")in n?Object.defineProperty(n,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[r]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):ow(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function cw(e){for(var t=e.order.products.slice(),a=[],n=(t.forEach((function(e){var t=Bi.find((function(t){return t.id==e.id}));a.push({name:t.pictures[0],img:t.name})})),[]),r=0;r<a.length;r++)for(var i=0;i<t.length;i++)n[i]=sw(sw({},t[i]),{},{img:a[i].name,name:a[i].img});return React.createElement("section",{className:XR},React.createElement("div",{className:iw},React.createElement("h4",{className:nw},"PRODUCT"),React.createElement("h4",{className:nw},"PRICE"),React.createElement("h4",{className:nw},"QUANTITY"),React.createElement("h4",{className:nw},"SUBTOTAL")),React.createElement("div",{className:rw},n.map((function(e){return React.createElement("div",{key:e.id,className:tw},React.createElement("div",{className:ew},React.createElement("img",{className:ZR,src:e.img,alt:"product image"})),React.createElement("h4",{className:aw},e.name),React.createElement("h4",{className:aw},"$".concat(e.price)),React.createElement("h4",{className:aw},"x".concat(e.amount)),React.createElement("h4",{className:aw},"$".concat(e.amount*e.price)))}))))}$RefreshReg$(cw,"OrderProducts");var uw=$RefreshSig$();function mw(){uw();var e,t=We().id,a=HE.find((function(e){return 0==e.id})),n=a.history.find((function(e){return e.id==t})),r=n.products.reduce((function(e,t){return e+=t.amount}),0),i=He();return React.createElement("main",{className:"nkhvdfS7"},React.createElement(ra,null,React.createElement("meta",{charSet:"utf-8"}),React.createElement("title",null,"Single Order")),React.createElement("div",{className:"a4KeSjIS"},React.createElement("div",{className:"Qo0EKEtC"},React.createElement("h1",{className:"XUYjP3qT"},"Order Details"),React.createElement("span",{className:RR},"•"),React.createElement("span",{className:ER},"".concat((e=n.date.getMonth(),["January","February","March","April","May","June","July","August","September","October","November","December"][e])," ").concat(n.date.getDate(),", ").concat(n.date.getFullYear())),React.createElement("span",{className:RR},"•"),React.createElement("span",{className:ER},"".concat(r," Products"))),React.createElement("button",{className:"Rycua9Zg",type:"button",onClick:function(){return i(-1)}},"Back to List")),React.createElement(zR,{order:n,user:a}),React.createElement(YR,{order:n}),React.createElement(cw,{order:n}))}function dw(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}function fw(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}uw(mw,"1JEIvPRIKJKnaO45RHf/GR9vcR4=",!1,(function(){return[We,He]})),$RefreshReg$(mw,"SingleOrder");var pw,hw,gw=(pw=function e(t,a){void 0===a&&(a=[]);let n=[];return r.Children.forEach(t,((t,i)=>{if(!r.isValidElement(t))return;let l=[...a,i];if(t.type===r.Fragment)return void n.push.apply(n,e(t.props.children,l));t.type!==rt&&c(!1),t.props.index&&t.props.children&&c(!1);let o={id:t.props.id||l.join("-"),caseSensitive:t.props.caseSensitive,element:t.props.element,Component:t.props.Component,index:t.props.index,path:t.props.path,loader:t.props.loader,action:t.props.action,errorElement:t.props.errorElement,ErrorBoundary:t.props.ErrorBoundary,hasErrorBoundary:null!=t.props.ErrorBoundary||null!=t.props.errorElement,shouldRevalidate:t.props.shouldRevalidate,handle:t.props.handle,lazy:t.props.lazy};t.props.children&&(o.children=e(t.props.children,l)),n.push(o)})),n}(React.createElement(rt,{path:"/",element:React.createElement(zo,null)},React.createElement(rt,{index:!0,element:React.createElement(ev,null)}),React.createElement(rt,{path:"shop",element:React.createElement(wd,null)}),React.createElement(rt,{path:"shop/:id/*",element:React.createElement(Wv,null)},React.createElement(rt,{path:"description",element:React.createElement(ib,null)}),React.createElement(rt,{path:"information",element:React.createElement(fb,null)}),React.createElement(rt,{path:"feedback",element:React.createElement(yb,null)})),React.createElement(rt,{path:"blog",element:React.createElement(rp,null)}),React.createElement(rt,{path:"blog/:id",element:React.createElement(NE,null)}),React.createElement(rt,{path:"about",element:React.createElement(dc,null)}),React.createElement(rt,{path:"contact",element:React.createElement(_d,null)}),React.createElement(rt,{path:"account/*",element:React.createElement(xp,null)},React.createElement(rt,{path:"dashboard",element:React.createElement(UE,null)}),React.createElement(rt,{path:"orderHistory",element:React.createElement(YE,null)}),React.createElement(rt,{path:"orderHistory/:id",element:React.createElement(mw,null)}),React.createElement(rt,{path:"accountWishlist",element:React.createElement(vR,null)}),React.createElement(rt,{path:"shoppingCart",element:React.createElement(gR,null)}),React.createElement(rt,{path:"settings",element:React.createElement(hR,null)})),React.createElement(rt,{path:"faqs",element:React.createElement(_p,null)}),React.createElement(rt,{path:"login",element:React.createElement(AE,null)}),React.createElement(rt,{path:"register",element:React.createElement(BE,null)}),React.createElement(rt,{path:"wishlist",element:React.createElement(bR,null)}),React.createElement(rt,{path:"basket",element:React.createElement(yR,null)}),React.createElement(rt,{path:"*",element:React.createElement(Fp,null)}))),function(e){const t=e.window?e.window:"undefined"!=typeof window?window:void 0,a=void 0!==t&&void 0!==t.document&&void 0!==t.document.createElement,r=!a;let i;if(c(e.routes.length>0,"You must provide a non-empty routes array to createRouter"),e.mapRouteProperties)i=e.mapRouteProperties;else if(e.detectErrorBoundary){let t=e.detectErrorBoundary;i=e=>({hasErrorBoundary:t(e)})}else i=Z;let l,s,m={},f=v(e.routes,i,void 0,m),p=e.basename||"/",g=e.unstable_dataStrategy||oe,y=o({v7_fetcherPersist:!1,v7_normalizeFormMethod:!1,v7_partialHydration:!1,v7_prependBasename:!1,v7_relativeSplatPath:!1,unstable_skipActionErrorRevalidation:!1},e.future),E=null,R=new Set,w=null,N=null,S=null,k=null!=e.hydrationData,C=b(f,e.history.location,p),x=null;if(null==C){let t=be(404,{pathname:e.history.location.pathname}),{matches:a,route:n}=ve(f);C=a,x={[n.id]:t}}let P,O=C.some((e=>e.route.lazy)),q=C.some((e=>e.route.loader));if(O)s=!1;else if(q)if(y.v7_partialHydration){let t=e.hydrationData?e.hydrationData.loaderData:null,a=e.hydrationData?e.hydrationData.errors:null,n=e=>!e.route.loader||("function"!=typeof e.route.loader||!0!==e.route.loader.hydrate)&&(t&&void 0!==t[e.route.id]||a&&void 0!==a[e.route.id]);if(a){let e=C.findIndex((e=>void 0!==a[e.route.id]));s=C.slice(0,e+1).every(n)}else s=C.every(n)}else s=null!=e.hydrationData;else s=!0;let A,M={historyAction:e.history.action,location:e.history.location,matches:C,initialized:s,navigation:K,restoreScrollPosition:null==e.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||x,fetchers:new Map,blockers:new Map},j=n.Pop,T=!1,L=!1,I=new Map,B=null,_=!1,z=!1,V=[],H=[],U=new Map,W=0,re=-1,ie=new Map,me=new Set,de=new Map,Ee=new Map,Pe=new Set,je=new Map,Te=new Map,Le=!1;function Ie(e,t){void 0===t&&(t={}),M=o({},M,e);let a=[],n=[];y.v7_fetcherPersist&&M.fetchers.forEach(((e,t)=>{"idle"===e.state&&(Pe.has(t)?n.push(t):a.push(t))})),[...R].forEach((e=>e(M,{deletedFetchers:n,unstable_viewTransitionOpts:t.viewTransitionOpts,unstable_flushSync:!0===t.flushSync}))),y.v7_fetcherPersist&&(a.forEach((e=>M.fetchers.delete(e))),n.forEach((e=>Je(e))))}function Be(t,a,r){var i,s;let c,{flushSync:u}=void 0===r?{}:r,m=null!=M.actionData&&null!=M.navigation.formMethod&&ke(M.navigation.formMethod)&&"loading"===M.navigation.state&&!0!==(null==(i=t.state)?void 0:i._isRedirect);c=a.actionData?Object.keys(a.actionData).length>0?a.actionData:null:m?M.actionData:null;let d=a.loaderData?pe(M.loaderData,a.loaderData,a.matches||[],a.errors):M.loaderData,p=M.blockers;p.size>0&&(p=new Map(p),p.forEach(((e,t)=>p.set(t,Y))));let h,g=!0===T||null!=M.navigation.formMethod&&ke(M.navigation.formMethod)&&!0!==(null==(s=t.state)?void 0:s._isRedirect);if(l&&(f=l,l=void 0),_||j===n.Pop||(j===n.Push?e.history.push(t,t.state):j===n.Replace&&e.history.replace(t,t.state)),j===n.Pop){let e=I.get(M.location.pathname);e&&e.has(t.pathname)?h={currentLocation:M.location,nextLocation:t}:I.has(t.pathname)&&(h={currentLocation:t,nextLocation:M.location})}else if(L){let e=I.get(M.location.pathname);e?e.add(t.pathname):(e=new Set([t.pathname]),I.set(M.location.pathname,e)),h={currentLocation:M.location,nextLocation:t}}Ie(o({},a,{actionData:c,loaderData:d,historyAction:j,location:t,initialized:!0,navigation:K,revalidation:"idle",restoreScrollPosition:nt(t,a.matches||M.matches),preventScrollReset:g,blockers:p}),{viewTransitionOpts:h,flushSync:!0===u}),j=n.Pop,T=!1,L=!1,_=!1,z=!1,V=[],H=[]}async function _e(t,a,r){A&&A.abort(),A=null,j=t,_=!0===(r&&r.startUninterruptedRevalidation),function(e,t){if(w&&S){let a=at(e,t);w[a]=S()}}(M.location,M.matches),T=!0===(r&&r.preventScrollReset),L=!0===(r&&r.enableViewTransition);let i=l||f,s=r&&r.overrideNavigation,c=b(i,a,p),u=!0===(r&&r.flushSync);if(!c){let e=be(404,{pathname:a.pathname}),{matches:t,route:n}=ve(i);return tt(),void Be(a,{matches:t,loaderData:{},errors:{[n.id]:e}},{flushSync:u})}if(M.initialized&&!z&&(m=M.location,d=a,m.pathname===d.pathname&&m.search===d.search&&(""===m.hash?""!==d.hash:m.hash===d.hash||""!==d.hash))&&!(r&&r.submission&&ke(r.submission.formMethod)))return void Be(a,{matches:c},{flushSync:u});var m,d;A=new AbortController;let g,v=ue(e.history,a,A.signal,r&&r.submission);if(r&&r.pendingError)g=[ge(c).route.id,{type:h.error,error:r.pendingError}];else if(r&&r.submission&&ke(r.submission.formMethod)){let t=await async function(e,t,a,r,i){void 0===i&&(i={}),Ve();let l,o=function(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}(t,a);Ie({navigation:o},{flushSync:!0===i.flushSync});let s=Oe(r,t);if(s.route.action||s.route.lazy){if(l=(await Fe("action",e,[s],r))[0],e.signal.aborted)return{shortCircuited:!0}}else l={type:h.error,error:be(405,{method:e.method,pathname:t.pathname,routeId:s.route.id})};if(Ne(l)){let t;return t=i&&null!=i.replace?i.replace:ce(l.response.headers.get("Location"),new URL(e.url),p)===M.location.pathname+M.location.search,await ze(e,l,{submission:a,replace:t}),{shortCircuited:!0}}if(Re(l))throw be(400,{type:"defer-action"});if(we(l)){let e=ge(r,s.route.id);return!0!==(i&&i.replace)&&(j=n.Push),{pendingActionResult:[e.route.id,l]}}return{pendingActionResult:[s.route.id,l]}}(v,a,r.submission,c,{replace:r.replace,flushSync:u});if(t.shortCircuited)return;g=t.pendingActionResult,s=Ae(a,r.submission),u=!1,v=ue(e.history,v.url,v.signal)}let{shortCircuited:E,loaderData:R,errors:N}=await async function(t,a,n,r,i,s,c,u,m,d){let h=r||Ae(a,i),g=i||s||qe(h),v=l||f,[b,E]=ne(e.history,M,n,g,a,y.v7_partialHydration&&!0===u,y.unstable_skipActionErrorRevalidation,z,V,H,Pe,de,me,v,p,d);if(tt((e=>!(n&&n.some((t=>t.route.id===e)))||b&&b.some((t=>t.route.id===e)))),re=++W,0===b.length&&0===E.length){let e=Ge();return Be(a,o({matches:n,loaderData:{},errors:d&&we(d[1])?{[d[0]]:d[1].error}:null},he(d),e?{fetchers:new Map(M.fetchers)}:{}),{flushSync:m}),{shortCircuited:!0}}if(!(_||y.v7_partialHydration&&u)){let e;E.forEach((e=>{let t=M.fetchers.get(e.key),a=De(void 0,t?t.data:void 0);M.fetchers.set(e.key,a)})),d&&!we(d[1])?e={[d[0]]:d[1].data}:M.actionData&&(e=0===Object.keys(M.actionData).length?null:M.actionData),Ie(o({navigation:h},void 0!==e?{actionData:e}:{},E.length>0?{fetchers:new Map(M.fetchers)}:{}),{flushSync:m})}E.forEach((e=>{U.has(e.key)&&Qe(e.key),e.controller&&U.set(e.key,e.controller)}));let R=()=>E.forEach((e=>Qe(e.key)));A&&A.signal.addEventListener("abort",R);let{loaderResults:w,fetcherResults:N}=await $e(M.matches,n,b,E,t);if(t.signal.aborted)return{shortCircuited:!0};A&&A.signal.removeEventListener("abort",R),E.forEach((e=>U.delete(e.key)));let S=ye([...w,...N]);if(S){if(S.idx>=b.length){let e=E[S.idx-b.length].key;me.add(e)}return await ze(t,S.result,{replace:c}),{shortCircuited:!0}}let{loaderData:k,errors:C}=fe(M,n,b,w,d,E,N,je);je.forEach(((e,t)=>{e.subscribe((a=>{(a||e.done)&&je.delete(t)}))})),y.v7_partialHydration&&u&&M.errors&&Object.entries(M.errors).filter((e=>{let[t]=e;return!b.some((e=>e.route.id===t))})).forEach((e=>{let[t,a]=e;C=Object.assign(C||{},{[t]:a})}));let x=Ge(),P=Ye(re),O=x||P||E.length>0;return o({loaderData:k,errors:C},O?{fetchers:new Map(M.fetchers)}:{})}(v,a,c,s,r&&r.submission,r&&r.fetcherSubmission,r&&r.replace,r&&!0===r.initialHydration,u,g);E||(A=null,Be(a,o({matches:c},he(g),{loaderData:R,errors:N})))}async function ze(r,i,l){let{submission:s,fetcherSubmission:u,replace:m}=void 0===l?{}:l;i.response.headers.has("X-Remix-Revalidate")&&(z=!0);let f=i.response.headers.get("Location");c(f,"Expected a Location header on the redirect Response"),f=ce(f,new URL(r.url),p);let h=d(M.location,f,{_isRedirect:!0});if(a){let a=!1;if(i.response.headers.has("X-Remix-Reload-Document"))a=!0;else if(X.test(f)){const n=e.history.createURL(f);a=n.origin!==t.location.origin||null==D(n.pathname,p)}if(a)return void(m?t.location.replace(f):t.location.assign(f))}A=null;let g=!0===m?n.Replace:n.Push,{formMethod:v,formAction:b,formEncType:y}=M.navigation;!s&&!u&&v&&b&&y&&(s=qe(M.navigation));let E=s||u;if(Q.has(i.response.status)&&E&&ke(E.formMethod))await _e(g,h,{submission:o({},E,{formAction:f}),preventScrollReset:T});else{let e=Ae(h,s);await _e(g,h,{overrideNavigation:e,fetcherSubmission:u,preventScrollReset:T})}}async function Fe(e,t,a,n){try{let r=await async function(e,t,a,n,r,i,l,s){let u=n.reduce(((e,t)=>e.add(t.route.id)),new Set),m=new Set,d=await e({matches:r.map((e=>{let n=u.has(e.route.id);return o({},e,{shouldLoad:n,resolve:r=>(m.add(e.route.id),n?async function(e,t,a,n,r,i,l){let o,s,u=n=>{let r,o=new Promise(((e,t)=>r=t));s=()=>r(),t.signal.addEventListener("abort",s);let c,u=r=>"function"!=typeof n?Promise.reject(new Error('You cannot call the handler for a route which defines a boolean "'+e+'" [routeId: '+a.route.id+"]")):n({request:t,params:a.params,context:l},...void 0!==r?[r]:[]);return c=i?i((e=>u(e))):(async()=>{try{return{type:"data",result:await u()}}catch(e){return{type:"error",result:e}}})(),Promise.race([c,o])};try{let i=a.route[e];if(a.route.lazy)if(i){let e,[t]=await Promise.all([u(i).catch((t=>{e=t})),le(a.route,r,n)]);if(void 0!==e)throw e;o=t}else{if(await le(a.route,r,n),i=a.route[e],!i){if("action"===e){let e=new URL(t.url),n=e.pathname+e.search;throw be(405,{method:t.method,pathname:n,routeId:a.route.id})}return{type:h.data,result:void 0}}o=await u(i)}else{if(!i){let e=new URL(t.url);throw be(404,{pathname:e.pathname+e.search})}o=await u(i)}c(void 0!==o.result,"You defined "+("action"===e?"an action":"a loader")+' for route "'+a.route.id+"\" but didn't return anything from your `"+e+"` function. Please return a value or `null`.")}catch(e){return{type:h.error,result:e}}finally{s&&t.signal.removeEventListener("abort",s)}return o}(t,a,e,i,l,r,s):Promise.resolve({type:h.data,result:void 0}))})})),request:a,params:r[0].params,context:s});return r.forEach((e=>c(m.has(e.route.id),'`match.resolve()` was not called for route id "'+e.route.id+'". You must call `match.resolve()` on every match passed to `dataStrategy` to ensure all routes are properly loaded.'))),d.filter(((e,t)=>u.has(r[t].route.id)))}(g,e,t,a,n,m,i);return await Promise.all(r.map(((e,r)=>{if(function(e){return Se(e.result)&&J.has(e.result.status)}(e)){let i=e.result;return{type:h.redirect,response:se(i,t,a[r].route.id,n,p,y.v7_relativeSplatPath)}}return async function(e){let{result:t,type:a,status:n}=e;if(Se(t)){let e;try{let a=t.headers.get("Content-Type");e=a&&/\bapplication\/json\b/.test(a)?null==t.body?null:await t.json():await t.text()}catch(e){return{type:h.error,error:e}}return a===h.error?{type:h.error,error:new F(t.status,t.statusText,e),statusCode:t.status,headers:t.headers}:{type:h.data,data:e,statusCode:t.status,headers:t.headers}}return a===h.error?{type:h.error,error:t,statusCode:$(t)?t.status:n}:function(e){let t=e;return t&&"object"==typeof t&&"object"==typeof t.data&&"function"==typeof t.subscribe&&"function"==typeof t.cancel&&"function"==typeof t.resolveData}(t)?{type:h.deferred,deferredData:t,statusCode:null==(r=t.init)?void 0:r.status,headers:(null==(i=t.init)?void 0:i.headers)&&new Headers(t.init.headers)}:{type:h.data,data:t,statusCode:n};var r,i}(e)})))}catch(e){return a.map((()=>({type:h.error,error:e})))}}async function $e(t,a,n,r,i){let[l,...o]=await Promise.all([n.length?Fe("loader",i,n,a):[],...r.map((t=>t.matches&&t.match&&t.controller?Fe("loader",ue(e.history,t.path,t.controller.signal),[t.match],t.matches).then((e=>e[0])):Promise.resolve({type:h.error,error:be(404,{pathname:t.path})})))]);return await Promise.all([Ce(t,n,l,l.map((()=>i.signal)),!1,M.loaderData),Ce(t,r.map((e=>e.match)),o,r.map((e=>e.controller?e.controller.signal:null)),!0)]),{loaderResults:l,fetcherResults:o}}function Ve(){z=!0,V.push(...tt()),de.forEach(((e,t)=>{U.has(t)&&(H.push(t),Qe(t))}))}function He(e,t,a){void 0===a&&(a={}),M.fetchers.set(e,t),Ie({fetchers:new Map(M.fetchers)},{flushSync:!0===(a&&a.flushSync)})}function Ue(e,t,a,n){void 0===n&&(n={});let r=ge(M.matches,t);Je(e),Ie({errors:{[r.route.id]:a},fetchers:new Map(M.fetchers)},{flushSync:!0===(n&&n.flushSync)})}function We(e){return y.v7_fetcherPersist&&(Ee.set(e,(Ee.get(e)||0)+1),Pe.has(e)&&Pe.delete(e)),M.fetchers.get(e)||G}function Je(e){let t=M.fetchers.get(e);!U.has(e)||t&&"loading"===t.state&&ie.has(e)||Qe(e),de.delete(e),ie.delete(e),me.delete(e),Pe.delete(e),M.fetchers.delete(e)}function Qe(e){let t=U.get(e);c(t,"Expected fetch controller: "+e),t.abort(),U.delete(e)}function Ke(e){for(let t of e){let e=Me(We(t).data);M.fetchers.set(t,e)}}function Ge(){let e=[],t=!1;for(let a of me){let n=M.fetchers.get(a);c(n,"Expected fetcher: "+a),"loading"===n.state&&(me.delete(a),e.push(a),t=!0)}return Ke(e),t}function Ye(e){let t=[];for(let[a,n]of ie)if(n<e){let e=M.fetchers.get(a);c(e,"Expected fetcher: "+a),"loading"===e.state&&(Qe(a),ie.delete(a),t.push(a))}return Ke(t),t.length>0}function Xe(e){M.blockers.delete(e),Te.delete(e)}function Ze(e,t){let a=M.blockers.get(e)||Y;c("unblocked"===a.state&&"blocked"===t.state||"blocked"===a.state&&"blocked"===t.state||"blocked"===a.state&&"proceeding"===t.state||"blocked"===a.state&&"unblocked"===t.state||"proceeding"===a.state&&"unblocked"===t.state,"Invalid blocker state transition: "+a.state+" -> "+t.state);let n=new Map(M.blockers);n.set(e,t),Ie({blockers:n})}function et(e){let{currentLocation:t,nextLocation:a,historyAction:n}=e;if(0===Te.size)return;Te.size>1&&u(!1,"A router only supports one blocker at a time");let r=Array.from(Te.entries()),[i,l]=r[r.length-1],o=M.blockers.get(i);return o&&"proceeding"===o.state?void 0:l({currentLocation:t,nextLocation:a,historyAction:n})?i:void 0}function tt(e){let t=[];return je.forEach(((a,n)=>{e&&!e(n)||(a.cancel(),t.push(n),je.delete(n))})),t}function at(e,t){return N&&N(e,t.map((e=>function(e,t){let{route:a,pathname:n,params:r}=e;return{id:a.id,pathname:n,params:r,data:t[a.id],handle:a.handle}}(e,M.loaderData))))||e.key}function nt(e,t){if(w){let a=at(e,t),n=w[a];if("number"==typeof n)return n}return null}return P={get basename(){return p},get future(){return y},get state(){return M},get routes(){return f},get window(){return t},initialize:function(){if(E=e.history.listen((t=>{let{action:a,location:n,delta:r}=t;if(Le)return void(Le=!1);u(0===Te.size||null!=r,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let i=et({currentLocation:M.location,nextLocation:n,historyAction:a});return i&&null!=r?(Le=!0,e.history.go(-1*r),void Ze(i,{state:"blocked",location:n,proceed(){Ze(i,{state:"proceeding",proceed:void 0,reset:void 0,location:n}),e.history.go(r)},reset(){let e=new Map(M.blockers);e.set(i,Y),Ie({blockers:e})}})):_e(a,n)})),a){!function(e,t){try{let a=e.sessionStorage.getItem(ee);if(a){let e=JSON.parse(a);for(let[a,n]of Object.entries(e||{}))n&&Array.isArray(n)&&t.set(a,new Set(n||[]))}}catch(e){}}(t,I);let e=()=>function(e,t){if(t.size>0){let a={};for(let[e,n]of t)a[e]=[...n];try{e.sessionStorage.setItem(ee,JSON.stringify(a))}catch(e){u(!1,"Failed to save applied view transitions in sessionStorage ("+e+").")}}}(t,I);t.addEventListener("pagehide",e),B=()=>t.removeEventListener("pagehide",e)}return M.initialized||_e(n.Pop,M.location,{initialHydration:!0}),P},subscribe:function(e){return R.add(e),()=>R.delete(e)},enableScrollRestoration:function(e,t,a){if(w=e,S=t,N=a||null,!k&&M.navigation===K){k=!0;let e=nt(M.location,M.matches);null!=e&&Ie({restoreScrollPosition:e})}return()=>{w=null,S=null,N=null}},navigate:async function t(a,r){if("number"==typeof a)return void e.history.go(a);let i=te(M.location,M.matches,p,y.v7_prependBasename,a,y.v7_relativeSplatPath,null==r?void 0:r.fromRouteId,null==r?void 0:r.relative),{path:l,submission:s,error:c}=ae(y.v7_normalizeFormMethod,!1,i,r),u=M.location,m=d(M.location,l,r&&r.state);m=o({},m,e.history.encodeLocation(m));let f=r&&null!=r.replace?r.replace:void 0,h=n.Push;!0===f?h=n.Replace:!1===f||null!=s&&ke(s.formMethod)&&s.formAction===M.location.pathname+M.location.search&&(h=n.Replace);let g=r&&"preventScrollReset"in r?!0===r.preventScrollReset:void 0,v=!0===(r&&r.unstable_flushSync),b=et({currentLocation:u,nextLocation:m,historyAction:h});if(!b)return await _e(h,m,{submission:s,pendingError:c,preventScrollReset:g,replace:r&&r.replace,enableViewTransition:r&&r.unstable_viewTransition,flushSync:v});Ze(b,{state:"blocked",location:m,proceed(){Ze(b,{state:"proceeding",proceed:void 0,reset:void 0,location:m}),t(a,r)},reset(){let e=new Map(M.blockers);e.set(b,Y),Ie({blockers:e})}})},fetch:function(t,a,n,i){if(r)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");U.has(t)&&Qe(t);let o=!0===(i&&i.unstable_flushSync),s=l||f,u=te(M.location,M.matches,p,y.v7_prependBasename,n,y.v7_relativeSplatPath,a,null==i?void 0:i.relative),m=b(s,u,p);if(!m)return void Ue(t,a,be(404,{pathname:u}),{flushSync:o});let{path:d,submission:h,error:g}=ae(y.v7_normalizeFormMethod,!0,u,i);if(g)return void Ue(t,a,g,{flushSync:o});let v=Oe(m,d);T=!0===(i&&i.preventScrollReset),h&&ke(h.formMethod)?async function(t,a,n,r,i,o,s){if(Ve(),de.delete(t),!r.route.action&&!r.route.lazy){let e=be(405,{method:s.formMethod,pathname:n,routeId:a});return void Ue(t,a,e,{flushSync:o})}let u=M.fetchers.get(t);He(t,function(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0}}(s,u),{flushSync:o});let m=new AbortController,d=ue(e.history,n,m.signal,s);U.set(t,m);let h=W,g=(await Fe("action",d,[r],i))[0];if(d.signal.aborted)return void(U.get(t)===m&&U.delete(t));if(y.v7_fetcherPersist&&Pe.has(t)){if(Ne(g)||we(g))return void He(t,Me(void 0))}else{if(Ne(g))return U.delete(t),re>h?void He(t,Me(void 0)):(me.add(t),He(t,De(s)),ze(d,g,{fetcherSubmission:s}));if(we(g))return void Ue(t,a,g.error)}if(Re(g))throw be(400,{type:"defer-action"});let v=M.navigation.location||M.location,E=ue(e.history,v,m.signal),R=l||f,w="idle"!==M.navigation.state?b(R,M.navigation.location,p):M.matches;c(w,"Didn't find any matches after fetcher action");let N=++W;ie.set(t,N);let S=De(s,g.data);M.fetchers.set(t,S);let[k,C]=ne(e.history,M,w,s,v,!1,y.unstable_skipActionErrorRevalidation,z,V,H,Pe,de,me,R,p,[r.route.id,g]);C.filter((e=>e.key!==t)).forEach((e=>{let t=e.key,a=M.fetchers.get(t),n=De(void 0,a?a.data:void 0);M.fetchers.set(t,n),U.has(t)&&Qe(t),e.controller&&U.set(t,e.controller)})),Ie({fetchers:new Map(M.fetchers)});let x=()=>C.forEach((e=>Qe(e.key)));m.signal.addEventListener("abort",x);let{loaderResults:P,fetcherResults:O}=await $e(M.matches,w,k,C,E);if(m.signal.aborted)return;m.signal.removeEventListener("abort",x),ie.delete(t),U.delete(t),C.forEach((e=>U.delete(e.key)));let q=ye([...P,...O]);if(q){if(q.idx>=k.length){let e=C[q.idx-k.length].key;me.add(e)}return ze(E,q.result)}let{loaderData:D,errors:T}=fe(M,M.matches,k,P,void 0,C,O,je);if(M.fetchers.has(t)){let e=Me(g.data);M.fetchers.set(t,e)}Ye(N),"loading"===M.navigation.state&&N>re?(c(j,"Expected pending action"),A&&A.abort(),Be(M.navigation.location,{matches:w,loaderData:D,errors:T,fetchers:new Map(M.fetchers)})):(Ie({errors:T,loaderData:pe(M.loaderData,D,w,T),fetchers:new Map(M.fetchers)}),z=!1)}(t,a,d,v,m,o,h):(de.set(t,{routeId:a,path:d}),async function(t,a,n,r,i,l,o){let s=M.fetchers.get(t);He(t,De(o,s?s.data:void 0),{flushSync:l});let u=new AbortController,m=ue(e.history,n,u.signal);U.set(t,u);let d=W,f=(await Fe("loader",m,[r],i))[0];if(Re(f)&&(f=await xe(f,m.signal,!0)||f),U.get(t)===u&&U.delete(t),!m.signal.aborted){if(!Pe.has(t))return Ne(f)?re>d?void He(t,Me(void 0)):(me.add(t),void await ze(m,f)):void(we(f)?Ue(t,a,f.error):(c(!Re(f),"Unhandled fetcher deferred data"),He(t,Me(f.data))));He(t,Me(void 0))}}(t,a,d,v,m,o,h))},revalidate:function(){Ve(),Ie({revalidation:"loading"}),"submitting"!==M.navigation.state&&("idle"!==M.navigation.state?_e(j||M.historyAction,M.navigation.location,{overrideNavigation:M.navigation}):_e(M.historyAction,M.location,{startUninterruptedRevalidation:!0}))},createHref:t=>e.history.createHref(t),encodeLocation:t=>e.history.encodeLocation(t),getFetcher:We,deleteFetcher:function(e){if(y.v7_fetcherPersist){let t=(Ee.get(e)||0)-1;t<=0?(Ee.delete(e),Pe.add(e)):Ee.set(e,t)}else Je(e);Ie({fetchers:new Map(M.fetchers)})},dispose:function(){E&&E(),B&&B(),R.clear(),A&&A.abort(),M.fetchers.forEach(((e,t)=>Je(t))),M.blockers.forEach(((e,t)=>Xe(t)))},getBlocker:function(e,t){let a=M.blockers.get(e)||Y;return Te.get(e)!==t&&Te.set(e,t),a},deleteBlocker:Xe,_internalFetchControllers:U,_internalActiveDeferreds:je,_internalSetRoutes:function(e){m={},l=v(e,i,void 0,m)}},P}({basename:void 0,future:Ra({},void 0,{v7_prependBasename:!0}),history:(hw={window:void 0},void 0===hw&&(hw={}),function(e,t,a,r){void 0===r&&(r={});let{window:i=document.defaultView,v5Compat:l=!1}=r,u=i.history,p=n.Pop,h=null,g=v();function v(){return(u.state||{idx:null}).idx}function b(){p=n.Pop;let e=v(),t=null==e?null:e-g;g=e,h&&h({action:p,location:E.location,delta:t})}function y(e){let t="null"!==i.location.origin?i.location.origin:i.location.href,a="string"==typeof e?e:f(e);return a=a.replace(/ $/,"%20"),c(t,"No window.location.(origin|href) available to create URL for href: "+a),new URL(a,t)}null==g&&(g=0,u.replaceState(o({},u.state,{idx:g}),""));let E={get action(){return p},get location(){return e(i,u)},listen(e){if(h)throw new Error("A history only accepts one active listener");return i.addEventListener(s,b),h=e,()=>{i.removeEventListener(s,b),h=null}},createHref:e=>t(i,e),createURL:y,encodeLocation(e){let t=y(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){p=n.Push;let r=d(E.location,e,t);a&&a(r,e),g=v()+1;let o=m(r,g),s=E.createHref(r);try{u.pushState(o,"",s)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;i.location.assign(s)}l&&h&&h({action:p,location:E.location,delta:1})},replace:function(e,t){p=n.Replace;let r=d(E.location,e,t);a&&a(r,e),g=v();let i=m(r,g),o=E.createHref(r);u.replaceState(i,"",o),l&&h&&h({action:p,location:E.location,delta:0})},go:e=>u.go(e)};return E}((function(e,t){let{pathname:a,search:n,hash:r}=e.location;return d("",{pathname:a,search:n,hash:r},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:f(t)}),null,hw)),hydrationData:function(){var e;let t=null==(e=window)?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=Ra({},t,{errors:Ca(t.errors)})),t}(),routes:pw,mapRouteProperties:function(e){let t={hasErrorBoundary:null!=e.ErrorBoundary||null!=e.errorElement};return e.Component&&Object.assign(t,{element:r.createElement(e.Component),Component:void 0}),e.HydrateFallback&&Object.assign(t,{hydrateFallbackElement:r.createElement(e.HydrateFallback),HydrateFallback:void 0}),e.ErrorBoundary&&Object.assign(t,{errorElement:r.createElement(e.ErrorBoundary),ErrorBoundary:void 0}),t},unstable_dataStrategy:void 0,window:void 0}).initialize());function vw(){return React.createElement(React.Fragment,null,React.createElement(Ma,{router:gw}))}!function(e,t){var a,n=function(e,t){var a="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!a){if(Array.isArray(e)||(a=function(e,t){if(e){if("string"==typeof e)return dw(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?dw(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){a&&(e=a);var n=0,r=function(){};return{s:r,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,l=!0,o=!1;return{s:function(){a=a.call(e)},n:function(){var e=a.next();return l=e.done,e},e:function(e){o=!0,i=e},f:function(){try{l||null==a.return||a.return()}finally{if(o)throw i}}}}(e.sort((function(e,t){return t.counterPurchase-e.counterPurchase})).filter((function(e,t){return t<=9})));try{for(n.s();!(a=n.n()).done;){var r=a.value;t.push(r)}}catch(e){n.e(e)}finally{n.f()}}(Bi,Ph),function(e,t){var a=[];e.map((function(e){e.oldPrice&&a.push(e)})),a.length<12&&e.map((function(e){e.oldPrice||a.push(e)}));var n,r=function(e,t){var a="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!a){if(Array.isArray(e)||(a=function(e,t){if(e){if("string"==typeof e)return fw(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?fw(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){a&&(e=a);var n=0,r=function(){};return{s:r,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,l=!0,o=!1;return{s:function(){a=a.call(e)},n:function(){var e=a.next();return l=e.done,e},e:function(e){o=!0,i=e},f:function(){try{l||null==a.return||a.return()}finally{if(o)throw i}}}}(a.filter((function(e,t){return t<=11})).sort((function(e,t){return t.counterPurchase-e.counterPurchase})));try{for(r.s();!(n=r.n()).done;){var i=n.value;t.push(i)}}catch(e){r.e(e)}finally{r.f()}}(Bi,Vh),$RefreshReg$(vw,"App"),l.createRoot(document.getElementById("root")).render(r.createElement(r.StrictMode,null,r.createElement(vw,null)))},228:e=>{"use strict";var t=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},a=0;a<10;a++)t["_"+String.fromCharCode(a)]=a;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,r){for(var i,l,o=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),s=1;s<arguments.length;s++){for(var c in i=Object(arguments[s]))a.call(i,c)&&(o[c]=i[c]);if(t){l=t(i);for(var u=0;u<l.length;u++)n.call(i,l[u])&&(o[l[u]]=i[l[u]])}}return o}},694:(e,t,a)=>{"use strict";var n=a(925);function r(){}function i(){}i.resetWarningCache=r,e.exports=function(){function e(e,t,a,r,i,l){if(l!==n){var o=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw o.name="Invariant Violation",o}}function t(){return e}e.isRequired=e;var a={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:r};return a.PropTypes=a,a}},556:(e,t,a)=>{e.exports=a(694)()},925:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},551:(e,t,a)=>{"use strict";var n=a(540),r=a(982);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,a=1;a<arguments.length;a++)t+="&args[]="+encodeURIComponent(arguments[a]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var l=new Set,o={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(o[e]=t,e=0;e<t.length;e++)l.add(t[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),m=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},p={};function h(e,t,a,n,r,i,l){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=r,this.mustUseProperty=a,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=l}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new h(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function y(e,t,a,n){var r=g.hasOwnProperty(t)?g[t]:null;(null!==r?0!==r.type:n||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,a,n){if(null==t||function(e,t,a,n){if(null!==a&&0===a.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!n&&(null!==a?!a.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,a,n))return!0;if(n)return!1;if(null!==a)switch(a.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,a,r,n)&&(a=null),n||null===r?function(e){return!!m.call(p,e)||!m.call(f,e)&&(d.test(e)?p[e]=!0:(f[e]=!0,!1))}(t)&&(null===a?e.removeAttribute(t):e.setAttribute(t,""+a)):r.mustUseProperty?e[r.propertyName]=null===a?3!==r.type&&"":a:(t=r.attributeName,n=r.attributeNamespace,null===a?e.removeAttribute(t):(a=3===(r=r.type)||4===r&&!0===a?"":""+a,n?e.setAttributeNS(n,t,a):e.setAttribute(t,a))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,b);g[t]=new h(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,b);g[t]=new h(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,b);g[t]=new h(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var E=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,R=Symbol.for("react.element"),w=Symbol.for("react.portal"),N=Symbol.for("react.fragment"),S=Symbol.for("react.strict_mode"),k=Symbol.for("react.profiler"),C=Symbol.for("react.provider"),x=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),O=Symbol.for("react.suspense"),q=Symbol.for("react.suspense_list"),A=Symbol.for("react.memo"),D=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var M=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var j=Symbol.iterator;function T(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=j&&e[j]||e["@@iterator"])?e:null}var L,I=Object.assign;function B(e){if(void 0===L)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);L=t&&t[1]||""}return"\n"+L+e}var _=!1;function z(e,t){if(!e||_)return"";_=!0;var a=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var n=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){n=e}e.call(t.prototype)}else{try{throw Error()}catch(e){n=e}e()}}catch(t){if(t&&n&&"string"==typeof t.stack){for(var r=t.stack.split("\n"),i=n.stack.split("\n"),l=r.length-1,o=i.length-1;1<=l&&0<=o&&r[l]!==i[o];)o--;for(;1<=l&&0<=o;l--,o--)if(r[l]!==i[o]){if(1!==l||1!==o)do{if(l--,0>--o||r[l]!==i[o]){var s="\n"+r[l].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=l&&0<=o);break}}}finally{_=!1,Error.prepareStackTrace=a}return(e=e?e.displayName||e.name:"")?B(e):""}function F(e){switch(e.tag){case 5:return B(e.type);case 16:return B("Lazy");case 13:return B("Suspense");case 19:return B("SuspenseList");case 0:case 2:case 15:return z(e.type,!1);case 11:return z(e.type.render,!1);case 1:return z(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case N:return"Fragment";case w:return"Portal";case k:return"Profiler";case S:return"StrictMode";case O:return"Suspense";case q:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case x:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case A:return null!==(t=e.displayName||null)?t:$(e.type)||"Memo";case D:t=e._payload,e=e._init;try{return $(e(t))}catch(e){}}return null}function V(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return $(t);case 8:return t===S?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function H(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function U(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function W(e){e._valueTracker||(e._valueTracker=function(e){var t=U(e)?"checked":"value",a=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==a&&"function"==typeof a.get&&"function"==typeof a.set){var r=a.get,i=a.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return r.call(this)},set:function(e){n=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:a.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function J(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var a=t.getValue(),n="";return e&&(n=U(e)?e.checked?"true":"false":e.value),(e=n)!==a&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function K(e,t){var a=t.checked;return I({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=a?a:e._wrapperState.initialChecked})}function G(e,t){var a=null==t.defaultValue?"":t.defaultValue,n=null!=t.checked?t.checked:t.defaultChecked;a=H(null!=t.value?t.value:a),e._wrapperState={initialChecked:n,initialValue:a,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Y(e,t){null!=(t=t.checked)&&y(e,"checked",t,!1)}function X(e,t){Y(e,t);var a=H(t.value),n=t.type;if(null!=a)"number"===n?(0===a&&""===e.value||e.value!=a)&&(e.value=""+a):e.value!==""+a&&(e.value=""+a);else if("submit"===n||"reset"===n)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,a):t.hasOwnProperty("defaultValue")&&ee(e,t.type,H(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,a){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!("submit"!==n&&"reset"!==n||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,a||t===e.value||(e.value=t),e.defaultValue=t}""!==(a=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==a&&(e.name=a)}function ee(e,t,a){"number"===t&&Q(e.ownerDocument)===e||(null==a?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+a&&(e.defaultValue=""+a))}var te=Array.isArray;function ae(e,t,a,n){if(e=e.options,t){t={};for(var r=0;r<a.length;r++)t["$"+a[r]]=!0;for(a=0;a<e.length;a++)r=t.hasOwnProperty("$"+e[a].value),e[a].selected!==r&&(e[a].selected=r),r&&n&&(e[a].defaultSelected=!0)}else{for(a=""+H(a),t=null,r=0;r<e.length;r++){if(e[r].value===a)return e[r].selected=!0,void(n&&(e[r].defaultSelected=!0));null!==t||e[r].disabled||(t=e[r])}null!==t&&(t.selected=!0)}}function ne(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return I({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function re(e,t){var a=t.value;if(null==a){if(a=t.children,t=t.defaultValue,null!=a){if(null!=t)throw Error(i(92));if(te(a)){if(1<a.length)throw Error(i(93));a=a[0]}t=a}null==t&&(t=""),a=t}e._wrapperState={initialValue:H(a)}}function ie(e,t){var a=H(t.value),n=H(t.defaultValue);null!=a&&((a=""+a)!==e.value&&(e.value=a),null==t.defaultValue&&e.defaultValue!==a&&(e.defaultValue=a)),null!=n&&(e.defaultValue=""+n)}function le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function oe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?oe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,ue,me=(ue=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,a,n){MSApp.execUnsafeLocalFunction((function(){return ue(e,t)}))}:ue);function de(e,t){if(t){var a=e.firstChild;if(a&&a===e.lastChild&&3===a.nodeType)return void(a.nodeValue=t)}e.textContent=t}var fe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function he(e,t,a){return null==t||"boolean"==typeof t||""===t?"":a||"number"!=typeof t||0===t||fe.hasOwnProperty(e)&&fe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var a in e=e.style,t)if(t.hasOwnProperty(a)){var n=0===a.indexOf("--"),r=he(a,t[a],n);"float"===a&&(a="cssFloat"),n?e.setProperty(a,r):e[a]=r}}Object.keys(fe).forEach((function(e){pe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),fe[t]=fe[e]}))}));var ve=I({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function be(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function ye(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ee=null;function Re(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var we=null,Ne=null,Se=null;function ke(e){if(e=yr(e)){if("function"!=typeof we)throw Error(i(280));var t=e.stateNode;t&&(t=Rr(t),we(e.stateNode,e.type,t))}}function Ce(e){Ne?Se?Se.push(e):Se=[e]:Ne=e}function xe(){if(Ne){var e=Ne,t=Se;if(Se=Ne=null,ke(e),t)for(e=0;e<t.length;e++)ke(t[e])}}function Pe(e,t){return e(t)}function Oe(){}var qe=!1;function Ae(e,t,a){if(qe)return e(t,a);qe=!0;try{return Pe(e,t,a)}finally{qe=!1,(null!==Ne||null!==Se)&&(Oe(),xe())}}function De(e,t){var a=e.stateNode;if(null===a)return null;var n=Rr(a);if(null===n)return null;a=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!n;break e;default:e=!1}if(e)return null;if(a&&"function"!=typeof a)throw Error(i(231,t,typeof a));return a}var Me=!1;if(u)try{var je={};Object.defineProperty(je,"passive",{get:function(){Me=!0}}),window.addEventListener("test",je,je),window.removeEventListener("test",je,je)}catch(ue){Me=!1}function Te(e,t,a,n,r,i,l,o,s){var c=Array.prototype.slice.call(arguments,3);try{t.apply(a,c)}catch(e){this.onError(e)}}var Le=!1,Ie=null,Be=!1,_e=null,ze={onError:function(e){Le=!0,Ie=e}};function Fe(e,t,a,n,r,i,l,o,s){Le=!1,Ie=null,Te.apply(ze,arguments)}function $e(e){var t=e,a=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(a=t.return),e=t.return}while(e)}return 3===t.tag?a:null}function Ve(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function He(e){if($e(e)!==e)throw Error(i(188))}function Ue(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=$e(e)))throw Error(i(188));return t!==e?null:e}for(var a=e,n=t;;){var r=a.return;if(null===r)break;var l=r.alternate;if(null===l){if(null!==(n=r.return)){a=n;continue}break}if(r.child===l.child){for(l=r.child;l;){if(l===a)return He(r),e;if(l===n)return He(r),t;l=l.sibling}throw Error(i(188))}if(a.return!==n.return)a=r,n=l;else{for(var o=!1,s=r.child;s;){if(s===a){o=!0,a=r,n=l;break}if(s===n){o=!0,n=r,a=l;break}s=s.sibling}if(!o){for(s=l.child;s;){if(s===a){o=!0,a=l,n=r;break}if(s===n){o=!0,n=l,a=r;break}s=s.sibling}if(!o)throw Error(i(189))}}if(a.alternate!==n)throw Error(i(190))}if(3!==a.tag)throw Error(i(188));return a.stateNode.current===a?e:t}(e))?We(e):null}function We(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=We(e);if(null!==t)return t;e=e.sibling}return null}var Je=r.unstable_scheduleCallback,Qe=r.unstable_cancelCallback,Ke=r.unstable_shouldYield,Ge=r.unstable_requestPaint,Ye=r.unstable_now,Xe=r.unstable_getCurrentPriorityLevel,Ze=r.unstable_ImmediatePriority,et=r.unstable_UserBlockingPriority,tt=r.unstable_NormalPriority,at=r.unstable_LowPriority,nt=r.unstable_IdlePriority,rt=null,it=null,lt=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ot(e)/st|0)|0},ot=Math.log,st=Math.LN2,ct=64,ut=4194304;function mt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var a=e.pendingLanes;if(0===a)return 0;var n=0,r=e.suspendedLanes,i=e.pingedLanes,l=268435455&a;if(0!==l){var o=l&~r;0!==o?n=mt(o):0!=(i&=l)&&(n=mt(i))}else 0!=(l=a&~r)?n=mt(l):0!==i&&(n=mt(i));if(0===n)return 0;if(0!==t&&t!==n&&!(t&r)&&((r=n&-n)>=(i=t&-t)||16===r&&4194240&i))return t;if(4&n&&(n|=16&a),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=n;0<t;)r=1<<(a=31-lt(t)),n|=e[a],t&=~r;return n}function ft(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function pt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ht(){var e=ct;return!(4194240&(ct<<=1))&&(ct=64),e}function gt(e){for(var t=[],a=0;31>a;a++)t.push(e);return t}function vt(e,t,a){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-lt(t)]=a}function bt(e,t){var a=e.entangledLanes|=t;for(e=e.entanglements;a;){var n=31-lt(a),r=1<<n;r&t|e[n]&t&&(e[n]|=t),a&=~r}}var yt=0;function Et(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var Rt,wt,Nt,St,kt,Ct=!1,xt=[],Pt=null,Ot=null,qt=null,At=new Map,Dt=new Map,Mt=[],jt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Tt(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":qt=null;break;case"pointerover":case"pointerout":At.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Dt.delete(t.pointerId)}}function Lt(e,t,a,n,r,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:a,eventSystemFlags:n,nativeEvent:i,targetContainers:[r]},null!==t&&null!==(t=yr(t))&&wt(t),e):(e.eventSystemFlags|=n,t=e.targetContainers,null!==r&&-1===t.indexOf(r)&&t.push(r),e)}function It(e){var t=br(e.target);if(null!==t){var a=$e(t);if(null!==a)if(13===(t=a.tag)){if(null!==(t=Ve(a)))return e.blockedOn=t,void kt(e.priority,(function(){Nt(a)}))}else if(3===t&&a.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===a.tag?a.stateNode.containerInfo:null)}e.blockedOn=null}function Bt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var a=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==a)return null!==(t=yr(a))&&wt(t),e.blockedOn=a,!1;var n=new(a=e.nativeEvent).constructor(a.type,a);Ee=n,a.target.dispatchEvent(n),Ee=null,t.shift()}return!0}function _t(e,t,a){Bt(e)&&a.delete(t)}function zt(){Ct=!1,null!==Pt&&Bt(Pt)&&(Pt=null),null!==Ot&&Bt(Ot)&&(Ot=null),null!==qt&&Bt(qt)&&(qt=null),At.forEach(_t),Dt.forEach(_t)}function Ft(e,t){e.blockedOn===t&&(e.blockedOn=null,Ct||(Ct=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,zt)))}function $t(e){function t(t){return Ft(t,e)}if(0<xt.length){Ft(xt[0],e);for(var a=1;a<xt.length;a++){var n=xt[a];n.blockedOn===e&&(n.blockedOn=null)}}for(null!==Pt&&Ft(Pt,e),null!==Ot&&Ft(Ot,e),null!==qt&&Ft(qt,e),At.forEach(t),Dt.forEach(t),a=0;a<Mt.length;a++)(n=Mt[a]).blockedOn===e&&(n.blockedOn=null);for(;0<Mt.length&&null===(a=Mt[0]).blockedOn;)It(a),null===a.blockedOn&&Mt.shift()}var Vt=E.ReactCurrentBatchConfig,Ht=!0;function Ut(e,t,a,n){var r=yt,i=Vt.transition;Vt.transition=null;try{yt=1,Jt(e,t,a,n)}finally{yt=r,Vt.transition=i}}function Wt(e,t,a,n){var r=yt,i=Vt.transition;Vt.transition=null;try{yt=4,Jt(e,t,a,n)}finally{yt=r,Vt.transition=i}}function Jt(e,t,a,n){if(Ht){var r=Kt(e,t,a,n);if(null===r)Hn(e,t,n,Qt,a),Tt(e,n);else if(function(e,t,a,n,r){switch(t){case"focusin":return Pt=Lt(Pt,e,t,a,n,r),!0;case"dragenter":return Ot=Lt(Ot,e,t,a,n,r),!0;case"mouseover":return qt=Lt(qt,e,t,a,n,r),!0;case"pointerover":var i=r.pointerId;return At.set(i,Lt(At.get(i)||null,e,t,a,n,r)),!0;case"gotpointercapture":return i=r.pointerId,Dt.set(i,Lt(Dt.get(i)||null,e,t,a,n,r)),!0}return!1}(r,e,t,a,n))n.stopPropagation();else if(Tt(e,n),4&t&&-1<jt.indexOf(e)){for(;null!==r;){var i=yr(r);if(null!==i&&Rt(i),null===(i=Kt(e,t,a,n))&&Hn(e,t,n,Qt,a),i===r)break;r=i}null!==r&&n.stopPropagation()}else Hn(e,t,n,null,a)}}var Qt=null;function Kt(e,t,a,n){if(Qt=null,null!==(e=br(e=Re(n))))if(null===(t=$e(e)))e=null;else if(13===(a=t.tag)){if(null!==(e=Ve(t)))return e;e=null}else if(3===a){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Qt=e,null}function Gt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Xe()){case Ze:return 1;case et:return 4;case tt:case at:return 16;case nt:return 536870912;default:return 16}default:return 16}}var Yt=null,Xt=null,Zt=null;function ea(){if(Zt)return Zt;var e,t,a=Xt,n=a.length,r="value"in Yt?Yt.value:Yt.textContent,i=r.length;for(e=0;e<n&&a[e]===r[e];e++);var l=n-e;for(t=1;t<=l&&a[n-t]===r[i-t];t++);return Zt=r.slice(e,1<t?1-t:void 0)}function ta(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function aa(){return!0}function na(){return!1}function ra(e){function t(t,a,n,r,i){for(var l in this._reactName=t,this._targetInst=n,this.type=a,this.nativeEvent=r,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(r):r[l]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?aa:na,this.isPropagationStopped=na,this}return I(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=aa)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=aa)},persist:function(){},isPersistent:aa}),t}var ia,la,oa,sa={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ca=ra(sa),ua=I({},sa,{view:0,detail:0}),ma=ra(ua),da=I({},ua,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Sa,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==oa&&(oa&&"mousemove"===e.type?(ia=e.screenX-oa.screenX,la=e.screenY-oa.screenY):la=ia=0,oa=e),ia)},movementY:function(e){return"movementY"in e?e.movementY:la}}),fa=ra(da),pa=ra(I({},da,{dataTransfer:0})),ha=ra(I({},ua,{relatedTarget:0})),ga=ra(I({},sa,{animationName:0,elapsedTime:0,pseudoElement:0})),va=I({},sa,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),ba=ra(va),ya=ra(I({},sa,{data:0})),Ea={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Ra={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},wa={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Na(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=wa[e])&&!!t[e]}function Sa(){return Na}var ka=I({},ua,{key:function(e){if(e.key){var t=Ea[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=ta(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Ra[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Sa,charCode:function(e){return"keypress"===e.type?ta(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?ta(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Ca=ra(ka),xa=ra(I({},da,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pa=ra(I({},ua,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Sa})),Oa=ra(I({},sa,{propertyName:0,elapsedTime:0,pseudoElement:0})),qa=I({},da,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Aa=ra(qa),Da=[9,13,27,32],Ma=u&&"CompositionEvent"in window,ja=null;u&&"documentMode"in document&&(ja=document.documentMode);var Ta=u&&"TextEvent"in window&&!ja,La=u&&(!Ma||ja&&8<ja&&11>=ja),Ia=String.fromCharCode(32),Ba=!1;function _a(e,t){switch(e){case"keyup":return-1!==Da.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function za(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Fa=!1,$a={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Va(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!$a[e.type]:"textarea"===t}function Ha(e,t,a,n){Ce(n),0<(t=Wn(t,"onChange")).length&&(a=new ca("onChange","change",null,a,n),e.push({event:a,listeners:t}))}var Ua=null,Wa=null;function Ja(e){Bn(e,0)}function Qa(e){if(J(Er(e)))return e}function Ka(e,t){if("change"===e)return t}var Ga=!1;if(u){var Ya;if(u){var Xa="oninput"in document;if(!Xa){var Za=document.createElement("div");Za.setAttribute("oninput","return;"),Xa="function"==typeof Za.oninput}Ya=Xa}else Ya=!1;Ga=Ya&&(!document.documentMode||9<document.documentMode)}function en(){Ua&&(Ua.detachEvent("onpropertychange",tn),Wa=Ua=null)}function tn(e){if("value"===e.propertyName&&Qa(Wa)){var t=[];Ha(t,Wa,e,Re(e)),Ae(Ja,t)}}function an(e,t,a){"focusin"===e?(en(),Wa=a,(Ua=t).attachEvent("onpropertychange",tn)):"focusout"===e&&en()}function nn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qa(Wa)}function rn(e,t){if("click"===e)return Qa(t)}function ln(e,t){if("input"===e||"change"===e)return Qa(t)}var on="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function sn(e,t){if(on(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var a=Object.keys(e),n=Object.keys(t);if(a.length!==n.length)return!1;for(n=0;n<a.length;n++){var r=a[n];if(!m.call(t,r)||!on(e[r],t[r]))return!1}return!0}function cn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function un(e,t){var a,n=cn(e);for(e=0;n;){if(3===n.nodeType){if(a=e+n.textContent.length,e<=t&&a>=t)return{node:n,offset:t-e};e=a}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=cn(n)}}function mn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?mn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dn(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var a="string"==typeof t.contentWindow.location.href}catch(e){a=!1}if(!a)break;t=Q((e=t.contentWindow).document)}return t}function fn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function pn(e){var t=dn(),a=e.focusedElem,n=e.selectionRange;if(t!==a&&a&&a.ownerDocument&&mn(a.ownerDocument.documentElement,a)){if(null!==n&&fn(a))if(t=n.start,void 0===(e=n.end)&&(e=t),"selectionStart"in a)a.selectionStart=t,a.selectionEnd=Math.min(e,a.value.length);else if((e=(t=a.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var r=a.textContent.length,i=Math.min(n.start,r);n=void 0===n.end?i:Math.min(n.end,r),!e.extend&&i>n&&(r=n,n=i,i=r),r=un(a,i);var l=un(a,n);r&&l&&(1!==e.rangeCount||e.anchorNode!==r.node||e.anchorOffset!==r.offset||e.focusNode!==l.node||e.focusOffset!==l.offset)&&((t=t.createRange()).setStart(r.node,r.offset),e.removeAllRanges(),i>n?(e.addRange(t),e.extend(l.node,l.offset)):(t.setEnd(l.node,l.offset),e.addRange(t)))}for(t=[],e=a;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof a.focus&&a.focus(),a=0;a<t.length;a++)(e=t[a]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var hn=u&&"documentMode"in document&&11>=document.documentMode,gn=null,vn=null,bn=null,yn=!1;function En(e,t,a){var n=a.window===a?a.document:9===a.nodeType?a:a.ownerDocument;yn||null==gn||gn!==Q(n)||(n="selectionStart"in(n=gn)&&fn(n)?{start:n.selectionStart,end:n.selectionEnd}:{anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},bn&&sn(bn,n)||(bn=n,0<(n=Wn(vn,"onSelect")).length&&(t=new ca("onSelect","select",null,t,a),e.push({event:t,listeners:n}),t.target=gn)))}function Rn(e,t){var a={};return a[e.toLowerCase()]=t.toLowerCase(),a["Webkit"+e]="webkit"+t,a["Moz"+e]="moz"+t,a}var wn={animationend:Rn("Animation","AnimationEnd"),animationiteration:Rn("Animation","AnimationIteration"),animationstart:Rn("Animation","AnimationStart"),transitionend:Rn("Transition","TransitionEnd")},Nn={},Sn={};function kn(e){if(Nn[e])return Nn[e];if(!wn[e])return e;var t,a=wn[e];for(t in a)if(a.hasOwnProperty(t)&&t in Sn)return Nn[e]=a[t];return e}u&&(Sn=document.createElement("div").style,"AnimationEvent"in window||(delete wn.animationend.animation,delete wn.animationiteration.animation,delete wn.animationstart.animation),"TransitionEvent"in window||delete wn.transitionend.transition);var Cn=kn("animationend"),xn=kn("animationiteration"),Pn=kn("animationstart"),On=kn("transitionend"),qn=new Map,An="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Dn(e,t){qn.set(e,t),s(t,[e])}for(var Mn=0;Mn<An.length;Mn++){var jn=An[Mn];Dn(jn.toLowerCase(),"on"+(jn[0].toUpperCase()+jn.slice(1)))}Dn(Cn,"onAnimationEnd"),Dn(xn,"onAnimationIteration"),Dn(Pn,"onAnimationStart"),Dn("dblclick","onDoubleClick"),Dn("focusin","onFocus"),Dn("focusout","onBlur"),Dn(On,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Tn="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ln=new Set("cancel close invalid load scroll toggle".split(" ").concat(Tn));function In(e,t,a){var n=e.type||"unknown-event";e.currentTarget=a,function(e,t,a,n,r,l,o,s,c){if(Fe.apply(this,arguments),Le){if(!Le)throw Error(i(198));var u=Ie;Le=!1,Ie=null,Be||(Be=!0,_e=u)}}(n,t,void 0,e),e.currentTarget=null}function Bn(e,t){t=!!(4&t);for(var a=0;a<e.length;a++){var n=e[a],r=n.event;n=n.listeners;e:{var i=void 0;if(t)for(var l=n.length-1;0<=l;l--){var o=n[l],s=o.instance,c=o.currentTarget;if(o=o.listener,s!==i&&r.isPropagationStopped())break e;In(r,o,c),i=s}else for(l=0;l<n.length;l++){if(s=(o=n[l]).instance,c=o.currentTarget,o=o.listener,s!==i&&r.isPropagationStopped())break e;In(r,o,c),i=s}}}if(Be)throw e=_e,Be=!1,_e=null,e}function _n(e,t){var a=t[hr];void 0===a&&(a=t[hr]=new Set);var n=e+"__bubble";a.has(n)||(Vn(t,e,2,!1),a.add(n))}function zn(e,t,a){var n=0;t&&(n|=4),Vn(a,e,n,t)}var Fn="_reactListening"+Math.random().toString(36).slice(2);function $n(e){if(!e[Fn]){e[Fn]=!0,l.forEach((function(t){"selectionchange"!==t&&(Ln.has(t)||zn(t,!1,e),zn(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Fn]||(t[Fn]=!0,zn("selectionchange",!1,t))}}function Vn(e,t,a,n){switch(Gt(t)){case 1:var r=Ut;break;case 4:r=Wt;break;default:r=Jt}a=r.bind(null,t,a,e),r=void 0,!Me||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(r=!0),n?void 0!==r?e.addEventListener(t,a,{capture:!0,passive:r}):e.addEventListener(t,a,!0):void 0!==r?e.addEventListener(t,a,{passive:r}):e.addEventListener(t,a,!1)}function Hn(e,t,a,n,r){var i=n;if(!(1&t||2&t||null===n))e:for(;;){if(null===n)return;var l=n.tag;if(3===l||4===l){var o=n.stateNode.containerInfo;if(o===r||8===o.nodeType&&o.parentNode===r)break;if(4===l)for(l=n.return;null!==l;){var s=l.tag;if((3===s||4===s)&&((s=l.stateNode.containerInfo)===r||8===s.nodeType&&s.parentNode===r))return;l=l.return}for(;null!==o;){if(null===(l=br(o)))return;if(5===(s=l.tag)||6===s){n=i=l;continue e}o=o.parentNode}}n=n.return}Ae((function(){var n=i,r=Re(a),l=[];e:{var o=qn.get(e);if(void 0!==o){var s=ca,c=e;switch(e){case"keypress":if(0===ta(a))break e;case"keydown":case"keyup":s=Ca;break;case"focusin":c="focus",s=ha;break;case"focusout":c="blur",s=ha;break;case"beforeblur":case"afterblur":s=ha;break;case"click":if(2===a.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=fa;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=pa;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Pa;break;case Cn:case xn:case Pn:s=ga;break;case On:s=Oa;break;case"scroll":s=ma;break;case"wheel":s=Aa;break;case"copy":case"cut":case"paste":s=ba;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=xa}var u=!!(4&t),m=!u&&"scroll"===e,d=u?null!==o?o+"Capture":null:o;u=[];for(var f,p=n;null!==p;){var h=(f=p).stateNode;if(5===f.tag&&null!==h&&(f=h,null!==d&&null!=(h=De(p,d))&&u.push(Un(p,h,f))),m)break;p=p.return}0<u.length&&(o=new s(o,c,null,a,r),l.push({event:o,listeners:u}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(o="mouseover"===e||"pointerover"===e)||a===Ee||!(c=a.relatedTarget||a.fromElement)||!br(c)&&!c[pr])&&(s||o)&&(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,s?(s=n,null!==(c=(c=a.relatedTarget||a.toElement)?br(c):null)&&(c!==(m=$e(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(s=null,c=n),s!==c)){if(u=fa,h="onMouseLeave",d="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(u=xa,h="onPointerLeave",d="onPointerEnter",p="pointer"),m=null==s?o:Er(s),f=null==c?o:Er(c),(o=new u(h,p+"leave",s,a,r)).target=m,o.relatedTarget=f,h=null,br(r)===n&&((u=new u(d,p+"enter",c,a,r)).target=f,u.relatedTarget=m,h=u),m=h,s&&c)e:{for(d=c,p=0,f=u=s;f;f=Jn(f))p++;for(f=0,h=d;h;h=Jn(h))f++;for(;0<p-f;)u=Jn(u),p--;for(;0<f-p;)d=Jn(d),f--;for(;p--;){if(u===d||null!==d&&u===d.alternate)break e;u=Jn(u),d=Jn(d)}u=null}else u=null;null!==s&&Qn(l,o,s,u,!1),null!==c&&null!==m&&Qn(l,m,c,u,!0)}if("select"===(s=(o=n?Er(n):window).nodeName&&o.nodeName.toLowerCase())||"input"===s&&"file"===o.type)var g=Ka;else if(Va(o))if(Ga)g=ln;else{g=nn;var v=an}else(s=o.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(g=rn);switch(g&&(g=g(e,n))?Ha(l,g,a,r):(v&&v(e,o,n),"focusout"===e&&(v=o._wrapperState)&&v.controlled&&"number"===o.type&&ee(o,"number",o.value)),v=n?Er(n):window,e){case"focusin":(Va(v)||"true"===v.contentEditable)&&(gn=v,vn=n,bn=null);break;case"focusout":bn=vn=gn=null;break;case"mousedown":yn=!0;break;case"contextmenu":case"mouseup":case"dragend":yn=!1,En(l,a,r);break;case"selectionchange":if(hn)break;case"keydown":case"keyup":En(l,a,r)}var b;if(Ma)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Fa?_a(e,a)&&(y="onCompositionEnd"):"keydown"===e&&229===a.keyCode&&(y="onCompositionStart");y&&(La&&"ko"!==a.locale&&(Fa||"onCompositionStart"!==y?"onCompositionEnd"===y&&Fa&&(b=ea()):(Xt="value"in(Yt=r)?Yt.value:Yt.textContent,Fa=!0)),0<(v=Wn(n,y)).length&&(y=new ya(y,e,null,a,r),l.push({event:y,listeners:v}),(b||null!==(b=za(a)))&&(y.data=b))),(b=Ta?function(e,t){switch(e){case"compositionend":return za(t);case"keypress":return 32!==t.which?null:(Ba=!0,Ia);case"textInput":return(e=t.data)===Ia&&Ba?null:e;default:return null}}(e,a):function(e,t){if(Fa)return"compositionend"===e||!Ma&&_a(e,t)?(e=ea(),Zt=Xt=Yt=null,Fa=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return La&&"ko"!==t.locale?null:t.data}}(e,a))&&0<(n=Wn(n,"onBeforeInput")).length&&(r=new ya("onBeforeInput","beforeinput",null,a,r),l.push({event:r,listeners:n}),r.data=b)}Bn(l,t)}))}function Un(e,t,a){return{instance:e,listener:t,currentTarget:a}}function Wn(e,t){for(var a=t+"Capture",n=[];null!==e;){var r=e,i=r.stateNode;5===r.tag&&null!==i&&(r=i,null!=(i=De(e,a))&&n.unshift(Un(e,i,r)),null!=(i=De(e,t))&&n.push(Un(e,i,r))),e=e.return}return n}function Jn(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qn(e,t,a,n,r){for(var i=t._reactName,l=[];null!==a&&a!==n;){var o=a,s=o.alternate,c=o.stateNode;if(null!==s&&s===n)break;5===o.tag&&null!==c&&(o=c,r?null!=(s=De(a,i))&&l.unshift(Un(a,s,o)):r||null!=(s=De(a,i))&&l.push(Un(a,s,o))),a=a.return}0!==l.length&&e.push({event:t,listeners:l})}var Kn=/\r\n?/g,Gn=/\u0000|\uFFFD/g;function Yn(e){return("string"==typeof e?e:""+e).replace(Kn,"\n").replace(Gn,"")}function Xn(e,t,a){if(t=Yn(t),Yn(e)!==t&&a)throw Error(i(425))}function Zn(){}var er=null,tr=null;function ar(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var nr="function"==typeof setTimeout?setTimeout:void 0,rr="function"==typeof clearTimeout?clearTimeout:void 0,ir="function"==typeof Promise?Promise:void 0,lr="function"==typeof queueMicrotask?queueMicrotask:void 0!==ir?function(e){return ir.resolve(null).then(e).catch(or)}:nr;function or(e){setTimeout((function(){throw e}))}function sr(e,t){var a=t,n=0;do{var r=a.nextSibling;if(e.removeChild(a),r&&8===r.nodeType)if("/$"===(a=r.data)){if(0===n)return e.removeChild(r),void $t(t);n--}else"$"!==a&&"$?"!==a&&"$!"!==a||n++;a=r}while(a);$t(t)}function cr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ur(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var a=e.data;if("$"===a||"$!"===a||"$?"===a){if(0===t)return e;t--}else"/$"===a&&t++}e=e.previousSibling}return null}var mr=Math.random().toString(36).slice(2),dr="__reactFiber$"+mr,fr="__reactProps$"+mr,pr="__reactContainer$"+mr,hr="__reactEvents$"+mr,gr="__reactListeners$"+mr,vr="__reactHandles$"+mr;function br(e){var t=e[dr];if(t)return t;for(var a=e.parentNode;a;){if(t=a[pr]||a[dr]){if(a=t.alternate,null!==t.child||null!==a&&null!==a.child)for(e=ur(e);null!==e;){if(a=e[dr])return a;e=ur(e)}return t}a=(e=a).parentNode}return null}function yr(e){return!(e=e[dr]||e[pr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Er(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function Rr(e){return e[fr]||null}var wr=[],Nr=-1;function Sr(e){return{current:e}}function kr(e){0>Nr||(e.current=wr[Nr],wr[Nr]=null,Nr--)}function Cr(e,t){Nr++,wr[Nr]=e.current,e.current=t}var xr={},Pr=Sr(xr),Or=Sr(!1),qr=xr;function Ar(e,t){var a=e.type.contextTypes;if(!a)return xr;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var r,i={};for(r in a)i[r]=t[r];return n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Dr(e){return null!=e.childContextTypes}function Mr(){kr(Or),kr(Pr)}function jr(e,t,a){if(Pr.current!==xr)throw Error(i(168));Cr(Pr,t),Cr(Or,a)}function Tr(e,t,a){var n=e.stateNode;if(t=t.childContextTypes,"function"!=typeof n.getChildContext)return a;for(var r in n=n.getChildContext())if(!(r in t))throw Error(i(108,V(e)||"Unknown",r));return I({},a,n)}function Lr(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||xr,qr=Pr.current,Cr(Pr,e),Cr(Or,Or.current),!0}function Ir(e,t,a){var n=e.stateNode;if(!n)throw Error(i(169));a?(e=Tr(e,t,qr),n.__reactInternalMemoizedMergedChildContext=e,kr(Or),kr(Pr),Cr(Pr,e)):kr(Or),Cr(Or,a)}var Br=null,_r=!1,zr=!1;function Fr(e){null===Br?Br=[e]:Br.push(e)}function $r(){if(!zr&&null!==Br){zr=!0;var e=0,t=yt;try{var a=Br;for(yt=1;e<a.length;e++){var n=a[e];do{n=n(!0)}while(null!==n)}Br=null,_r=!1}catch(t){throw null!==Br&&(Br=Br.slice(e+1)),Je(Ze,$r),t}finally{yt=t,zr=!1}}return null}var Vr=[],Hr=0,Ur=null,Wr=0,Jr=[],Qr=0,Kr=null,Gr=1,Yr="";function Xr(e,t){Vr[Hr++]=Wr,Vr[Hr++]=Ur,Ur=e,Wr=t}function Zr(e,t,a){Jr[Qr++]=Gr,Jr[Qr++]=Yr,Jr[Qr++]=Kr,Kr=e;var n=Gr;e=Yr;var r=32-lt(n)-1;n&=~(1<<r),a+=1;var i=32-lt(t)+r;if(30<i){var l=r-r%5;i=(n&(1<<l)-1).toString(32),n>>=l,r-=l,Gr=1<<32-lt(t)+r|a<<r|n,Yr=i+e}else Gr=1<<i|a<<r|n,Yr=e}function ei(e){null!==e.return&&(Xr(e,1),Zr(e,1,0))}function ti(e){for(;e===Ur;)Ur=Vr[--Hr],Vr[Hr]=null,Wr=Vr[--Hr],Vr[Hr]=null;for(;e===Kr;)Kr=Jr[--Qr],Jr[Qr]=null,Yr=Jr[--Qr],Jr[Qr]=null,Gr=Jr[--Qr],Jr[Qr]=null}var ai=null,ni=null,ri=!1,ii=null;function li(e,t){var a=Ac(5,null,null,0);a.elementType="DELETED",a.stateNode=t,a.return=e,null===(t=e.deletions)?(e.deletions=[a],e.flags|=16):t.push(a)}function oi(e,t){switch(e.tag){case 5:var a=e.type;return null!==(t=1!==t.nodeType||a.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ai=e,ni=cr(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ai=e,ni=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(a=null!==Kr?{id:Gr,overflow:Yr}:null,e.memoizedState={dehydrated:t,treeContext:a,retryLane:1073741824},(a=Ac(18,null,null,0)).stateNode=t,a.return=e,e.child=a,ai=e,ni=null,!0);default:return!1}}function si(e){return!(!(1&e.mode)||128&e.flags)}function ci(e){if(ri){var t=ni;if(t){var a=t;if(!oi(e,t)){if(si(e))throw Error(i(418));t=cr(a.nextSibling);var n=ai;t&&oi(e,t)?li(n,a):(e.flags=-4097&e.flags|2,ri=!1,ai=e)}}else{if(si(e))throw Error(i(418));e.flags=-4097&e.flags|2,ri=!1,ai=e}}}function ui(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ai=e}function mi(e){if(e!==ai)return!1;if(!ri)return ui(e),ri=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!ar(e.type,e.memoizedProps)),t&&(t=ni)){if(si(e))throw di(),Error(i(418));for(;t;)li(e,t),t=cr(t.nextSibling)}if(ui(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var a=e.data;if("/$"===a){if(0===t){ni=cr(e.nextSibling);break e}t--}else"$"!==a&&"$!"!==a&&"$?"!==a||t++}e=e.nextSibling}ni=null}}else ni=ai?cr(e.stateNode.nextSibling):null;return!0}function di(){for(var e=ni;e;)e=cr(e.nextSibling)}function fi(){ni=ai=null,ri=!1}function pi(e){null===ii?ii=[e]:ii.push(e)}var hi=E.ReactCurrentBatchConfig;function gi(e,t,a){if(null!==(e=a.ref)&&"function"!=typeof e&&"object"!=typeof e){if(a._owner){if(a=a._owner){if(1!==a.tag)throw Error(i(309));var n=a.stateNode}if(!n)throw Error(i(147,e));var r=n,l=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===l?t.ref:(t=function(e){var t=r.refs;null===e?delete t[l]:t[l]=e},t._stringRef=l,t)}if("string"!=typeof e)throw Error(i(284));if(!a._owner)throw Error(i(290,e))}return e}function vi(e,t){throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function bi(e){return(0,e._init)(e._payload)}function yi(e){function t(t,a){if(e){var n=t.deletions;null===n?(t.deletions=[a],t.flags|=16):n.push(a)}}function a(a,n){if(!e)return null;for(;null!==n;)t(a,n),n=n.sibling;return null}function n(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function r(e,t){return(e=Mc(e,t)).index=0,e.sibling=null,e}function l(t,a,n){return t.index=n,e?null!==(n=t.alternate)?(n=n.index)<a?(t.flags|=2,a):n:(t.flags|=2,a):(t.flags|=1048576,a)}function o(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,a,n){return null===t||6!==t.tag?((t=Ic(a,e.mode,n)).return=e,t):((t=r(t,a)).return=e,t)}function c(e,t,a,n){var i=a.type;return i===N?m(e,t,a.props.children,n,a.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===D&&bi(i)===t.type)?((n=r(t,a.props)).ref=gi(e,t,a),n.return=e,n):((n=jc(a.type,a.key,a.props,null,e.mode,n)).ref=gi(e,t,a),n.return=e,n)}function u(e,t,a,n){return null===t||4!==t.tag||t.stateNode.containerInfo!==a.containerInfo||t.stateNode.implementation!==a.implementation?((t=Bc(a,e.mode,n)).return=e,t):((t=r(t,a.children||[])).return=e,t)}function m(e,t,a,n,i){return null===t||7!==t.tag?((t=Tc(a,e.mode,n,i)).return=e,t):((t=r(t,a)).return=e,t)}function d(e,t,a){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Ic(""+t,e.mode,a)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case R:return(a=jc(t.type,t.key,t.props,null,e.mode,a)).ref=gi(e,null,t),a.return=e,a;case w:return(t=Bc(t,e.mode,a)).return=e,t;case D:return d(e,(0,t._init)(t._payload),a)}if(te(t)||T(t))return(t=Tc(t,e.mode,a,null)).return=e,t;vi(e,t)}return null}function f(e,t,a,n){var r=null!==t?t.key:null;if("string"==typeof a&&""!==a||"number"==typeof a)return null!==r?null:s(e,t,""+a,n);if("object"==typeof a&&null!==a){switch(a.$$typeof){case R:return a.key===r?c(e,t,a,n):null;case w:return a.key===r?u(e,t,a,n):null;case D:return f(e,t,(r=a._init)(a._payload),n)}if(te(a)||T(a))return null!==r?null:m(e,t,a,n,null);vi(e,a)}return null}function p(e,t,a,n,r){if("string"==typeof n&&""!==n||"number"==typeof n)return s(t,e=e.get(a)||null,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case R:return c(t,e=e.get(null===n.key?a:n.key)||null,n,r);case w:return u(t,e=e.get(null===n.key?a:n.key)||null,n,r);case D:return p(e,t,a,(0,n._init)(n._payload),r)}if(te(n)||T(n))return m(t,e=e.get(a)||null,n,r,null);vi(t,n)}return null}function h(r,i,o,s){for(var c=null,u=null,m=i,h=i=0,g=null;null!==m&&h<o.length;h++){m.index>h?(g=m,m=null):g=m.sibling;var v=f(r,m,o[h],s);if(null===v){null===m&&(m=g);break}e&&m&&null===v.alternate&&t(r,m),i=l(v,i,h),null===u?c=v:u.sibling=v,u=v,m=g}if(h===o.length)return a(r,m),ri&&Xr(r,h),c;if(null===m){for(;h<o.length;h++)null!==(m=d(r,o[h],s))&&(i=l(m,i,h),null===u?c=m:u.sibling=m,u=m);return ri&&Xr(r,h),c}for(m=n(r,m);h<o.length;h++)null!==(g=p(m,r,h,o[h],s))&&(e&&null!==g.alternate&&m.delete(null===g.key?h:g.key),i=l(g,i,h),null===u?c=g:u.sibling=g,u=g);return e&&m.forEach((function(e){return t(r,e)})),ri&&Xr(r,h),c}function g(r,o,s,c){var u=T(s);if("function"!=typeof u)throw Error(i(150));if(null==(s=u.call(s)))throw Error(i(151));for(var m=u=null,h=o,g=o=0,v=null,b=s.next();null!==h&&!b.done;g++,b=s.next()){h.index>g?(v=h,h=null):v=h.sibling;var y=f(r,h,b.value,c);if(null===y){null===h&&(h=v);break}e&&h&&null===y.alternate&&t(r,h),o=l(y,o,g),null===m?u=y:m.sibling=y,m=y,h=v}if(b.done)return a(r,h),ri&&Xr(r,g),u;if(null===h){for(;!b.done;g++,b=s.next())null!==(b=d(r,b.value,c))&&(o=l(b,o,g),null===m?u=b:m.sibling=b,m=b);return ri&&Xr(r,g),u}for(h=n(r,h);!b.done;g++,b=s.next())null!==(b=p(h,r,g,b.value,c))&&(e&&null!==b.alternate&&h.delete(null===b.key?g:b.key),o=l(b,o,g),null===m?u=b:m.sibling=b,m=b);return e&&h.forEach((function(e){return t(r,e)})),ri&&Xr(r,g),u}return function e(n,i,l,s){if("object"==typeof l&&null!==l&&l.type===N&&null===l.key&&(l=l.props.children),"object"==typeof l&&null!==l){switch(l.$$typeof){case R:e:{for(var c=l.key,u=i;null!==u;){if(u.key===c){if((c=l.type)===N){if(7===u.tag){a(n,u.sibling),(i=r(u,l.props.children)).return=n,n=i;break e}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===D&&bi(c)===u.type){a(n,u.sibling),(i=r(u,l.props)).ref=gi(n,u,l),i.return=n,n=i;break e}a(n,u);break}t(n,u),u=u.sibling}l.type===N?((i=Tc(l.props.children,n.mode,s,l.key)).return=n,n=i):((s=jc(l.type,l.key,l.props,null,n.mode,s)).ref=gi(n,i,l),s.return=n,n=s)}return o(n);case w:e:{for(u=l.key;null!==i;){if(i.key===u){if(4===i.tag&&i.stateNode.containerInfo===l.containerInfo&&i.stateNode.implementation===l.implementation){a(n,i.sibling),(i=r(i,l.children||[])).return=n,n=i;break e}a(n,i);break}t(n,i),i=i.sibling}(i=Bc(l,n.mode,s)).return=n,n=i}return o(n);case D:return e(n,i,(u=l._init)(l._payload),s)}if(te(l))return h(n,i,l,s);if(T(l))return g(n,i,l,s);vi(n,l)}return"string"==typeof l&&""!==l||"number"==typeof l?(l=""+l,null!==i&&6===i.tag?(a(n,i.sibling),(i=r(i,l)).return=n,n=i):(a(n,i),(i=Ic(l,n.mode,s)).return=n,n=i),o(n)):a(n,i)}}var Ei=yi(!0),Ri=yi(!1),wi=Sr(null),Ni=null,Si=null,ki=null;function Ci(){ki=Si=Ni=null}function xi(e){var t=wi.current;kr(wi),e._currentValue=t}function Pi(e,t,a){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==n&&(n.childLanes|=t)):null!==n&&(n.childLanes&t)!==t&&(n.childLanes|=t),e===a)break;e=e.return}}function Oi(e,t){Ni=e,ki=Si=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(yo=!0),e.firstContext=null)}function qi(e){var t=e._currentValue;if(ki!==e)if(e={context:e,memoizedValue:t,next:null},null===Si){if(null===Ni)throw Error(i(308));Si=e,Ni.dependencies={lanes:0,firstContext:e}}else Si=Si.next=e;return t}var Ai=null;function Di(e){null===Ai?Ai=[e]:Ai.push(e)}function Mi(e,t,a,n){var r=t.interleaved;return null===r?(a.next=a,Di(t)):(a.next=r.next,r.next=a),t.interleaved=a,ji(e,n)}function ji(e,t){e.lanes|=t;var a=e.alternate;for(null!==a&&(a.lanes|=t),a=e,e=e.return;null!==e;)e.childLanes|=t,null!==(a=e.alternate)&&(a.childLanes|=t),a=e,e=e.return;return 3===a.tag?a.stateNode:null}var Ti=!1;function Li(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ii(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Bi(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function _i(e,t,a){var n=e.updateQueue;if(null===n)return null;if(n=n.shared,2&Ps){var r=n.pending;return null===r?t.next=t:(t.next=r.next,r.next=t),n.pending=t,ji(e,a)}return null===(r=n.interleaved)?(t.next=t,Di(n)):(t.next=r.next,r.next=t),n.interleaved=t,ji(e,a)}function zi(e,t,a){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&a)){var n=t.lanes;a|=n&=e.pendingLanes,t.lanes=a,bt(e,a)}}function Fi(e,t){var a=e.updateQueue,n=e.alternate;if(null!==n&&a===(n=n.updateQueue)){var r=null,i=null;if(null!==(a=a.firstBaseUpdate)){do{var l={eventTime:a.eventTime,lane:a.lane,tag:a.tag,payload:a.payload,callback:a.callback,next:null};null===i?r=i=l:i=i.next=l,a=a.next}while(null!==a);null===i?r=i=t:i=i.next=t}else r=i=t;return a={baseState:n.baseState,firstBaseUpdate:r,lastBaseUpdate:i,shared:n.shared,effects:n.effects},void(e.updateQueue=a)}null===(e=a.lastBaseUpdate)?a.firstBaseUpdate=t:e.next=t,a.lastBaseUpdate=t}function $i(e,t,a,n){var r=e.updateQueue;Ti=!1;var i=r.firstBaseUpdate,l=r.lastBaseUpdate,o=r.shared.pending;if(null!==o){r.shared.pending=null;var s=o,c=s.next;s.next=null,null===l?i=c:l.next=c,l=s;var u=e.alternate;null!==u&&(o=(u=u.updateQueue).lastBaseUpdate)!==l&&(null===o?u.firstBaseUpdate=c:o.next=c,u.lastBaseUpdate=s)}if(null!==i){var m=r.baseState;for(l=0,u=c=s=null,o=i;;){var d=o.lane,f=o.eventTime;if((n&d)===d){null!==u&&(u=u.next={eventTime:f,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var p=e,h=o;switch(d=t,f=a,h.tag){case 1:if("function"==typeof(p=h.payload)){m=p.call(f,m,d);break e}m=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(d="function"==typeof(p=h.payload)?p.call(f,m,d):p))break e;m=I({},m,d);break e;case 2:Ti=!0}}null!==o.callback&&0!==o.lane&&(e.flags|=64,null===(d=r.effects)?r.effects=[o]:d.push(o))}else f={eventTime:f,lane:d,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===u?(c=u=f,s=m):u=u.next=f,l|=d;if(null===(o=o.next)){if(null===(o=r.shared.pending))break;o=(d=o).next,d.next=null,r.lastBaseUpdate=d,r.shared.pending=null}}if(null===u&&(s=m),r.baseState=s,r.firstBaseUpdate=c,r.lastBaseUpdate=u,null!==(t=r.shared.interleaved)){r=t;do{l|=r.lane,r=r.next}while(r!==t)}else null===i&&(r.shared.lanes=0);Ls|=l,e.lanes=l,e.memoizedState=m}}function Vi(e,t,a){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var n=e[t],r=n.callback;if(null!==r){if(n.callback=null,n=a,"function"!=typeof r)throw Error(i(191,r));r.call(n)}}}var Hi={},Ui=Sr(Hi),Wi=Sr(Hi),Ji=Sr(Hi);function Qi(e){if(e===Hi)throw Error(i(174));return e}function Ki(e,t){switch(Cr(Ji,t),Cr(Wi,e),Cr(Ui,Hi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:se(null,"");break;default:t=se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}kr(Ui),Cr(Ui,t)}function Gi(){kr(Ui),kr(Wi),kr(Ji)}function Yi(e){Qi(Ji.current);var t=Qi(Ui.current),a=se(t,e.type);t!==a&&(Cr(Wi,e),Cr(Ui,a))}function Xi(e){Wi.current===e&&(kr(Ui),kr(Wi))}var Zi=Sr(0);function el(e){for(var t=e;null!==t;){if(13===t.tag){var a=t.memoizedState;if(null!==a&&(null===(a=a.dehydrated)||"$?"===a.data||"$!"===a.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var tl=[];function al(){for(var e=0;e<tl.length;e++)tl[e]._workInProgressVersionPrimary=null;tl.length=0}var nl=E.ReactCurrentDispatcher,rl=E.ReactCurrentBatchConfig,il=0,ll=null,ol=null,sl=null,cl=!1,ul=!1,ml=0,dl=0;function fl(){throw Error(i(321))}function pl(e,t){if(null===t)return!1;for(var a=0;a<t.length&&a<e.length;a++)if(!on(e[a],t[a]))return!1;return!0}function hl(e,t,a,n,r,l){if(il=l,ll=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,nl.current=null===e||null===e.memoizedState?Xl:Zl,e=a(n,r),ul){l=0;do{if(ul=!1,ml=0,25<=l)throw Error(i(301));l+=1,sl=ol=null,t.updateQueue=null,nl.current=eo,e=a(n,r)}while(ul)}if(nl.current=Yl,t=null!==ol&&null!==ol.next,il=0,sl=ol=ll=null,cl=!1,t)throw Error(i(300));return e}function gl(){var e=0!==ml;return ml=0,e}function vl(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===sl?ll.memoizedState=sl=e:sl=sl.next=e,sl}function bl(){if(null===ol){var e=ll.alternate;e=null!==e?e.memoizedState:null}else e=ol.next;var t=null===sl?ll.memoizedState:sl.next;if(null!==t)sl=t,ol=e;else{if(null===e)throw Error(i(310));e={memoizedState:(ol=e).memoizedState,baseState:ol.baseState,baseQueue:ol.baseQueue,queue:ol.queue,next:null},null===sl?ll.memoizedState=sl=e:sl=sl.next=e}return sl}function yl(e,t){return"function"==typeof t?t(e):t}function El(e){var t=bl(),a=t.queue;if(null===a)throw Error(i(311));a.lastRenderedReducer=e;var n=ol,r=n.baseQueue,l=a.pending;if(null!==l){if(null!==r){var o=r.next;r.next=l.next,l.next=o}n.baseQueue=r=l,a.pending=null}if(null!==r){l=r.next,n=n.baseState;var s=o=null,c=null,u=l;do{var m=u.lane;if((il&m)===m)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),n=u.hasEagerState?u.eagerState:e(n,u.action);else{var d={lane:m,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(s=c=d,o=n):c=c.next=d,ll.lanes|=m,Ls|=m}u=u.next}while(null!==u&&u!==l);null===c?o=n:c.next=s,on(n,t.memoizedState)||(yo=!0),t.memoizedState=n,t.baseState=o,t.baseQueue=c,a.lastRenderedState=n}if(null!==(e=a.interleaved)){r=e;do{l=r.lane,ll.lanes|=l,Ls|=l,r=r.next}while(r!==e)}else null===r&&(a.lanes=0);return[t.memoizedState,a.dispatch]}function Rl(e){var t=bl(),a=t.queue;if(null===a)throw Error(i(311));a.lastRenderedReducer=e;var n=a.dispatch,r=a.pending,l=t.memoizedState;if(null!==r){a.pending=null;var o=r=r.next;do{l=e(l,o.action),o=o.next}while(o!==r);on(l,t.memoizedState)||(yo=!0),t.memoizedState=l,null===t.baseQueue&&(t.baseState=l),a.lastRenderedState=l}return[l,n]}function wl(){}function Nl(e,t){var a=ll,n=bl(),r=t(),l=!on(n.memoizedState,r);if(l&&(n.memoizedState=r,yo=!0),n=n.queue,Tl(Cl.bind(null,a,n,e),[e]),n.getSnapshot!==t||l||null!==sl&&1&sl.memoizedState.tag){if(a.flags|=2048,ql(9,kl.bind(null,a,n,r,t),void 0,null),null===Os)throw Error(i(349));30&il||Sl(a,t,r)}return r}function Sl(e,t,a){e.flags|=16384,e={getSnapshot:t,value:a},null===(t=ll.updateQueue)?(t={lastEffect:null,stores:null},ll.updateQueue=t,t.stores=[e]):null===(a=t.stores)?t.stores=[e]:a.push(e)}function kl(e,t,a,n){t.value=a,t.getSnapshot=n,xl(t)&&Pl(e)}function Cl(e,t,a){return a((function(){xl(t)&&Pl(e)}))}function xl(e){var t=e.getSnapshot;e=e.value;try{var a=t();return!on(e,a)}catch(e){return!0}}function Pl(e){var t=ji(e,1);null!==t&&ac(t,e,1,-1)}function Ol(e){var t=vl();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:yl,lastRenderedState:e},t.queue=e,e=e.dispatch=Jl.bind(null,ll,e),[t.memoizedState,e]}function ql(e,t,a,n){return e={tag:e,create:t,destroy:a,deps:n,next:null},null===(t=ll.updateQueue)?(t={lastEffect:null,stores:null},ll.updateQueue=t,t.lastEffect=e.next=e):null===(a=t.lastEffect)?t.lastEffect=e.next=e:(n=a.next,a.next=e,e.next=n,t.lastEffect=e),e}function Al(){return bl().memoizedState}function Dl(e,t,a,n){var r=vl();ll.flags|=e,r.memoizedState=ql(1|t,a,void 0,void 0===n?null:n)}function Ml(e,t,a,n){var r=bl();n=void 0===n?null:n;var i=void 0;if(null!==ol){var l=ol.memoizedState;if(i=l.destroy,null!==n&&pl(n,l.deps))return void(r.memoizedState=ql(t,a,i,n))}ll.flags|=e,r.memoizedState=ql(1|t,a,i,n)}function jl(e,t){return Dl(8390656,8,e,t)}function Tl(e,t){return Ml(2048,8,e,t)}function Ll(e,t){return Ml(4,2,e,t)}function Il(e,t){return Ml(4,4,e,t)}function Bl(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function _l(e,t,a){return a=null!=a?a.concat([e]):null,Ml(4,4,Bl.bind(null,t,e),a)}function zl(){}function Fl(e,t){var a=bl();t=void 0===t?null:t;var n=a.memoizedState;return null!==n&&null!==t&&pl(t,n[1])?n[0]:(a.memoizedState=[e,t],e)}function $l(e,t){var a=bl();t=void 0===t?null:t;var n=a.memoizedState;return null!==n&&null!==t&&pl(t,n[1])?n[0]:(e=e(),a.memoizedState=[e,t],e)}function Vl(e,t,a){return 21&il?(on(a,t)||(a=ht(),ll.lanes|=a,Ls|=a,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,yo=!0),e.memoizedState=a)}function Hl(e,t){var a=yt;yt=0!==a&&4>a?a:4,e(!0);var n=rl.transition;rl.transition={};try{e(!1),t()}finally{yt=a,rl.transition=n}}function Ul(){return bl().memoizedState}function Wl(e,t,a){var n=tc(e);a={lane:n,action:a,hasEagerState:!1,eagerState:null,next:null},Ql(e)?Kl(t,a):null!==(a=Mi(e,t,a,n))&&(ac(a,e,n,ec()),Gl(a,t,n))}function Jl(e,t,a){var n=tc(e),r={lane:n,action:a,hasEagerState:!1,eagerState:null,next:null};if(Ql(e))Kl(t,r);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,o=i(l,a);if(r.hasEagerState=!0,r.eagerState=o,on(o,l)){var s=t.interleaved;return null===s?(r.next=r,Di(t)):(r.next=s.next,s.next=r),void(t.interleaved=r)}}catch(e){}null!==(a=Mi(e,t,r,n))&&(ac(a,e,n,r=ec()),Gl(a,t,n))}}function Ql(e){var t=e.alternate;return e===ll||null!==t&&t===ll}function Kl(e,t){ul=cl=!0;var a=e.pending;null===a?t.next=t:(t.next=a.next,a.next=t),e.pending=t}function Gl(e,t,a){if(4194240&a){var n=t.lanes;a|=n&=e.pendingLanes,t.lanes=a,bt(e,a)}}var Yl={readContext:qi,useCallback:fl,useContext:fl,useEffect:fl,useImperativeHandle:fl,useInsertionEffect:fl,useLayoutEffect:fl,useMemo:fl,useReducer:fl,useRef:fl,useState:fl,useDebugValue:fl,useDeferredValue:fl,useTransition:fl,useMutableSource:fl,useSyncExternalStore:fl,useId:fl,unstable_isNewReconciler:!1},Xl={readContext:qi,useCallback:function(e,t){return vl().memoizedState=[e,void 0===t?null:t],e},useContext:qi,useEffect:jl,useImperativeHandle:function(e,t,a){return a=null!=a?a.concat([e]):null,Dl(4194308,4,Bl.bind(null,t,e),a)},useLayoutEffect:function(e,t){return Dl(4194308,4,e,t)},useInsertionEffect:function(e,t){return Dl(4,2,e,t)},useMemo:function(e,t){var a=vl();return t=void 0===t?null:t,e=e(),a.memoizedState=[e,t],e},useReducer:function(e,t,a){var n=vl();return t=void 0!==a?a(t):t,n.memoizedState=n.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},n.queue=e,e=e.dispatch=Wl.bind(null,ll,e),[n.memoizedState,e]},useRef:function(e){return e={current:e},vl().memoizedState=e},useState:Ol,useDebugValue:zl,useDeferredValue:function(e){return vl().memoizedState=e},useTransition:function(){var e=Ol(!1),t=e[0];return e=Hl.bind(null,e[1]),vl().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,a){var n=ll,r=vl();if(ri){if(void 0===a)throw Error(i(407));a=a()}else{if(a=t(),null===Os)throw Error(i(349));30&il||Sl(n,t,a)}r.memoizedState=a;var l={value:a,getSnapshot:t};return r.queue=l,jl(Cl.bind(null,n,l,e),[e]),n.flags|=2048,ql(9,kl.bind(null,n,l,a,t),void 0,null),a},useId:function(){var e=vl(),t=Os.identifierPrefix;if(ri){var a=Yr;t=":"+t+"R"+(a=(Gr&~(1<<32-lt(Gr)-1)).toString(32)+a),0<(a=ml++)&&(t+="H"+a.toString(32)),t+=":"}else t=":"+t+"r"+(a=dl++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},Zl={readContext:qi,useCallback:Fl,useContext:qi,useEffect:Tl,useImperativeHandle:_l,useInsertionEffect:Ll,useLayoutEffect:Il,useMemo:$l,useReducer:El,useRef:Al,useState:function(){return El(yl)},useDebugValue:zl,useDeferredValue:function(e){return Vl(bl(),ol.memoizedState,e)},useTransition:function(){return[El(yl)[0],bl().memoizedState]},useMutableSource:wl,useSyncExternalStore:Nl,useId:Ul,unstable_isNewReconciler:!1},eo={readContext:qi,useCallback:Fl,useContext:qi,useEffect:Tl,useImperativeHandle:_l,useInsertionEffect:Ll,useLayoutEffect:Il,useMemo:$l,useReducer:Rl,useRef:Al,useState:function(){return Rl(yl)},useDebugValue:zl,useDeferredValue:function(e){var t=bl();return null===ol?t.memoizedState=e:Vl(t,ol.memoizedState,e)},useTransition:function(){return[Rl(yl)[0],bl().memoizedState]},useMutableSource:wl,useSyncExternalStore:Nl,useId:Ul,unstable_isNewReconciler:!1};function to(e,t){if(e&&e.defaultProps){for(var a in t=I({},t),e=e.defaultProps)void 0===t[a]&&(t[a]=e[a]);return t}return t}function ao(e,t,a,n){a=null==(a=a(n,t=e.memoizedState))?t:I({},t,a),e.memoizedState=a,0===e.lanes&&(e.updateQueue.baseState=a)}var no={isMounted:function(e){return!!(e=e._reactInternals)&&$e(e)===e},enqueueSetState:function(e,t,a){e=e._reactInternals;var n=ec(),r=tc(e),i=Bi(n,r);i.payload=t,null!=a&&(i.callback=a),null!==(t=_i(e,i,r))&&(ac(t,e,r,n),zi(t,e,r))},enqueueReplaceState:function(e,t,a){e=e._reactInternals;var n=ec(),r=tc(e),i=Bi(n,r);i.tag=1,i.payload=t,null!=a&&(i.callback=a),null!==(t=_i(e,i,r))&&(ac(t,e,r,n),zi(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var a=ec(),n=tc(e),r=Bi(a,n);r.tag=2,null!=t&&(r.callback=t),null!==(t=_i(e,r,n))&&(ac(t,e,n,a),zi(t,e,n))}};function ro(e,t,a,n,r,i,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(n,i,l):!(t.prototype&&t.prototype.isPureReactComponent&&sn(a,n)&&sn(r,i))}function io(e,t,a){var n=!1,r=xr,i=t.contextType;return"object"==typeof i&&null!==i?i=qi(i):(r=Dr(t)?qr:Pr.current,i=(n=null!=(n=t.contextTypes))?Ar(e,r):xr),t=new t(a,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=no,e.stateNode=t,t._reactInternals=e,n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=i),t}function lo(e,t,a,n){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(a,n),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(a,n),t.state!==e&&no.enqueueReplaceState(t,t.state,null)}function oo(e,t,a,n){var r=e.stateNode;r.props=a,r.state=e.memoizedState,r.refs={},Li(e);var i=t.contextType;"object"==typeof i&&null!==i?r.context=qi(i):(i=Dr(t)?qr:Pr.current,r.context=Ar(e,i)),r.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(ao(e,t,i,a),r.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(t=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),t!==r.state&&no.enqueueReplaceState(r,r.state,null),$i(e,a,r,n),r.state=e.memoizedState),"function"==typeof r.componentDidMount&&(e.flags|=4194308)}function so(e,t){try{var a="",n=t;do{a+=F(n),n=n.return}while(n);var r=a}catch(e){r="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:r,digest:null}}function co(e,t,a){return{value:e,source:null,stack:null!=a?a:null,digest:null!=t?t:null}}function uo(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var mo="function"==typeof WeakMap?WeakMap:Map;function fo(e,t,a){(a=Bi(-1,a)).tag=3,a.payload={element:null};var n=t.value;return a.callback=function(){Hs||(Hs=!0,Us=n),uo(0,t)},a}function po(e,t,a){(a=Bi(-1,a)).tag=3;var n=e.type.getDerivedStateFromError;if("function"==typeof n){var r=t.value;a.payload=function(){return n(r)},a.callback=function(){uo(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(a.callback=function(){uo(0,t),"function"!=typeof n&&(null===Ws?Ws=new Set([this]):Ws.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),a}function ho(e,t,a){var n=e.pingCache;if(null===n){n=e.pingCache=new mo;var r=new Set;n.set(t,r)}else void 0===(r=n.get(t))&&(r=new Set,n.set(t,r));r.has(a)||(r.add(a),e=kc.bind(null,e,t,a),t.then(e,e))}function go(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vo(e,t,a,n,r){return 1&e.mode?(e.flags|=65536,e.lanes=r,e):(e===t?e.flags|=65536:(e.flags|=128,a.flags|=131072,a.flags&=-52805,1===a.tag&&(null===a.alternate?a.tag=17:((t=Bi(-1,1)).tag=2,_i(a,t,1))),a.lanes|=1),e)}var bo=E.ReactCurrentOwner,yo=!1;function Eo(e,t,a,n){t.child=null===e?Ri(t,null,a,n):Ei(t,e.child,a,n)}function Ro(e,t,a,n,r){a=a.render;var i=t.ref;return Oi(t,r),n=hl(e,t,a,n,i,r),a=gl(),null===e||yo?(ri&&a&&ei(t),t.flags|=1,Eo(e,t,n,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~r,Ho(e,t,r))}function wo(e,t,a,n,r){if(null===e){var i=a.type;return"function"!=typeof i||Dc(i)||void 0!==i.defaultProps||null!==a.compare||void 0!==a.defaultProps?((e=jc(a.type,null,n,t,t.mode,r)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,No(e,t,i,n,r))}if(i=e.child,!(e.lanes&r)){var l=i.memoizedProps;if((a=null!==(a=a.compare)?a:sn)(l,n)&&e.ref===t.ref)return Ho(e,t,r)}return t.flags|=1,(e=Mc(i,n)).ref=t.ref,e.return=t,t.child=e}function No(e,t,a,n,r){if(null!==e){var i=e.memoizedProps;if(sn(i,n)&&e.ref===t.ref){if(yo=!1,t.pendingProps=n=i,!(e.lanes&r))return t.lanes=e.lanes,Ho(e,t,r);131072&e.flags&&(yo=!0)}}return Co(e,t,a,n,r)}function So(e,t,a){var n=t.pendingProps,r=n.children,i=null!==e?e.memoizedState:null;if("hidden"===n.mode)if(1&t.mode){if(!(1073741824&a))return e=null!==i?i.baseLanes|a:a,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Cr(Ms,Ds),Ds|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},n=null!==i?i.baseLanes:a,Cr(Ms,Ds),Ds|=n}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Cr(Ms,Ds),Ds|=a;else null!==i?(n=i.baseLanes|a,t.memoizedState=null):n=a,Cr(Ms,Ds),Ds|=n;return Eo(e,t,r,a),t.child}function ko(e,t){var a=t.ref;(null===e&&null!==a||null!==e&&e.ref!==a)&&(t.flags|=512,t.flags|=2097152)}function Co(e,t,a,n,r){var i=Dr(a)?qr:Pr.current;return i=Ar(t,i),Oi(t,r),a=hl(e,t,a,n,i,r),n=gl(),null===e||yo?(ri&&n&&ei(t),t.flags|=1,Eo(e,t,a,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~r,Ho(e,t,r))}function xo(e,t,a,n,r){if(Dr(a)){var i=!0;Lr(t)}else i=!1;if(Oi(t,r),null===t.stateNode)Vo(e,t),io(t,a,n),oo(t,a,n,r),n=!0;else if(null===e){var l=t.stateNode,o=t.memoizedProps;l.props=o;var s=l.context,c=a.contextType;c="object"==typeof c&&null!==c?qi(c):Ar(t,c=Dr(a)?qr:Pr.current);var u=a.getDerivedStateFromProps,m="function"==typeof u||"function"==typeof l.getSnapshotBeforeUpdate;m||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(o!==n||s!==c)&&lo(t,l,n,c),Ti=!1;var d=t.memoizedState;l.state=d,$i(t,n,l,r),s=t.memoizedState,o!==n||d!==s||Or.current||Ti?("function"==typeof u&&(ao(t,a,u,n),s=t.memoizedState),(o=Ti||ro(t,a,o,n,d,s,c))?(m||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4194308)):("function"==typeof l.componentDidMount&&(t.flags|=4194308),t.memoizedProps=n,t.memoizedState=s),l.props=n,l.state=s,l.context=c,n=o):("function"==typeof l.componentDidMount&&(t.flags|=4194308),n=!1)}else{l=t.stateNode,Ii(e,t),o=t.memoizedProps,c=t.type===t.elementType?o:to(t.type,o),l.props=c,m=t.pendingProps,d=l.context,s="object"==typeof(s=a.contextType)&&null!==s?qi(s):Ar(t,s=Dr(a)?qr:Pr.current);var f=a.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(o!==m||d!==s)&&lo(t,l,n,s),Ti=!1,d=t.memoizedState,l.state=d,$i(t,n,l,r);var p=t.memoizedState;o!==m||d!==p||Or.current||Ti?("function"==typeof f&&(ao(t,a,f,n),p=t.memoizedState),(c=Ti||ro(t,a,c,n,d,p,s)||!1)?(u||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(n,p,s),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(n,p,s)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof l.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=n,t.memoizedState=p),l.props=n,l.state=p,l.context=s,n=c):("function"!=typeof l.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),n=!1)}return Po(e,t,a,n,i,r)}function Po(e,t,a,n,r,i){ko(e,t);var l=!!(128&t.flags);if(!n&&!l)return r&&Ir(t,a,!1),Ho(e,t,i);n=t.stateNode,bo.current=t;var o=l&&"function"!=typeof a.getDerivedStateFromError?null:n.render();return t.flags|=1,null!==e&&l?(t.child=Ei(t,e.child,null,i),t.child=Ei(t,null,o,i)):Eo(e,t,o,i),t.memoizedState=n.state,r&&Ir(t,a,!0),t.child}function Oo(e){var t=e.stateNode;t.pendingContext?jr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&jr(0,t.context,!1),Ki(e,t.containerInfo)}function qo(e,t,a,n,r){return fi(),pi(r),t.flags|=256,Eo(e,t,a,n),t.child}var Ao,Do,Mo,jo,To={dehydrated:null,treeContext:null,retryLane:0};function Lo(e){return{baseLanes:e,cachePool:null,transitions:null}}function Io(e,t,a){var n,r=t.pendingProps,l=Zi.current,o=!1,s=!!(128&t.flags);if((n=s)||(n=(null===e||null!==e.memoizedState)&&!!(2&l)),n?(o=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(l|=1),Cr(Zi,1&l),null===e)return ci(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(s=r.children,e=r.fallback,o?(r=t.mode,o=t.child,s={mode:"hidden",children:s},1&r||null===o?o=Lc(s,r,0,null):(o.childLanes=0,o.pendingProps=s),e=Tc(e,r,a,null),o.return=t,e.return=t,o.sibling=e,t.child=o,t.child.memoizedState=Lo(a),t.memoizedState=To,e):Bo(t,s));if(null!==(l=e.memoizedState)&&null!==(n=l.dehydrated))return function(e,t,a,n,r,l,o){if(a)return 256&t.flags?(t.flags&=-257,_o(e,t,o,n=co(Error(i(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(l=n.fallback,r=t.mode,n=Lc({mode:"visible",children:n.children},r,0,null),(l=Tc(l,r,o,null)).flags|=2,n.return=t,l.return=t,n.sibling=l,t.child=n,1&t.mode&&Ei(t,e.child,null,o),t.child.memoizedState=Lo(o),t.memoizedState=To,l);if(!(1&t.mode))return _o(e,t,o,null);if("$!"===r.data){if(n=r.nextSibling&&r.nextSibling.dataset)var s=n.dgst;return n=s,_o(e,t,o,n=co(l=Error(i(419)),n,void 0))}if(s=!!(o&e.childLanes),yo||s){if(null!==(n=Os)){switch(o&-o){case 4:r=2;break;case 16:r=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:r=32;break;case 536870912:r=268435456;break;default:r=0}0!==(r=r&(n.suspendedLanes|o)?0:r)&&r!==l.retryLane&&(l.retryLane=r,ji(e,r),ac(n,e,r,-1))}return hc(),_o(e,t,o,n=co(Error(i(421))))}return"$?"===r.data?(t.flags|=128,t.child=e.child,t=xc.bind(null,e),r._reactRetry=t,null):(e=l.treeContext,ni=cr(r.nextSibling),ai=t,ri=!0,ii=null,null!==e&&(Jr[Qr++]=Gr,Jr[Qr++]=Yr,Jr[Qr++]=Kr,Gr=e.id,Yr=e.overflow,Kr=t),(t=Bo(t,n.children)).flags|=4096,t)}(e,t,s,r,n,l,a);if(o){o=r.fallback,s=t.mode,n=(l=e.child).sibling;var c={mode:"hidden",children:r.children};return 1&s||t.child===l?(r=Mc(l,c)).subtreeFlags=14680064&l.subtreeFlags:((r=t.child).childLanes=0,r.pendingProps=c,t.deletions=null),null!==n?o=Mc(n,o):(o=Tc(o,s,a,null)).flags|=2,o.return=t,r.return=t,r.sibling=o,t.child=r,r=o,o=t.child,s=null===(s=e.child.memoizedState)?Lo(a):{baseLanes:s.baseLanes|a,cachePool:null,transitions:s.transitions},o.memoizedState=s,o.childLanes=e.childLanes&~a,t.memoizedState=To,r}return e=(o=e.child).sibling,r=Mc(o,{mode:"visible",children:r.children}),!(1&t.mode)&&(r.lanes=a),r.return=t,r.sibling=null,null!==e&&(null===(a=t.deletions)?(t.deletions=[e],t.flags|=16):a.push(e)),t.child=r,t.memoizedState=null,r}function Bo(e,t){return(t=Lc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function _o(e,t,a,n){return null!==n&&pi(n),Ei(t,e.child,null,a),(e=Bo(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function zo(e,t,a){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),Pi(e.return,t,a)}function Fo(e,t,a,n,r){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:a,tailMode:r}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=n,i.tail=a,i.tailMode=r)}function $o(e,t,a){var n=t.pendingProps,r=n.revealOrder,i=n.tail;if(Eo(e,t,n.children,a),2&(n=Zi.current))n=1&n|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&zo(e,a,t);else if(19===e.tag)zo(e,a,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(Cr(Zi,n),1&t.mode)switch(r){case"forwards":for(a=t.child,r=null;null!==a;)null!==(e=a.alternate)&&null===el(e)&&(r=a),a=a.sibling;null===(a=r)?(r=t.child,t.child=null):(r=a.sibling,a.sibling=null),Fo(t,!1,r,a,i);break;case"backwards":for(a=null,r=t.child,t.child=null;null!==r;){if(null!==(e=r.alternate)&&null===el(e)){t.child=r;break}e=r.sibling,r.sibling=a,a=r,r=e}Fo(t,!0,a,null,i);break;case"together":Fo(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Vo(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Ho(e,t,a){if(null!==e&&(t.dependencies=e.dependencies),Ls|=t.lanes,!(a&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(a=Mc(e=t.child,e.pendingProps),t.child=a,a.return=t;null!==e.sibling;)e=e.sibling,(a=a.sibling=Mc(e,e.pendingProps)).return=t;a.sibling=null}return t.child}function Uo(e,t){if(!ri)switch(e.tailMode){case"hidden":t=e.tail;for(var a=null;null!==t;)null!==t.alternate&&(a=t),t=t.sibling;null===a?e.tail=null:a.sibling=null;break;case"collapsed":a=e.tail;for(var n=null;null!==a;)null!==a.alternate&&(n=a),a=a.sibling;null===n?t||null===e.tail?e.tail=null:e.tail.sibling=null:n.sibling=null}}function Wo(e){var t=null!==e.alternate&&e.alternate.child===e.child,a=0,n=0;if(t)for(var r=e.child;null!==r;)a|=r.lanes|r.childLanes,n|=14680064&r.subtreeFlags,n|=14680064&r.flags,r.return=e,r=r.sibling;else for(r=e.child;null!==r;)a|=r.lanes|r.childLanes,n|=r.subtreeFlags,n|=r.flags,r.return=e,r=r.sibling;return e.subtreeFlags|=n,e.childLanes=a,t}function Jo(e,t,a){var n=t.pendingProps;switch(ti(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Wo(t),null;case 1:case 17:return Dr(t.type)&&Mr(),Wo(t),null;case 3:return n=t.stateNode,Gi(),kr(Or),kr(Pr),al(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(mi(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==ii&&(lc(ii),ii=null))),Do(e,t),Wo(t),null;case 5:Xi(t);var r=Qi(Ji.current);if(a=t.type,null!==e&&null!=t.stateNode)Mo(e,t,a,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!n){if(null===t.stateNode)throw Error(i(166));return Wo(t),null}if(e=Qi(Ui.current),mi(t)){n=t.stateNode,a=t.type;var l=t.memoizedProps;switch(n[dr]=t,n[fr]=l,e=!!(1&t.mode),a){case"dialog":_n("cancel",n),_n("close",n);break;case"iframe":case"object":case"embed":_n("load",n);break;case"video":case"audio":for(r=0;r<Tn.length;r++)_n(Tn[r],n);break;case"source":_n("error",n);break;case"img":case"image":case"link":_n("error",n),_n("load",n);break;case"details":_n("toggle",n);break;case"input":G(n,l),_n("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!l.multiple},_n("invalid",n);break;case"textarea":re(n,l),_n("invalid",n)}for(var s in be(a,l),r=null,l)if(l.hasOwnProperty(s)){var c=l[s];"children"===s?"string"==typeof c?n.textContent!==c&&(!0!==l.suppressHydrationWarning&&Xn(n.textContent,c,e),r=["children",c]):"number"==typeof c&&n.textContent!==""+c&&(!0!==l.suppressHydrationWarning&&Xn(n.textContent,c,e),r=["children",""+c]):o.hasOwnProperty(s)&&null!=c&&"onScroll"===s&&_n("scroll",n)}switch(a){case"input":W(n),Z(n,l,!0);break;case"textarea":W(n),le(n);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(n.onclick=Zn)}n=r,t.updateQueue=n,null!==n&&(t.flags|=4)}else{s=9===r.nodeType?r:r.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=oe(a)),"http://www.w3.org/1999/xhtml"===e?"script"===a?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof n.is?e=s.createElement(a,{is:n.is}):(e=s.createElement(a),"select"===a&&(s=e,n.multiple?s.multiple=!0:n.size&&(s.size=n.size))):e=s.createElementNS(e,a),e[dr]=t,e[fr]=n,Ao(e,t,!1,!1),t.stateNode=e;e:{switch(s=ye(a,n),a){case"dialog":_n("cancel",e),_n("close",e),r=n;break;case"iframe":case"object":case"embed":_n("load",e),r=n;break;case"video":case"audio":for(r=0;r<Tn.length;r++)_n(Tn[r],e);r=n;break;case"source":_n("error",e),r=n;break;case"img":case"image":case"link":_n("error",e),_n("load",e),r=n;break;case"details":_n("toggle",e),r=n;break;case"input":G(e,n),r=K(e,n),_n("invalid",e);break;case"option":default:r=n;break;case"select":e._wrapperState={wasMultiple:!!n.multiple},r=I({},n,{value:void 0}),_n("invalid",e);break;case"textarea":re(e,n),r=ne(e,n),_n("invalid",e)}for(l in be(a,r),c=r)if(c.hasOwnProperty(l)){var u=c[l];"style"===l?ge(e,u):"dangerouslySetInnerHTML"===l?null!=(u=u?u.__html:void 0)&&me(e,u):"children"===l?"string"==typeof u?("textarea"!==a||""!==u)&&de(e,u):"number"==typeof u&&de(e,""+u):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(o.hasOwnProperty(l)?null!=u&&"onScroll"===l&&_n("scroll",e):null!=u&&y(e,l,u,s))}switch(a){case"input":W(e),Z(e,n,!1);break;case"textarea":W(e),le(e);break;case"option":null!=n.value&&e.setAttribute("value",""+H(n.value));break;case"select":e.multiple=!!n.multiple,null!=(l=n.value)?ae(e,!!n.multiple,l,!1):null!=n.defaultValue&&ae(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof r.onClick&&(e.onclick=Zn)}switch(a){case"button":case"input":case"select":case"textarea":n=!!n.autoFocus;break e;case"img":n=!0;break e;default:n=!1}}n&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Wo(t),null;case 6:if(e&&null!=t.stateNode)jo(e,t,e.memoizedProps,n);else{if("string"!=typeof n&&null===t.stateNode)throw Error(i(166));if(a=Qi(Ji.current),Qi(Ui.current),mi(t)){if(n=t.stateNode,a=t.memoizedProps,n[dr]=t,(l=n.nodeValue!==a)&&null!==(e=ai))switch(e.tag){case 3:Xn(n.nodeValue,a,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Xn(n.nodeValue,a,!!(1&e.mode))}l&&(t.flags|=4)}else(n=(9===a.nodeType?a:a.ownerDocument).createTextNode(n))[dr]=t,t.stateNode=n}return Wo(t),null;case 13:if(kr(Zi),n=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ri&&null!==ni&&1&t.mode&&!(128&t.flags))di(),fi(),t.flags|=98560,l=!1;else if(l=mi(t),null!==n&&null!==n.dehydrated){if(null===e){if(!l)throw Error(i(318));if(!(l=null!==(l=t.memoizedState)?l.dehydrated:null))throw Error(i(317));l[dr]=t}else fi(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Wo(t),l=!1}else null!==ii&&(lc(ii),ii=null),l=!0;if(!l)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=a,t):((n=null!==n)!=(null!==e&&null!==e.memoizedState)&&n&&(t.child.flags|=8192,1&t.mode&&(null===e||1&Zi.current?0===js&&(js=3):hc())),null!==t.updateQueue&&(t.flags|=4),Wo(t),null);case 4:return Gi(),Do(e,t),null===e&&$n(t.stateNode.containerInfo),Wo(t),null;case 10:return xi(t.type._context),Wo(t),null;case 19:if(kr(Zi),null===(l=t.memoizedState))return Wo(t),null;if(n=!!(128&t.flags),null===(s=l.rendering))if(n)Uo(l,!1);else{if(0!==js||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(s=el(e))){for(t.flags|=128,Uo(l,!1),null!==(n=s.updateQueue)&&(t.updateQueue=n,t.flags|=4),t.subtreeFlags=0,n=a,a=t.child;null!==a;)e=n,(l=a).flags&=14680066,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.subtreeFlags=0,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.subtreeFlags=0,l.deletions=null,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),a=a.sibling;return Cr(Zi,1&Zi.current|2),t.child}e=e.sibling}null!==l.tail&&Ye()>$s&&(t.flags|=128,n=!0,Uo(l,!1),t.lanes=4194304)}else{if(!n)if(null!==(e=el(s))){if(t.flags|=128,n=!0,null!==(a=e.updateQueue)&&(t.updateQueue=a,t.flags|=4),Uo(l,!0),null===l.tail&&"hidden"===l.tailMode&&!s.alternate&&!ri)return Wo(t),null}else 2*Ye()-l.renderingStartTime>$s&&1073741824!==a&&(t.flags|=128,n=!0,Uo(l,!1),t.lanes=4194304);l.isBackwards?(s.sibling=t.child,t.child=s):(null!==(a=l.last)?a.sibling=s:t.child=s,l.last=s)}return null!==l.tail?(t=l.tail,l.rendering=t,l.tail=t.sibling,l.renderingStartTime=Ye(),t.sibling=null,a=Zi.current,Cr(Zi,n?1&a|2:1&a),t):(Wo(t),null);case 22:case 23:return mc(),n=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==n&&(t.flags|=8192),n&&1&t.mode?!!(1073741824&Ds)&&(Wo(t),6&t.subtreeFlags&&(t.flags|=8192)):Wo(t),null;case 24:case 25:return null}throw Error(i(156,t.tag))}function Qo(e,t){switch(ti(t),t.tag){case 1:return Dr(t.type)&&Mr(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Gi(),kr(Or),kr(Pr),al(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Xi(t),null;case 13:if(kr(Zi),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));fi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return kr(Zi),null;case 4:return Gi(),null;case 10:return xi(t.type._context),null;case 22:case 23:return mc(),null;default:return null}}Ao=function(e,t){for(var a=t.child;null!==a;){if(5===a.tag||6===a.tag)e.appendChild(a.stateNode);else if(4!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;a=a.return}a.sibling.return=a.return,a=a.sibling}},Do=function(){},Mo=function(e,t,a,n){var r=e.memoizedProps;if(r!==n){e=t.stateNode,Qi(Ui.current);var i,l=null;switch(a){case"input":r=K(e,r),n=K(e,n),l=[];break;case"select":r=I({},r,{value:void 0}),n=I({},n,{value:void 0}),l=[];break;case"textarea":r=ne(e,r),n=ne(e,n),l=[];break;default:"function"!=typeof r.onClick&&"function"==typeof n.onClick&&(e.onclick=Zn)}for(u in be(a,n),a=null,r)if(!n.hasOwnProperty(u)&&r.hasOwnProperty(u)&&null!=r[u])if("style"===u){var s=r[u];for(i in s)s.hasOwnProperty(i)&&(a||(a={}),a[i]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(o.hasOwnProperty(u)?l||(l=[]):(l=l||[]).push(u,null));for(u in n){var c=n[u];if(s=null!=r?r[u]:void 0,n.hasOwnProperty(u)&&c!==s&&(null!=c||null!=s))if("style"===u)if(s){for(i in s)!s.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(a||(a={}),a[i]="");for(i in c)c.hasOwnProperty(i)&&s[i]!==c[i]&&(a||(a={}),a[i]=c[i])}else a||(l||(l=[]),l.push(u,a)),a=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(o.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&_n("scroll",e),l||s===c||(l=[])):(l=l||[]).push(u,c))}a&&(l=l||[]).push("style",a);var u=l;(t.updateQueue=u)&&(t.flags|=4)}},jo=function(e,t,a,n){a!==n&&(t.flags|=4)};var Ko=!1,Go=!1,Yo="function"==typeof WeakSet?WeakSet:Set,Xo=null;function Zo(e,t){var a=e.ref;if(null!==a)if("function"==typeof a)try{a(null)}catch(a){Sc(e,t,a)}else a.current=null}function es(e,t,a){try{a()}catch(a){Sc(e,t,a)}}var ts=!1;function as(e,t,a){var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)===e){var i=r.destroy;r.destroy=void 0,void 0!==i&&es(t,a,i)}r=r.next}while(r!==n)}}function ns(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var a=t=t.next;do{if((a.tag&e)===e){var n=a.create;a.destroy=n()}a=a.next}while(a!==t)}}function rs(e){var t=e.ref;if(null!==t){var a=e.stateNode;e.tag,e=a,"function"==typeof t?t(e):t.current=e}}function is(e){var t=e.alternate;null!==t&&(e.alternate=null,is(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[dr],delete t[fr],delete t[hr],delete t[gr],delete t[vr]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ls(e){return 5===e.tag||3===e.tag||4===e.tag}function os(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ls(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ss(e,t,a){var n=e.tag;if(5===n||6===n)e=e.stateNode,t?8===a.nodeType?a.parentNode.insertBefore(e,t):a.insertBefore(e,t):(8===a.nodeType?(t=a.parentNode).insertBefore(e,a):(t=a).appendChild(e),null!=(a=a._reactRootContainer)||null!==t.onclick||(t.onclick=Zn));else if(4!==n&&null!==(e=e.child))for(ss(e,t,a),e=e.sibling;null!==e;)ss(e,t,a),e=e.sibling}function cs(e,t,a){var n=e.tag;if(5===n||6===n)e=e.stateNode,t?a.insertBefore(e,t):a.appendChild(e);else if(4!==n&&null!==(e=e.child))for(cs(e,t,a),e=e.sibling;null!==e;)cs(e,t,a),e=e.sibling}var us=null,ms=!1;function ds(e,t,a){for(a=a.child;null!==a;)fs(e,t,a),a=a.sibling}function fs(e,t,a){if(it&&"function"==typeof it.onCommitFiberUnmount)try{it.onCommitFiberUnmount(rt,a)}catch(e){}switch(a.tag){case 5:Go||Zo(a,t);case 6:var n=us,r=ms;us=null,ds(e,t,a),ms=r,null!==(us=n)&&(ms?(e=us,a=a.stateNode,8===e.nodeType?e.parentNode.removeChild(a):e.removeChild(a)):us.removeChild(a.stateNode));break;case 18:null!==us&&(ms?(e=us,a=a.stateNode,8===e.nodeType?sr(e.parentNode,a):1===e.nodeType&&sr(e,a),$t(e)):sr(us,a.stateNode));break;case 4:n=us,r=ms,us=a.stateNode.containerInfo,ms=!0,ds(e,t,a),us=n,ms=r;break;case 0:case 11:case 14:case 15:if(!Go&&null!==(n=a.updateQueue)&&null!==(n=n.lastEffect)){r=n=n.next;do{var i=r,l=i.destroy;i=i.tag,void 0!==l&&(2&i||4&i)&&es(a,t,l),r=r.next}while(r!==n)}ds(e,t,a);break;case 1:if(!Go&&(Zo(a,t),"function"==typeof(n=a.stateNode).componentWillUnmount))try{n.props=a.memoizedProps,n.state=a.memoizedState,n.componentWillUnmount()}catch(e){Sc(a,t,e)}ds(e,t,a);break;case 21:ds(e,t,a);break;case 22:1&a.mode?(Go=(n=Go)||null!==a.memoizedState,ds(e,t,a),Go=n):ds(e,t,a);break;default:ds(e,t,a)}}function ps(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var a=e.stateNode;null===a&&(a=e.stateNode=new Yo),t.forEach((function(t){var n=Pc.bind(null,e,t);a.has(t)||(a.add(t),t.then(n,n))}))}}function hs(e,t){var a=t.deletions;if(null!==a)for(var n=0;n<a.length;n++){var r=a[n];try{var l=e,o=t,s=o;e:for(;null!==s;){switch(s.tag){case 5:us=s.stateNode,ms=!1;break e;case 3:case 4:us=s.stateNode.containerInfo,ms=!0;break e}s=s.return}if(null===us)throw Error(i(160));fs(l,o,r),us=null,ms=!1;var c=r.alternate;null!==c&&(c.return=null),r.return=null}catch(e){Sc(r,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)gs(t,e),t=t.sibling}function gs(e,t){var a=e.alternate,n=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(hs(t,e),vs(e),4&n){try{as(3,e,e.return),ns(3,e)}catch(t){Sc(e,e.return,t)}try{as(5,e,e.return)}catch(t){Sc(e,e.return,t)}}break;case 1:hs(t,e),vs(e),512&n&&null!==a&&Zo(a,a.return);break;case 5:if(hs(t,e),vs(e),512&n&&null!==a&&Zo(a,a.return),32&e.flags){var r=e.stateNode;try{de(r,"")}catch(t){Sc(e,e.return,t)}}if(4&n&&null!=(r=e.stateNode)){var l=e.memoizedProps,o=null!==a?a.memoizedProps:l,s=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===s&&"radio"===l.type&&null!=l.name&&Y(r,l),ye(s,o);var u=ye(s,l);for(o=0;o<c.length;o+=2){var m=c[o],d=c[o+1];"style"===m?ge(r,d):"dangerouslySetInnerHTML"===m?me(r,d):"children"===m?de(r,d):y(r,m,d,u)}switch(s){case"input":X(r,l);break;case"textarea":ie(r,l);break;case"select":var f=r._wrapperState.wasMultiple;r._wrapperState.wasMultiple=!!l.multiple;var p=l.value;null!=p?ae(r,!!l.multiple,p,!1):f!==!!l.multiple&&(null!=l.defaultValue?ae(r,!!l.multiple,l.defaultValue,!0):ae(r,!!l.multiple,l.multiple?[]:"",!1))}r[fr]=l}catch(t){Sc(e,e.return,t)}}break;case 6:if(hs(t,e),vs(e),4&n){if(null===e.stateNode)throw Error(i(162));r=e.stateNode,l=e.memoizedProps;try{r.nodeValue=l}catch(t){Sc(e,e.return,t)}}break;case 3:if(hs(t,e),vs(e),4&n&&null!==a&&a.memoizedState.isDehydrated)try{$t(t.containerInfo)}catch(t){Sc(e,e.return,t)}break;case 4:default:hs(t,e),vs(e);break;case 13:hs(t,e),vs(e),8192&(r=e.child).flags&&(l=null!==r.memoizedState,r.stateNode.isHidden=l,!l||null!==r.alternate&&null!==r.alternate.memoizedState||(Fs=Ye())),4&n&&ps(e);break;case 22:if(m=null!==a&&null!==a.memoizedState,1&e.mode?(Go=(u=Go)||m,hs(t,e),Go=u):hs(t,e),vs(e),8192&n){if(u=null!==e.memoizedState,(e.stateNode.isHidden=u)&&!m&&1&e.mode)for(Xo=e,m=e.child;null!==m;){for(d=Xo=m;null!==Xo;){switch(p=(f=Xo).child,f.tag){case 0:case 11:case 14:case 15:as(4,f,f.return);break;case 1:Zo(f,f.return);var h=f.stateNode;if("function"==typeof h.componentWillUnmount){n=f,a=f.return;try{t=n,h.props=t.memoizedProps,h.state=t.memoizedState,h.componentWillUnmount()}catch(e){Sc(n,a,e)}}break;case 5:Zo(f,f.return);break;case 22:if(null!==f.memoizedState){Rs(d);continue}}null!==p?(p.return=f,Xo=p):Rs(d)}m=m.sibling}e:for(m=null,d=e;;){if(5===d.tag){if(null===m){m=d;try{r=d.stateNode,u?"function"==typeof(l=r.style).setProperty?l.setProperty("display","none","important"):l.display="none":(s=d.stateNode,o=null!=(c=d.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,s.style.display=he("display",o))}catch(t){Sc(e,e.return,t)}}}else if(6===d.tag){if(null===m)try{d.stateNode.nodeValue=u?"":d.memoizedProps}catch(t){Sc(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;m===d&&(m=null),d=d.return}m===d&&(m=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:hs(t,e),vs(e),4&n&&ps(e);case 21:}}function vs(e){var t=e.flags;if(2&t){try{e:{for(var a=e.return;null!==a;){if(ls(a)){var n=a;break e}a=a.return}throw Error(i(160))}switch(n.tag){case 5:var r=n.stateNode;32&n.flags&&(de(r,""),n.flags&=-33),cs(e,os(e),r);break;case 3:case 4:var l=n.stateNode.containerInfo;ss(e,os(e),l);break;default:throw Error(i(161))}}catch(t){Sc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bs(e,t,a){Xo=e,ys(e,t,a)}function ys(e,t,a){for(var n=!!(1&e.mode);null!==Xo;){var r=Xo,i=r.child;if(22===r.tag&&n){var l=null!==r.memoizedState||Ko;if(!l){var o=r.alternate,s=null!==o&&null!==o.memoizedState||Go;o=Ko;var c=Go;if(Ko=l,(Go=s)&&!c)for(Xo=r;null!==Xo;)s=(l=Xo).child,22===l.tag&&null!==l.memoizedState?ws(r):null!==s?(s.return=l,Xo=s):ws(r);for(;null!==i;)Xo=i,ys(i,t,a),i=i.sibling;Xo=r,Ko=o,Go=c}Es(e)}else 8772&r.subtreeFlags&&null!==i?(i.return=r,Xo=i):Es(e)}}function Es(e){for(;null!==Xo;){var t=Xo;if(8772&t.flags){var a=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Go||ns(5,t);break;case 1:var n=t.stateNode;if(4&t.flags&&!Go)if(null===a)n.componentDidMount();else{var r=t.elementType===t.type?a.memoizedProps:to(t.type,a.memoizedProps);n.componentDidUpdate(r,a.memoizedState,n.__reactInternalSnapshotBeforeUpdate)}var l=t.updateQueue;null!==l&&Vi(t,l,n);break;case 3:var o=t.updateQueue;if(null!==o){if(a=null,null!==t.child)switch(t.child.tag){case 5:case 1:a=t.child.stateNode}Vi(t,o,a)}break;case 5:var s=t.stateNode;if(null===a&&4&t.flags){a=s;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&a.focus();break;case"img":c.src&&(a.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var u=t.alternate;if(null!==u){var m=u.memoizedState;if(null!==m){var d=m.dehydrated;null!==d&&$t(d)}}}break;default:throw Error(i(163))}Go||512&t.flags&&rs(t)}catch(e){Sc(t,t.return,e)}}if(t===e){Xo=null;break}if(null!==(a=t.sibling)){a.return=t.return,Xo=a;break}Xo=t.return}}function Rs(e){for(;null!==Xo;){var t=Xo;if(t===e){Xo=null;break}var a=t.sibling;if(null!==a){a.return=t.return,Xo=a;break}Xo=t.return}}function ws(e){for(;null!==Xo;){var t=Xo;try{switch(t.tag){case 0:case 11:case 15:var a=t.return;try{ns(4,t)}catch(e){Sc(t,a,e)}break;case 1:var n=t.stateNode;if("function"==typeof n.componentDidMount){var r=t.return;try{n.componentDidMount()}catch(e){Sc(t,r,e)}}var i=t.return;try{rs(t)}catch(e){Sc(t,i,e)}break;case 5:var l=t.return;try{rs(t)}catch(e){Sc(t,l,e)}}}catch(e){Sc(t,t.return,e)}if(t===e){Xo=null;break}var o=t.sibling;if(null!==o){o.return=t.return,Xo=o;break}Xo=t.return}}var Ns,Ss=Math.ceil,ks=E.ReactCurrentDispatcher,Cs=E.ReactCurrentOwner,xs=E.ReactCurrentBatchConfig,Ps=0,Os=null,qs=null,As=0,Ds=0,Ms=Sr(0),js=0,Ts=null,Ls=0,Is=0,Bs=0,_s=null,zs=null,Fs=0,$s=1/0,Vs=null,Hs=!1,Us=null,Ws=null,Js=!1,Qs=null,Ks=0,Gs=0,Ys=null,Xs=-1,Zs=0;function ec(){return 6&Ps?Ye():-1!==Xs?Xs:Xs=Ye()}function tc(e){return 1&e.mode?2&Ps&&0!==As?As&-As:null!==hi.transition?(0===Zs&&(Zs=ht()),Zs):0!==(e=yt)?e:e=void 0===(e=window.event)?16:Gt(e.type):1}function ac(e,t,a,n){if(50<Gs)throw Gs=0,Ys=null,Error(i(185));vt(e,a,n),2&Ps&&e===Os||(e===Os&&(!(2&Ps)&&(Is|=a),4===js&&oc(e,As)),nc(e,n),1===a&&0===Ps&&!(1&t.mode)&&($s=Ye()+500,_r&&$r()))}function nc(e,t){var a=e.callbackNode;!function(e,t){for(var a=e.suspendedLanes,n=e.pingedLanes,r=e.expirationTimes,i=e.pendingLanes;0<i;){var l=31-lt(i),o=1<<l,s=r[l];-1===s?o&a&&!(o&n)||(r[l]=ft(o,t)):s<=t&&(e.expiredLanes|=o),i&=~o}}(e,t);var n=dt(e,e===Os?As:0);if(0===n)null!==a&&Qe(a),e.callbackNode=null,e.callbackPriority=0;else if(t=n&-n,e.callbackPriority!==t){if(null!=a&&Qe(a),1===t)0===e.tag?function(e){_r=!0,Fr(e)}(sc.bind(null,e)):Fr(sc.bind(null,e)),lr((function(){!(6&Ps)&&$r()})),a=null;else{switch(Et(n)){case 1:a=Ze;break;case 4:a=et;break;case 16:default:a=tt;break;case 536870912:a=nt}a=Oc(a,rc.bind(null,e))}e.callbackPriority=t,e.callbackNode=a}}function rc(e,t){if(Xs=-1,Zs=0,6&Ps)throw Error(i(327));var a=e.callbackNode;if(wc()&&e.callbackNode!==a)return null;var n=dt(e,e===Os?As:0);if(0===n)return null;if(30&n||n&e.expiredLanes||t)t=gc(e,n);else{t=n;var r=Ps;Ps|=2;var l=pc();for(Os===e&&As===t||(Vs=null,$s=Ye()+500,dc(e,t));;)try{bc();break}catch(t){fc(e,t)}Ci(),ks.current=l,Ps=r,null!==qs?t=0:(Os=null,As=0,t=js)}if(0!==t){if(2===t&&0!==(r=pt(e))&&(n=r,t=ic(e,r)),1===t)throw a=Ts,dc(e,0),oc(e,n),nc(e,Ye()),a;if(6===t)oc(e,n);else{if(r=e.current.alternate,!(30&n||function(e){for(var t=e;;){if(16384&t.flags){var a=t.updateQueue;if(null!==a&&null!==(a=a.stores))for(var n=0;n<a.length;n++){var r=a[n],i=r.getSnapshot;r=r.value;try{if(!on(i(),r))return!1}catch(e){return!1}}}if(a=t.child,16384&t.subtreeFlags&&null!==a)a.return=t,t=a;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(r)||(t=gc(e,n),2===t&&(l=pt(e),0!==l&&(n=l,t=ic(e,l))),1!==t)))throw a=Ts,dc(e,0),oc(e,n),nc(e,Ye()),a;switch(e.finishedWork=r,e.finishedLanes=n,t){case 0:case 1:throw Error(i(345));case 2:case 5:Rc(e,zs,Vs);break;case 3:if(oc(e,n),(130023424&n)===n&&10<(t=Fs+500-Ye())){if(0!==dt(e,0))break;if(((r=e.suspendedLanes)&n)!==n){ec(),e.pingedLanes|=e.suspendedLanes&r;break}e.timeoutHandle=nr(Rc.bind(null,e,zs,Vs),t);break}Rc(e,zs,Vs);break;case 4:if(oc(e,n),(4194240&n)===n)break;for(t=e.eventTimes,r=-1;0<n;){var o=31-lt(n);l=1<<o,(o=t[o])>r&&(r=o),n&=~l}if(n=r,10<(n=(120>(n=Ye()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Ss(n/1960))-n)){e.timeoutHandle=nr(Rc.bind(null,e,zs,Vs),n);break}Rc(e,zs,Vs);break;default:throw Error(i(329))}}}return nc(e,Ye()),e.callbackNode===a?rc.bind(null,e):null}function ic(e,t){var a=_s;return e.current.memoizedState.isDehydrated&&(dc(e,t).flags|=256),2!==(e=gc(e,t))&&(t=zs,zs=a,null!==t&&lc(t)),e}function lc(e){null===zs?zs=e:zs.push.apply(zs,e)}function oc(e,t){for(t&=~Bs,t&=~Is,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var a=31-lt(t),n=1<<a;e[a]=-1,t&=~n}}function sc(e){if(6&Ps)throw Error(i(327));wc();var t=dt(e,0);if(!(1&t))return nc(e,Ye()),null;var a=gc(e,t);if(0!==e.tag&&2===a){var n=pt(e);0!==n&&(t=n,a=ic(e,n))}if(1===a)throw a=Ts,dc(e,0),oc(e,t),nc(e,Ye()),a;if(6===a)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Rc(e,zs,Vs),nc(e,Ye()),null}function cc(e,t){var a=Ps;Ps|=1;try{return e(t)}finally{0===(Ps=a)&&($s=Ye()+500,_r&&$r())}}function uc(e){null!==Qs&&0===Qs.tag&&!(6&Ps)&&wc();var t=Ps;Ps|=1;var a=xs.transition,n=yt;try{if(xs.transition=null,yt=1,e)return e()}finally{yt=n,xs.transition=a,!(6&(Ps=t))&&$r()}}function mc(){Ds=Ms.current,kr(Ms)}function dc(e,t){e.finishedWork=null,e.finishedLanes=0;var a=e.timeoutHandle;if(-1!==a&&(e.timeoutHandle=-1,rr(a)),null!==qs)for(a=qs.return;null!==a;){var n=a;switch(ti(n),n.tag){case 1:null!=(n=n.type.childContextTypes)&&Mr();break;case 3:Gi(),kr(Or),kr(Pr),al();break;case 5:Xi(n);break;case 4:Gi();break;case 13:case 19:kr(Zi);break;case 10:xi(n.type._context);break;case 22:case 23:mc()}a=a.return}if(Os=e,qs=e=Mc(e.current,null),As=Ds=t,js=0,Ts=null,Bs=Is=Ls=0,zs=_s=null,null!==Ai){for(t=0;t<Ai.length;t++)if(null!==(n=(a=Ai[t]).interleaved)){a.interleaved=null;var r=n.next,i=a.pending;if(null!==i){var l=i.next;i.next=r,n.next=l}a.pending=n}Ai=null}return e}function fc(e,t){for(;;){var a=qs;try{if(Ci(),nl.current=Yl,cl){for(var n=ll.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}cl=!1}if(il=0,sl=ol=ll=null,ul=!1,ml=0,Cs.current=null,null===a||null===a.return){js=1,Ts=t,qs=null;break}e:{var l=e,o=a.return,s=a,c=t;if(t=As,s.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,m=s,d=m.tag;if(!(1&m.mode||0!==d&&11!==d&&15!==d)){var f=m.alternate;f?(m.updateQueue=f.updateQueue,m.memoizedState=f.memoizedState,m.lanes=f.lanes):(m.updateQueue=null,m.memoizedState=null)}var p=go(o);if(null!==p){p.flags&=-257,vo(p,o,s,0,t),1&p.mode&&ho(l,u,t),c=u;var h=(t=p).updateQueue;if(null===h){var g=new Set;g.add(c),t.updateQueue=g}else h.add(c);break e}if(!(1&t)){ho(l,u,t),hc();break e}c=Error(i(426))}else if(ri&&1&s.mode){var v=go(o);if(null!==v){!(65536&v.flags)&&(v.flags|=256),vo(v,o,s,0,t),pi(so(c,s));break e}}l=c=so(c,s),4!==js&&(js=2),null===_s?_s=[l]:_s.push(l),l=o;do{switch(l.tag){case 3:l.flags|=65536,t&=-t,l.lanes|=t,Fi(l,fo(0,c,t));break e;case 1:s=c;var b=l.type,y=l.stateNode;if(!(128&l.flags||"function"!=typeof b.getDerivedStateFromError&&(null===y||"function"!=typeof y.componentDidCatch||null!==Ws&&Ws.has(y)))){l.flags|=65536,t&=-t,l.lanes|=t,Fi(l,po(l,s,t));break e}}l=l.return}while(null!==l)}Ec(a)}catch(e){t=e,qs===a&&null!==a&&(qs=a=a.return);continue}break}}function pc(){var e=ks.current;return ks.current=Yl,null===e?Yl:e}function hc(){0!==js&&3!==js&&2!==js||(js=4),null===Os||!(268435455&Ls)&&!(268435455&Is)||oc(Os,As)}function gc(e,t){var a=Ps;Ps|=2;var n=pc();for(Os===e&&As===t||(Vs=null,dc(e,t));;)try{vc();break}catch(t){fc(e,t)}if(Ci(),Ps=a,ks.current=n,null!==qs)throw Error(i(261));return Os=null,As=0,js}function vc(){for(;null!==qs;)yc(qs)}function bc(){for(;null!==qs&&!Ke();)yc(qs)}function yc(e){var t=Ns(e.alternate,e,Ds);e.memoizedProps=e.pendingProps,null===t?Ec(e):qs=t,Cs.current=null}function Ec(e){var t=e;do{var a=t.alternate;if(e=t.return,32768&t.flags){if(null!==(a=Qo(a,t)))return a.flags&=32767,void(qs=a);if(null===e)return js=6,void(qs=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(a=Jo(a,t,Ds)))return void(qs=a);if(null!==(t=t.sibling))return void(qs=t);qs=t=e}while(null!==t);0===js&&(js=5)}function Rc(e,t,a){var n=yt,r=xs.transition;try{xs.transition=null,yt=1,function(e,t,a,n){do{wc()}while(null!==Qs);if(6&Ps)throw Error(i(327));a=e.finishedWork;var r=e.finishedLanes;if(null===a)return null;if(e.finishedWork=null,e.finishedLanes=0,a===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var l=a.lanes|a.childLanes;if(function(e,t){var a=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var n=e.eventTimes;for(e=e.expirationTimes;0<a;){var r=31-lt(a),i=1<<r;t[r]=0,n[r]=-1,e[r]=-1,a&=~i}}(e,l),e===Os&&(qs=Os=null,As=0),!(2064&a.subtreeFlags)&&!(2064&a.flags)||Js||(Js=!0,Oc(tt,(function(){return wc(),null}))),l=!!(15990&a.flags),15990&a.subtreeFlags||l){l=xs.transition,xs.transition=null;var o=yt;yt=1;var s=Ps;Ps|=4,Cs.current=null,function(e,t){if(er=Ht,fn(e=dn())){if("selectionStart"in e)var a={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(a=(a=e.ownerDocument)&&a.defaultView||window).getSelection&&a.getSelection();if(n&&0!==n.rangeCount){a=n.anchorNode;var r=n.anchorOffset,l=n.focusNode;n=n.focusOffset;try{a.nodeType,l.nodeType}catch(e){a=null;break e}var o=0,s=-1,c=-1,u=0,m=0,d=e,f=null;t:for(;;){for(var p;d!==a||0!==r&&3!==d.nodeType||(s=o+r),d!==l||0!==n&&3!==d.nodeType||(c=o+n),3===d.nodeType&&(o+=d.nodeValue.length),null!==(p=d.firstChild);)f=d,d=p;for(;;){if(d===e)break t;if(f===a&&++u===r&&(s=o),f===l&&++m===n&&(c=o),null!==(p=d.nextSibling))break;f=(d=f).parentNode}d=p}a=-1===s||-1===c?null:{start:s,end:c}}else a=null}a=a||{start:0,end:0}}else a=null;for(tr={focusedElem:e,selectionRange:a},Ht=!1,Xo=t;null!==Xo;)if(e=(t=Xo).child,1028&t.subtreeFlags&&null!==e)e.return=t,Xo=e;else for(;null!==Xo;){t=Xo;try{var h=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var g=h.memoizedProps,v=h.memoizedState,b=t.stateNode,y=b.getSnapshotBeforeUpdate(t.elementType===t.type?g:to(t.type,g),v);b.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var E=t.stateNode.containerInfo;1===E.nodeType?E.textContent="":9===E.nodeType&&E.documentElement&&E.removeChild(E.documentElement);break;default:throw Error(i(163))}}catch(e){Sc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Xo=e;break}Xo=t.return}h=ts,ts=!1}(e,a),gs(a,e),pn(tr),Ht=!!er,tr=er=null,e.current=a,bs(a,e,r),Ge(),Ps=s,yt=o,xs.transition=l}else e.current=a;if(Js&&(Js=!1,Qs=e,Ks=r),0===(l=e.pendingLanes)&&(Ws=null),function(e){if(it&&"function"==typeof it.onCommitFiberRoot)try{it.onCommitFiberRoot(rt,e,void 0,!(128&~e.current.flags))}catch(e){}}(a.stateNode),nc(e,Ye()),null!==t)for(n=e.onRecoverableError,a=0;a<t.length;a++)n((r=t[a]).value,{componentStack:r.stack,digest:r.digest});if(Hs)throw Hs=!1,e=Us,Us=null,e;!!(1&Ks)&&0!==e.tag&&wc(),1&(l=e.pendingLanes)?e===Ys?Gs++:(Gs=0,Ys=e):Gs=0,$r()}(e,t,a,n)}finally{xs.transition=r,yt=n}return null}function wc(){if(null!==Qs){var e=Et(Ks),t=xs.transition,a=yt;try{if(xs.transition=null,yt=16>e?16:e,null===Qs)var n=!1;else{if(e=Qs,Qs=null,Ks=0,6&Ps)throw Error(i(331));var r=Ps;for(Ps|=4,Xo=e.current;null!==Xo;){var l=Xo,o=l.child;if(16&Xo.flags){var s=l.deletions;if(null!==s){for(var c=0;c<s.length;c++){var u=s[c];for(Xo=u;null!==Xo;){var m=Xo;switch(m.tag){case 0:case 11:case 15:as(8,m,l)}var d=m.child;if(null!==d)d.return=m,Xo=d;else for(;null!==Xo;){var f=(m=Xo).sibling,p=m.return;if(is(m),m===u){Xo=null;break}if(null!==f){f.return=p,Xo=f;break}Xo=p}}}var h=l.alternate;if(null!==h){var g=h.child;if(null!==g){h.child=null;do{var v=g.sibling;g.sibling=null,g=v}while(null!==g)}}Xo=l}}if(2064&l.subtreeFlags&&null!==o)o.return=l,Xo=o;else e:for(;null!==Xo;){if(2048&(l=Xo).flags)switch(l.tag){case 0:case 11:case 15:as(9,l,l.return)}var b=l.sibling;if(null!==b){b.return=l.return,Xo=b;break e}Xo=l.return}}var y=e.current;for(Xo=y;null!==Xo;){var E=(o=Xo).child;if(2064&o.subtreeFlags&&null!==E)E.return=o,Xo=E;else e:for(o=y;null!==Xo;){if(2048&(s=Xo).flags)try{switch(s.tag){case 0:case 11:case 15:ns(9,s)}}catch(e){Sc(s,s.return,e)}if(s===o){Xo=null;break e}var R=s.sibling;if(null!==R){R.return=s.return,Xo=R;break e}Xo=s.return}}if(Ps=r,$r(),it&&"function"==typeof it.onPostCommitFiberRoot)try{it.onPostCommitFiberRoot(rt,e)}catch(e){}n=!0}return n}finally{yt=a,xs.transition=t}}return!1}function Nc(e,t,a){e=_i(e,t=fo(0,t=so(a,t),1),1),t=ec(),null!==e&&(vt(e,1,t),nc(e,t))}function Sc(e,t,a){if(3===e.tag)Nc(e,e,a);else for(;null!==t;){if(3===t.tag){Nc(t,e,a);break}if(1===t.tag){var n=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof n.componentDidCatch&&(null===Ws||!Ws.has(n))){t=_i(t,e=po(t,e=so(a,e),1),1),e=ec(),null!==t&&(vt(t,1,e),nc(t,e));break}}t=t.return}}function kc(e,t,a){var n=e.pingCache;null!==n&&n.delete(t),t=ec(),e.pingedLanes|=e.suspendedLanes&a,Os===e&&(As&a)===a&&(4===js||3===js&&(130023424&As)===As&&500>Ye()-Fs?dc(e,0):Bs|=a),nc(e,t)}function Cc(e,t){0===t&&(1&e.mode?(t=ut,!(130023424&(ut<<=1))&&(ut=4194304)):t=1);var a=ec();null!==(e=ji(e,t))&&(vt(e,t,a),nc(e,a))}function xc(e){var t=e.memoizedState,a=0;null!==t&&(a=t.retryLane),Cc(e,a)}function Pc(e,t){var a=0;switch(e.tag){case 13:var n=e.stateNode,r=e.memoizedState;null!==r&&(a=r.retryLane);break;case 19:n=e.stateNode;break;default:throw Error(i(314))}null!==n&&n.delete(t),Cc(e,a)}function Oc(e,t){return Je(e,t)}function qc(e,t,a,n){this.tag=e,this.key=a,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ac(e,t,a,n){return new qc(e,t,a,n)}function Dc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Mc(e,t){var a=e.alternate;return null===a?((a=Ac(e.tag,t,e.key,e.mode)).elementType=e.elementType,a.type=e.type,a.stateNode=e.stateNode,a.alternate=e,e.alternate=a):(a.pendingProps=t,a.type=e.type,a.flags=0,a.subtreeFlags=0,a.deletions=null),a.flags=14680064&e.flags,a.childLanes=e.childLanes,a.lanes=e.lanes,a.child=e.child,a.memoizedProps=e.memoizedProps,a.memoizedState=e.memoizedState,a.updateQueue=e.updateQueue,t=e.dependencies,a.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},a.sibling=e.sibling,a.index=e.index,a.ref=e.ref,a}function jc(e,t,a,n,r,l){var o=2;if(n=e,"function"==typeof e)Dc(e)&&(o=1);else if("string"==typeof e)o=5;else e:switch(e){case N:return Tc(a.children,r,l,t);case S:o=8,r|=8;break;case k:return(e=Ac(12,a,t,2|r)).elementType=k,e.lanes=l,e;case O:return(e=Ac(13,a,t,r)).elementType=O,e.lanes=l,e;case q:return(e=Ac(19,a,t,r)).elementType=q,e.lanes=l,e;case M:return Lc(a,r,l,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:o=10;break e;case x:o=9;break e;case P:o=11;break e;case A:o=14;break e;case D:o=16,n=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Ac(o,a,t,r)).elementType=e,t.type=n,t.lanes=l,t}function Tc(e,t,a,n){return(e=Ac(7,e,n,t)).lanes=a,e}function Lc(e,t,a,n){return(e=Ac(22,e,n,t)).elementType=M,e.lanes=a,e.stateNode={isHidden:!1},e}function Ic(e,t,a){return(e=Ac(6,e,null,t)).lanes=a,e}function Bc(e,t,a){return(t=Ac(4,null!==e.children?e.children:[],e.key,t)).lanes=a,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function _c(e,t,a,n,r){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=n,this.onRecoverableError=r,this.mutableSourceEagerHydrationData=null}function zc(e,t,a,n,r,i,l,o,s){return e=new _c(e,t,a,o,s),1===t?(t=1,!0===i&&(t|=8)):t=0,i=Ac(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:n,isDehydrated:a,cache:null,transitions:null,pendingSuspenseBoundaries:null},Li(i),e}function Fc(e){if(!e)return xr;e:{if($e(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Dr(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(i(171))}if(1===e.tag){var a=e.type;if(Dr(a))return Tr(e,a,t)}return t}function $c(e,t,a,n,r,i,l,o,s){return(e=zc(a,n,!0,e,0,i,0,o,s)).context=Fc(null),a=e.current,(i=Bi(n=ec(),r=tc(a))).callback=null!=t?t:null,_i(a,i,r),e.current.lanes=r,vt(e,r,n),nc(e,n),e}function Vc(e,t,a,n){var r=t.current,i=ec(),l=tc(r);return a=Fc(a),null===t.context?t.context=a:t.pendingContext=a,(t=Bi(i,l)).payload={element:e},null!==(n=void 0===n?null:n)&&(t.callback=n),null!==(e=_i(r,t,l))&&(ac(e,r,l,i),zi(e,r,l)),l}function Hc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Uc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var a=e.retryLane;e.retryLane=0!==a&&a<t?a:t}}function Wc(e,t){Uc(e,t),(e=e.alternate)&&Uc(e,t)}Ns=function(e,t,a){if(null!==e)if(e.memoizedProps!==t.pendingProps||Or.current)yo=!0;else{if(!(e.lanes&a||128&t.flags))return yo=!1,function(e,t,a){switch(t.tag){case 3:Oo(t),fi();break;case 5:Yi(t);break;case 1:Dr(t.type)&&Lr(t);break;case 4:Ki(t,t.stateNode.containerInfo);break;case 10:var n=t.type._context,r=t.memoizedProps.value;Cr(wi,n._currentValue),n._currentValue=r;break;case 13:if(null!==(n=t.memoizedState))return null!==n.dehydrated?(Cr(Zi,1&Zi.current),t.flags|=128,null):a&t.child.childLanes?Io(e,t,a):(Cr(Zi,1&Zi.current),null!==(e=Ho(e,t,a))?e.sibling:null);Cr(Zi,1&Zi.current);break;case 19:if(n=!!(a&t.childLanes),128&e.flags){if(n)return $o(e,t,a);t.flags|=128}if(null!==(r=t.memoizedState)&&(r.rendering=null,r.tail=null,r.lastEffect=null),Cr(Zi,Zi.current),n)break;return null;case 22:case 23:return t.lanes=0,So(e,t,a)}return Ho(e,t,a)}(e,t,a);yo=!!(131072&e.flags)}else yo=!1,ri&&1048576&t.flags&&Zr(t,Wr,t.index);switch(t.lanes=0,t.tag){case 2:var n=t.type;Vo(e,t),e=t.pendingProps;var r=Ar(t,Pr.current);Oi(t,a),r=hl(null,t,n,e,r,a);var l=gl();return t.flags|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Dr(n)?(l=!0,Lr(t)):l=!1,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,Li(t),r.updater=no,t.stateNode=r,r._reactInternals=t,oo(t,n,e,a),t=Po(null,t,n,!0,l,a)):(t.tag=0,ri&&l&&ei(t),Eo(null,t,r,a),t=t.child),t;case 16:n=t.elementType;e:{switch(Vo(e,t),e=t.pendingProps,n=(r=n._init)(n._payload),t.type=n,r=t.tag=function(e){if("function"==typeof e)return Dc(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===A)return 14}return 2}(n),e=to(n,e),r){case 0:t=Co(null,t,n,e,a);break e;case 1:t=xo(null,t,n,e,a);break e;case 11:t=Ro(null,t,n,e,a);break e;case 14:t=wo(null,t,n,to(n.type,e),a);break e}throw Error(i(306,n,""))}return t;case 0:return n=t.type,r=t.pendingProps,Co(e,t,n,r=t.elementType===n?r:to(n,r),a);case 1:return n=t.type,r=t.pendingProps,xo(e,t,n,r=t.elementType===n?r:to(n,r),a);case 3:e:{if(Oo(t),null===e)throw Error(i(387));n=t.pendingProps,r=(l=t.memoizedState).element,Ii(e,t),$i(t,n,null,a);var o=t.memoizedState;if(n=o.element,l.isDehydrated){if(l={element:n,isDehydrated:!1,cache:o.cache,pendingSuspenseBoundaries:o.pendingSuspenseBoundaries,transitions:o.transitions},t.updateQueue.baseState=l,t.memoizedState=l,256&t.flags){t=qo(e,t,n,a,r=so(Error(i(423)),t));break e}if(n!==r){t=qo(e,t,n,a,r=so(Error(i(424)),t));break e}for(ni=cr(t.stateNode.containerInfo.firstChild),ai=t,ri=!0,ii=null,a=Ri(t,null,n,a),t.child=a;a;)a.flags=-3&a.flags|4096,a=a.sibling}else{if(fi(),n===r){t=Ho(e,t,a);break e}Eo(e,t,n,a)}t=t.child}return t;case 5:return Yi(t),null===e&&ci(t),n=t.type,r=t.pendingProps,l=null!==e?e.memoizedProps:null,o=r.children,ar(n,r)?o=null:null!==l&&ar(n,l)&&(t.flags|=32),ko(e,t),Eo(e,t,o,a),t.child;case 6:return null===e&&ci(t),null;case 13:return Io(e,t,a);case 4:return Ki(t,t.stateNode.containerInfo),n=t.pendingProps,null===e?t.child=Ei(t,null,n,a):Eo(e,t,n,a),t.child;case 11:return n=t.type,r=t.pendingProps,Ro(e,t,n,r=t.elementType===n?r:to(n,r),a);case 7:return Eo(e,t,t.pendingProps,a),t.child;case 8:case 12:return Eo(e,t,t.pendingProps.children,a),t.child;case 10:e:{if(n=t.type._context,r=t.pendingProps,l=t.memoizedProps,o=r.value,Cr(wi,n._currentValue),n._currentValue=o,null!==l)if(on(l.value,o)){if(l.children===r.children&&!Or.current){t=Ho(e,t,a);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var s=l.dependencies;if(null!==s){o=l.child;for(var c=s.firstContext;null!==c;){if(c.context===n){if(1===l.tag){(c=Bi(-1,a&-a)).tag=2;var u=l.updateQueue;if(null!==u){var m=(u=u.shared).pending;null===m?c.next=c:(c.next=m.next,m.next=c),u.pending=c}}l.lanes|=a,null!==(c=l.alternate)&&(c.lanes|=a),Pi(l.return,a,t),s.lanes|=a;break}c=c.next}}else if(10===l.tag)o=l.type===t.type?null:l.child;else if(18===l.tag){if(null===(o=l.return))throw Error(i(341));o.lanes|=a,null!==(s=o.alternate)&&(s.lanes|=a),Pi(o,a,t),o=l.sibling}else o=l.child;if(null!==o)o.return=l;else for(o=l;null!==o;){if(o===t){o=null;break}if(null!==(l=o.sibling)){l.return=o.return,o=l;break}o=o.return}l=o}Eo(e,t,r.children,a),t=t.child}return t;case 9:return r=t.type,n=t.pendingProps.children,Oi(t,a),n=n(r=qi(r)),t.flags|=1,Eo(e,t,n,a),t.child;case 14:return r=to(n=t.type,t.pendingProps),wo(e,t,n,r=to(n.type,r),a);case 15:return No(e,t,t.type,t.pendingProps,a);case 17:return n=t.type,r=t.pendingProps,r=t.elementType===n?r:to(n,r),Vo(e,t),t.tag=1,Dr(n)?(e=!0,Lr(t)):e=!1,Oi(t,a),io(t,n,r),oo(t,n,r,a),Po(null,t,n,!0,e,a);case 19:return $o(e,t,a);case 22:return So(e,t,a)}throw Error(i(156,t.tag))};var Jc="function"==typeof reportError?reportError:function(e){console.error(e)};function Qc(e){this._internalRoot=e}function Kc(e){this._internalRoot=e}function Gc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Yc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xc(){}function Zc(e,t,a,n,r){var i=a._reactRootContainer;if(i){var l=i;if("function"==typeof r){var o=r;r=function(){var e=Hc(l);o.call(e)}}Vc(t,l,e,r)}else l=function(e,t,a,n,r){if(r){if("function"==typeof n){var i=n;n=function(){var e=Hc(l);i.call(e)}}var l=$c(t,n,e,0,null,!1,0,"",Xc);return e._reactRootContainer=l,e[pr]=l.current,$n(8===e.nodeType?e.parentNode:e),uc(),l}for(;r=e.lastChild;)e.removeChild(r);if("function"==typeof n){var o=n;n=function(){var e=Hc(s);o.call(e)}}var s=zc(e,0,!1,null,0,!1,0,"",Xc);return e._reactRootContainer=s,e[pr]=s.current,$n(8===e.nodeType?e.parentNode:e),uc((function(){Vc(t,s,a,n)})),s}(a,t,e,r,n);return Hc(l)}Kc.prototype.render=Qc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));Vc(e,t,null,null)},Kc.prototype.unmount=Qc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;uc((function(){Vc(null,e,null,null)})),t[pr]=null}},Kc.prototype.unstable_scheduleHydration=function(e){if(e){var t=St();e={blockedOn:null,target:e,priority:t};for(var a=0;a<Mt.length&&0!==t&&t<Mt[a].priority;a++);Mt.splice(a,0,e),0===a&&It(e)}},Rt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var a=mt(t.pendingLanes);0!==a&&(bt(t,1|a),nc(t,Ye()),!(6&Ps)&&($s=Ye()+500,$r()))}break;case 13:uc((function(){var t=ji(e,1);if(null!==t){var a=ec();ac(t,e,1,a)}})),Wc(e,1)}},wt=function(e){if(13===e.tag){var t=ji(e,134217728);null!==t&&ac(t,e,134217728,ec()),Wc(e,134217728)}},Nt=function(e){if(13===e.tag){var t=tc(e),a=ji(e,t);null!==a&&ac(a,e,t,ec()),Wc(e,t)}},St=function(){return yt},kt=function(e,t){var a=yt;try{return yt=e,t()}finally{yt=a}},we=function(e,t,a){switch(t){case"input":if(X(e,a),t=a.name,"radio"===a.type&&null!=t){for(a=e;a.parentNode;)a=a.parentNode;for(a=a.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<a.length;t++){var n=a[t];if(n!==e&&n.form===e.form){var r=Rr(n);if(!r)throw Error(i(90));J(n),X(n,r)}}}break;case"textarea":ie(e,a);break;case"select":null!=(t=a.value)&&ae(e,!!a.multiple,t,!1)}},Pe=cc,Oe=uc;var eu={usingClientEntryPoint:!1,Events:[yr,Er,Rr,Ce,xe,cc]},tu={findFiberByHostInstance:br,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},au={bundleType:tu.bundleType,version:tu.version,rendererPackageName:tu.rendererPackageName,rendererConfig:tu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:E.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ue(e))?null:e.stateNode},findFiberByHostInstance:tu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var nu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!nu.isDisabled&&nu.supportsFiber)try{rt=nu.inject(au),it=nu}catch(ue){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=eu,t.createPortal=function(e,t){var a=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Gc(t))throw Error(i(200));return function(e,t,a){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:w,key:null==n?null:""+n,children:e,containerInfo:t,implementation:a}}(e,t,null,a)},t.createRoot=function(e,t){if(!Gc(e))throw Error(i(299));var a=!1,n="",r=Jc;return null!=t&&(!0===t.unstable_strictMode&&(a=!0),void 0!==t.identifierPrefix&&(n=t.identifierPrefix),void 0!==t.onRecoverableError&&(r=t.onRecoverableError)),t=zc(e,1,!1,null,0,a,0,n,r),e[pr]=t.current,$n(8===e.nodeType?e.parentNode:e),new Qc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return null===(e=Ue(t))?null:e.stateNode},t.flushSync=function(e){return uc(e)},t.hydrate=function(e,t,a){if(!Yc(t))throw Error(i(200));return Zc(null,e,t,!0,a)},t.hydrateRoot=function(e,t,a){if(!Gc(e))throw Error(i(405));var n=null!=a&&a.hydratedSources||null,r=!1,l="",o=Jc;if(null!=a&&(!0===a.unstable_strictMode&&(r=!0),void 0!==a.identifierPrefix&&(l=a.identifierPrefix),void 0!==a.onRecoverableError&&(o=a.onRecoverableError)),t=$c(t,null,e,1,null!=a?a:null,r,0,l,o),e[pr]=t.current,$n(e),n)for(e=0;e<n.length;e++)r=(r=(a=n[e])._getVersion)(a._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[a,r]:t.mutableSourceEagerHydrationData.push(a,r);return new Kc(t)},t.render=function(e,t,a){if(!Yc(t))throw Error(i(200));return Zc(null,e,t,!1,a)},t.unmountComponentAtNode=function(e){if(!Yc(e))throw Error(i(40));return!!e._reactRootContainer&&(uc((function(){Zc(null,null,e,!1,(function(){e._reactRootContainer=null,e[pr]=null}))})),!0)},t.unstable_batchedUpdates=cc,t.unstable_renderSubtreeIntoContainer=function(e,t,a,n){if(!Yc(a))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return Zc(e,t,a,!1,n)},t.version="18.3.1-next-f1338f8080-20240426"},338:(e,t,a)=>{"use strict";var n=a(961);t.createRoot=n.createRoot,t.hydrateRoot=n.hydrateRoot},961:(e,t,a)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=a(551)},115:e=>{var t="undefined"!=typeof Element,a="function"==typeof Map,n="function"==typeof Set,r="function"==typeof ArrayBuffer&&!!ArrayBuffer.isView;function i(e,l){if(e===l)return!0;if(e&&l&&"object"==typeof e&&"object"==typeof l){if(e.constructor!==l.constructor)return!1;var o,s,c,u;if(Array.isArray(e)){if((o=e.length)!=l.length)return!1;for(s=o;0!=s--;)if(!i(e[s],l[s]))return!1;return!0}if(a&&e instanceof Map&&l instanceof Map){if(e.size!==l.size)return!1;for(u=e.entries();!(s=u.next()).done;)if(!l.has(s.value[0]))return!1;for(u=e.entries();!(s=u.next()).done;)if(!i(s.value[1],l.get(s.value[0])))return!1;return!0}if(n&&e instanceof Set&&l instanceof Set){if(e.size!==l.size)return!1;for(u=e.entries();!(s=u.next()).done;)if(!l.has(s.value[0]))return!1;return!0}if(r&&ArrayBuffer.isView(e)&&ArrayBuffer.isView(l)){if((o=e.length)!=l.length)return!1;for(s=o;0!=s--;)if(e[s]!==l[s])return!1;return!0}if(e.constructor===RegExp)return e.source===l.source&&e.flags===l.flags;if(e.valueOf!==Object.prototype.valueOf&&"function"==typeof e.valueOf&&"function"==typeof l.valueOf)return e.valueOf()===l.valueOf();if(e.toString!==Object.prototype.toString&&"function"==typeof e.toString&&"function"==typeof l.toString)return e.toString()===l.toString();if((o=(c=Object.keys(e)).length)!==Object.keys(l).length)return!1;for(s=o;0!=s--;)if(!Object.prototype.hasOwnProperty.call(l,c[s]))return!1;if(t&&e instanceof Element)return!1;for(s=o;0!=s--;)if(("_owner"!==c[s]&&"__v"!==c[s]&&"__o"!==c[s]||!e.$$typeof)&&!i(e[c[s]],l[c[s]]))return!1;return!0}return e!=e&&l!=l}e.exports=function(e,t){try{return i(e,t)}catch(e){if((e.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw e}}},98:(e,t,a)=>{"use strict";var n,r=a(540),i=(n=r)&&"object"==typeof n&&"default"in n?n.default:n;function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var o=!("undefined"==typeof window||!window.document||!window.document.createElement);e.exports=function(e,t,a){if("function"!=typeof e)throw new Error("Expected reducePropsToState to be a function.");if("function"!=typeof t)throw new Error("Expected handleStateChangeOnClient to be a function.");if(void 0!==a&&"function"!=typeof a)throw new Error("Expected mapStateOnServer to either be undefined or a function.");return function(n){if("function"!=typeof n)throw new Error("Expected WrappedComponent to be a React component.");var s,c=[];function u(){s=e(c.map((function(e){return e.props}))),m.canUseDOM?t(s):a&&(s=a(s))}var m=function(e){var t,a;function r(){return e.apply(this,arguments)||this}a=e,(t=r).prototype=Object.create(a.prototype),t.prototype.constructor=t,t.__proto__=a,r.peek=function(){return s},r.rewind=function(){if(r.canUseDOM)throw new Error("You may only call rewind() on the server. Call peek() to read the current state.");var e=s;return s=void 0,c=[],e};var l=r.prototype;return l.UNSAFE_componentWillMount=function(){c.push(this),u()},l.componentDidUpdate=function(){u()},l.componentWillUnmount=function(){var e=c.indexOf(this);c.splice(e,1),u()},l.render=function(){return i.createElement(n,this.props)},r}(r.PureComponent);return l(m,"displayName","SideEffect("+function(e){return e.displayName||e.name||"Component"}(n)+")"),l(m,"canUseDOM",o),m}}},287:(e,t)=>{"use strict";var a=Symbol.for("react.element"),n=Symbol.for("react.portal"),r=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),o=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),m=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),f=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function v(e,t,a){this.props=e,this.context=t,this.refs=g,this.updater=a||p}function b(){}function y(e,t,a){this.props=e,this.context=t,this.refs=g,this.updater=a||p}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=v.prototype;var E=y.prototype=new b;E.constructor=y,h(E,v.prototype),E.isPureReactComponent=!0;var R=Array.isArray,w=Object.prototype.hasOwnProperty,N={current:null},S={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,i={},l=null,o=null;if(null!=t)for(r in void 0!==t.ref&&(o=t.ref),void 0!==t.key&&(l=""+t.key),t)w.call(t,r)&&!S.hasOwnProperty(r)&&(i[r]=t[r]);var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){for(var c=Array(s),u=0;u<s;u++)c[u]=arguments[u+2];i.children=c}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===i[r]&&(i[r]=s[r]);return{$$typeof:a,type:e,key:l,ref:o,props:i,_owner:N.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var x=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,r,i,l){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var s=!1;if(null===e)s=!0;else switch(o){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case a:case n:s=!0}}if(s)return l=l(s=e),e=""===i?"."+P(s,0):i,R(l)?(r="",null!=e&&(r=e.replace(x,"$&/")+"/"),O(l,t,r,"",(function(e){return e}))):null!=l&&(C(l)&&(l=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(l,r+(!l.key||s&&s.key===l.key?"":(""+l.key).replace(x,"$&/")+"/")+e)),t.push(l)),1;if(s=0,i=""===i?".":i+":",R(e))for(var c=0;c<e.length;c++){var u=i+P(o=e[c],c);s+=O(o,t,r,u,l)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(o=e.next()).done;)s+=O(o=o.value,t,r,u=i+P(o,c++),l);else if("object"===o)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function q(e,t,a){if(null==e)return e;var n=[],r=0;return O(e,n,"","",(function(e){return t.call(a,e,r++)})),n}function A(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var D={current:null},M={transition:null},j={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:M,ReactCurrentOwner:N};function T(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:q,forEach:function(e,t,a){q(e,(function(){t.apply(this,arguments)}),a)},count:function(e){var t=0;return q(e,(function(){t++})),t},toArray:function(e){return q(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=r,t.Profiler=l,t.PureComponent=y,t.StrictMode=i,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=j,t.act=T,t.cloneElement=function(e,t,n){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r=h({},e.props),i=e.key,l=e.ref,o=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,o=N.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)w.call(t,c)&&!S.hasOwnProperty(c)&&(r[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)r.children=n;else if(1<c){s=Array(c);for(var u=0;u<c;u++)s[u]=arguments[u+2];r.children=s}return{$$typeof:a,type:e.type,key:i,ref:l,props:r,_owner:o}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:A}},t.memo=function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=M.transition;M.transition={};try{e()}finally{M.transition=t}},t.unstable_act=T,t.useCallback=function(e,t){return D.current.useCallback(e,t)},t.useContext=function(e){return D.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return D.current.useDeferredValue(e)},t.useEffect=function(e,t){return D.current.useEffect(e,t)},t.useId=function(){return D.current.useId()},t.useImperativeHandle=function(e,t,a){return D.current.useImperativeHandle(e,t,a)},t.useInsertionEffect=function(e,t){return D.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return D.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return D.current.useMemo(e,t)},t.useReducer=function(e,t,a){return D.current.useReducer(e,t,a)},t.useRef=function(e){return D.current.useRef(e)},t.useState=function(e){return D.current.useState(e)},t.useSyncExternalStore=function(e,t,a){return D.current.useSyncExternalStore(e,t,a)},t.useTransition=function(){return D.current.useTransition()},t.version="18.3.1"},540:(e,t,a)=>{"use strict";e.exports=a(287)},463:(e,t)=>{"use strict";function a(e,t){var a=e.length;e.push(t);e:for(;0<a;){var n=a-1>>>1,r=e[n];if(!(0<i(r,t)))break e;e[n]=t,e[a]=r,a=n}}function n(e){return 0===e.length?null:e[0]}function r(e){if(0===e.length)return null;var t=e[0],a=e.pop();if(a!==t){e[0]=a;e:for(var n=0,r=e.length,l=r>>>1;n<l;){var o=2*(n+1)-1,s=e[o],c=o+1,u=e[c];if(0>i(s,a))c<r&&0>i(u,s)?(e[n]=u,e[c]=a,n=c):(e[n]=s,e[o]=a,n=o);else{if(!(c<r&&0>i(u,a)))break e;e[n]=u,e[c]=a,n=c}}}return t}function i(e,t){var a=e.sortIndex-t.sortIndex;return 0!==a?a:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var o=Date,s=o.now();t.unstable_now=function(){return o.now()-s}}var c=[],u=[],m=1,d=null,f=3,p=!1,h=!1,g=!1,v="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function E(e){for(var t=n(u);null!==t;){if(null===t.callback)r(u);else{if(!(t.startTime<=e))break;r(u),t.sortIndex=t.expirationTime,a(c,t)}t=n(u)}}function R(e){if(g=!1,E(e),!h)if(null!==n(c))h=!0,M(w);else{var t=n(u);null!==t&&j(R,t.startTime-e)}}function w(e,a){h=!1,g&&(g=!1,b(C),C=-1),p=!0;var i=f;try{for(E(a),d=n(c);null!==d&&(!(d.expirationTime>a)||e&&!O());){var l=d.callback;if("function"==typeof l){d.callback=null,f=d.priorityLevel;var o=l(d.expirationTime<=a);a=t.unstable_now(),"function"==typeof o?d.callback=o:d===n(c)&&r(c),E(a)}else r(c);d=n(c)}if(null!==d)var s=!0;else{var m=n(u);null!==m&&j(R,m.startTime-a),s=!1}return s}finally{d=null,f=i,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var N,S=!1,k=null,C=-1,x=5,P=-1;function O(){return!(t.unstable_now()-P<x)}function q(){if(null!==k){var e=t.unstable_now();P=e;var a=!0;try{a=k(!0,e)}finally{a?N():(S=!1,k=null)}}else S=!1}if("function"==typeof y)N=function(){y(q)};else if("undefined"!=typeof MessageChannel){var A=new MessageChannel,D=A.port2;A.port1.onmessage=q,N=function(){D.postMessage(null)}}else N=function(){v(q,0)};function M(e){k=e,S||(S=!0,N())}function j(e,a){C=v((function(){e(t.unstable_now())}),a)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||p||(h=!0,M(w))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):x=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return f},t.unstable_getFirstCallbackNode=function(){return n(c)},t.unstable_next=function(e){switch(f){case 1:case 2:case 3:var t=3;break;default:t=f}var a=f;f=t;try{return e()}finally{f=a}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var a=f;f=e;try{return t()}finally{f=a}},t.unstable_scheduleCallback=function(e,r,i){var l=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return e={id:m++,callback:r,priorityLevel:e,startTime:i,expirationTime:o=i+o,sortIndex:-1},i>l?(e.sortIndex=i,a(u,e),null===n(c)&&e===n(u)&&(g?(b(C),C=-1):g=!0,j(R,i-l))):(e.sortIndex=o,a(c,e),h||p||(h=!0,M(w))),e},t.unstable_shouldYield=O,t.unstable_wrapCallback=function(e){var t=f;return function(){var a=f;f=t;try{return e.apply(this,arguments)}finally{f=a}}}},982:(e,t,a)=>{"use strict";e.exports=a(463)},942:(e,t)=>{var a;!function(){"use strict";var n={}.hasOwnProperty;function r(){for(var e="",t=0;t<arguments.length;t++){var a=arguments[t];a&&(e=l(e,i(a)))}return e}function i(e){if("string"==typeof e||"number"==typeof e)return e;if("object"!=typeof e)return"";if(Array.isArray(e))return r.apply(null,e);if(e.toString!==Object.prototype.toString&&!e.toString.toString().includes("[native code]"))return e.toString();var t="";for(var a in e)n.call(e,a)&&e[a]&&(t=l(t,a));return t}function l(e,t){return t?e?e+" "+t:e+t:e}e.exports?(r.default=r,e.exports=r):void 0===(a=function(){return r}.apply(t,[]))||(e.exports=a)}()}},e=>{e(e.s=48)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,